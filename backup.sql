--
-- PostgreSQL database dump
--

-- Dumped from database version 17.2
-- Dumped by pg_dump version 17.2

-- Started on 2025-02-13 17:50:02

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 5 (class 2615 OID 60223)
-- Name: public; Type: SCHEMA; Schema: -; Owner: postgres
--

-- *not* creating schema, since initdb creates it


ALTER SCHEMA public OWNER TO postgres;

--
-- TOC entry 4889 (class 0 OID 0)
-- Dependencies: 5
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA public IS '';


SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- TOC entry 220 (class 1259 OID 60324)
-- Name: Category; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Category" (
    id text NOT NULL,
    name text NOT NULL,
    "technologyId" text NOT NULL,
    "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp(3) without time zone NOT NULL
);


ALTER TABLE public."Category" OWNER TO postgres;

--
-- TOC entry 218 (class 1259 OID 60264)
-- Name: Example; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Example" (
    id text NOT NULL,
    title text NOT NULL,
    description text NOT NULL,
    code text NOT NULL,
    explanation text NOT NULL,
    "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "itemId" text NOT NULL,
    "technologyId" text NOT NULL,
    "updatedAt" timestamp(3) without time zone NOT NULL
);


ALTER TABLE public."Example" OWNER TO postgres;

--
-- TOC entry 221 (class 1259 OID 60332)
-- Name: Item; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Item" (
    id text NOT NULL,
    "itemId" text NOT NULL,
    title text NOT NULL,
    "categoryId" text NOT NULL,
    "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp(3) without time zone NOT NULL
);


ALTER TABLE public."Item" OWNER TO postgres;

--
-- TOC entry 219 (class 1259 OID 60316)
-- Name: Technology; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."Technology" (
    id text NOT NULL,
    name text NOT NULL,
    "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp(3) without time zone NOT NULL,
    alt text NOT NULL,
    color text NOT NULL,
    "hoverColor" text NOT NULL,
    logo text NOT NULL,
    padding text NOT NULL,
    title text NOT NULL
);


ALTER TABLE public."Technology" OWNER TO postgres;

--
-- TOC entry 217 (class 1259 OID 60224)
-- Name: _prisma_migrations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public._prisma_migrations (
    id character varying(36) NOT NULL,
    checksum character varying(64) NOT NULL,
    finished_at timestamp with time zone,
    migration_name character varying(255) NOT NULL,
    logs text,
    rolled_back_at timestamp with time zone,
    started_at timestamp with time zone DEFAULT now() NOT NULL,
    applied_steps_count integer DEFAULT 0 NOT NULL
);


ALTER TABLE public._prisma_migrations OWNER TO postgres;

--
-- TOC entry 4882 (class 0 OID 60324)
-- Dependencies: 220
-- Data for Name: Category; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."Category" (id, name, "technologyId", "createdAt", "updatedAt") FROM stdin;
2b907748-004c-40ce-bdab-49311206e75a	Framework Gin	44c57ad7-8550-41a2-a562-0c3919e41929	2025-01-29 20:23:11.974	2025-01-29 20:23:11.974
729d7d3e-dd05-4cce-9952-b4cd1690544e	Fundamentos Go Lang	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.066	2025-01-29 20:23:12.066
9d58d442-26f6-44f5-bea9-1b05309c44ca	Funções Avançadas	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.101	2025-01-29 20:23:12.101
8a253f60-3123-4568-b595-1a472a6dddc6	Interfaces e Tipos Avançados	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.122	2025-01-29 20:23:12.122
cc317892-62e9-4dd2-bdce-72adb2b0c7ce	Concorrência em Go	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.13	2025-01-29 20:23:12.13
0efcf7a7-ec70-48af-b19e-f8c2caa40d46	Padrões de concorrência	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.141	2025-01-29 20:23:12.141
bc4d72c6-616e-493e-9b60-77aee24f0b9b	Principais pacotes Go	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.147	2025-01-29 20:23:12.147
ea81524d-59a5-4b17-90c5-b9486d604359	Principais Verbos de Formatação	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.218	2025-01-29 20:23:12.218
69c271b4-c0ff-4322-ac9c-48e21473db2b	Testes e Debug	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.228	2025-01-29 20:23:12.228
1bec2612-27b3-4cb7-85b7-99fe26a680fa	Segurança e Autenticação	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.248	2025-01-29 20:23:12.248
985355c0-38e6-48cb-bf5d-352fbff3ed39	Fundamentos JavaScript	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.282	2025-01-29 20:23:12.282
dde8a355-91f4-4c11-8c4b-4720f5089587	Estruturas de Dados	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.299	2025-01-29 20:23:12.299
b373f332-b748-4f4d-8c76-61a66b645109	Controle de Fluxo	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.311	2025-01-29 20:23:12.311
27f775bf-f7eb-41c7-884d-414df443e442	Funções	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.323	2025-01-29 20:23:12.323
43d9977d-d96b-485f-9879-141616b915d6	Conceitos Avançados	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.341	2025-01-29 20:23:12.341
72a50319-ecff-481a-ad13-be053dc55ca0	Manipulação do DOM	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.358	2025-01-29 20:23:12.358
7980a9dd-0fde-4c32-a43a-1aaa2521c299	Framework NestJS	29682086-bbe4-46d1-8f91-35eb6c7c8b96	2025-01-29 20:23:12.395	2025-01-29 20:23:12.395
473c968d-09ee-481b-9e74-feaa3ff50ab3	Fundamentos Node.js	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.446	2025-01-29 20:23:12.446
5a23f72e-d88f-46c0-a9a2-a642168fcebd	Sistema de Arquivos	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.461	2025-01-29 20:23:12.461
d6466515-66f2-40ed-8d4d-7caedbef4bfe	Rede e HTTP	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.474	2025-01-29 20:23:12.474
cf5a26bc-3e69-4fe0-8bd7-d2d039a2f264	Banco de Dados	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.491	2025-01-29 20:23:12.491
a1207780-d3c1-47c9-815f-46535abeeb40	Segurança e Autenticação	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.508	2025-01-29 20:23:12.508
f539eb98-01e9-415c-9994-2607b837bcca	Testes e Debug	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.529	2025-01-29 20:23:12.529
d6483356-26bf-4fb0-be73-037430941d88	Performance e Deploy	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.542	2025-01-29 20:23:12.542
02907da2-685c-419c-87f5-e3764ca13a93	Recursos Avançados	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.582	2025-01-29 20:23:12.582
90ee8835-e4f8-4c08-9ecd-e1fb9d96014c	Fundamentos SQL	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.62	2025-01-29 20:23:12.62
3d78ca41-dd83-425f-82b2-0d6e00ce13e5	Manipulação de Dados	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.641	2025-01-29 20:23:12.641
9be82da1-db96-4e19-b796-cb938935c4c0	Joins e Relacionamentos	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.658	2025-01-29 20:23:12.658
db0cfed1-1d89-47c3-83ae-6548ae49501e	Funções SQL	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.678	2025-01-29 20:23:12.678
79f83f5c-2663-4cdd-9866-694e742ebbea	Subqueries e Views	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.699	2025-01-29 20:23:12.699
b9ee5e18-6237-435e-911b-5e16df7290bb	DDL (Data Definition Language)	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.715	2025-01-29 20:23:12.715
8355ea41-adf1-42af-8c44-c57f9c3eb497	Controle de Transações	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.735	2025-01-29 20:23:12.735
75692a9e-4ffb-48c5-a27e-7712140d2a5c	Performance e Otimização	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.75	2025-01-29 20:23:12.75
05183b42-0f10-4d92-91dd-80436e82f1a7	Fundamentos TypeScript	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.782	2025-01-29 20:23:12.782
90c52de6-3130-4abd-abd0-1c857e1919b1	Estruturas de Dados	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.817	2025-01-29 20:23:12.817
7ed66c5e-7bcb-479f-90c8-77ead8921471	Controle de Fluxo	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.837	2025-01-29 20:23:12.837
51269c62-94b5-49bf-ab06-59d6cb193781	Funções	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.852	2025-01-29 20:23:12.852
cb537b68-517d-4488-8913-d07d8ceba4c5	Classes e Orientação a Objetos	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.878	2025-01-29 20:23:12.878
c357b6cc-ac52-41b3-80cf-97826ba0bf6e	Avançado TypeScript	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.898	2025-01-29 20:23:12.898
\.


--
-- TOC entry 4880 (class 0 OID 60264)
-- Dependencies: 218
-- Data for Name: Example; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."Example" (id, title, description, code, explanation, "createdAt", "itemId", "technologyId", "updatedAt") FROM stdin;
1e13d0e0-27a0-4c70-afec-7b5c0dc4316a	Introdução ao Gin	Uma introdução ao framework Gin para desenvolvimento de APIs em Go	package main\n\nimport (\n"github.com/gin-gonic/gin"\n"net/http"\n)\n\nfunc main() {\nr := gin.Default()\n\nr.GET("/", func(c *gin.Context) {\nc.JSON(http.StatusOK, gin.H{"message": "Bem-vindo ao Gin!"})\n})\n\nr.Run(":8080") // Inicia o servidor na porta 8080\n}\n	O Gin é um framework minimalista e de alto desempenho para desenvolvimento de APIs em Go.\n\n- A função `gin.Default()` cria uma instância do router com middlewares padrão (logger e recuperação de panics).\n- A rota `GET("/ “)` define um endpoint que retorna um JSON com a mensagem "Bem-vindo ao Gin!".\n- `r.Run(":8080")` inicia o servidor na porta 8080.\n- O Gin é conhecido por ser rápido e eficiente, tornando-se uma excelente escolha para a construção de APIs escaláveis.	2025-01-29 20:23:12.013	8c1a7056-20c4-4ca6-a234-c7499c604e17	44c57ad7-8550-41a2-a562-0c3919e41929	2025-01-29 20:23:12.013
940ab5fb-4f57-4333-befe-dc1694cebbcd	Estrutura de Projeto	Como organizar um projeto no Gin de forma modular e escalável	project/\n│── main.go\n│── routes/\n│   ├── routes.go\n│   ├── user_routes.go\n│── controllers/\n│   ├── user_controller.go\n│── models/\n│   ├── user.go\n│── middlewares/\n│   ├── auth.go\n│── config/\n│   ├── database.go\n│── .env\n	Para manter um projeto Gin organizado e escalável, seguimos uma estrutura modular.\n\n- `routes/` contém as definições de rotas, separadas por responsabilidade.\n- `controllers/` gerencia a lógica das requisições e respostas.\n- `models/` define as estruturas de dados utilizadas no projeto.\n- `middlewares/` armazena middlewares, como autenticação e logging.\n- `config/` contém configurações globais, como conexão com banco de dados.\n- `.env` armazena variáveis de ambiente, como chaves secretas e URLs de banco de dados.\n\nEssa estrutura melhora a manutenção e facilita a escalabilidade do código.	2025-01-29 20:23:12.027	ddaca54f-18ad-425b-926d-9c2aa00ab7b1	44c57ad7-8550-41a2-a562-0c3919e41929	2025-01-29 20:23:12.027
38e7883d-eed4-4f4b-9d35-bc634b44d731	Rotas e Parâmetros com Gin	Como definir rotas e capturar parâmetros no Gin	package main\n\nimport (\n"github.com/gin-gonic/gin"\n"net/http"\n)\n\nfunc main() {\nr := gin.Default()\n\nr.GET("/hello", func(c *gin.Context) {\nc.JSON(http.StatusOK, gin.H{"message": "Olá, Gin!"})\n})\n\nr.GET("/user/:id", func(c *gin.Context) {\nuserID := c.Param("id")\nc.JSON(http.StatusOK, gin.H{"user_id": userID})\n})\n\nr.GET("/search", func(c *gin.Context) {\nquery := c.Query("q")\nc.JSON(http.StatusOK, gin.H{"query": query})\n})\n\nr.Run(":8080")\n}\n	O Gin permite criar rotas de forma simples e intuitiva:\n\n- A rota `/hello` responde com uma mensagem JSON fixa.\n- A rota `/user/:id` captura um parâmetro da URL (`:id`) e retorna como resposta.\n- A rota `/search?q=valor` usa query parameters, capturados com `c.Query("q")`.\n\nIsso torna a API flexível para lidar com diferentes formas de entrada de dados.	2025-01-29 20:23:12.03	d299dae0-b1b2-401d-ac8e-72dc9a9c76d3	44c57ad7-8550-41a2-a562-0c3919e41929	2025-01-29 20:23:12.03
a9af2d4e-0738-4456-b30f-4732042ceb0e	Middlewares no Gin	Como criar e usar middlewares no Gin para controle de fluxo	package main\n\nimport (\n"github.com/gin-gonic/gin"\n"log"\n"time"\n)\n\nfunc LoggerMiddleware() gin.HandlerFunc {\nreturn func(c *gin.Context) {\nstart := time.Now()\nc.Next() // Continua para a próxima etapa\nduration := time.Since(start)\nlog.Printf("Requisição %s %s demorou %v", c.Request.Method, c.Request.URL, duration)\n}\n}\n\nfunc main() {\nr := gin.Default()\nr.Use(LoggerMiddleware()) // Aplica o middleware globalmente\n\nr.GET("/", func(c *gin.Context) {\nc.JSON(200, gin.H{"message": "Hello, Middleware!"})\n})\n\nr.Run(":8080")\n}\n	Middlewares são funções que podem interceptar requisições antes de chegarem aos handlers.\n\n- `LoggerMiddleware` calcula o tempo de execução da requisição e exibe no log.\n- `c.Next()` permite que o fluxo continue para o próximo middleware ou handler.\n- `r.Use(LoggerMiddleware())` registra o middleware globalmente para todas as rotas.\n\nMiddlewares são úteis para autenticação, logging, controle de acesso, entre outros.	2025-01-29 20:23:12.034	60ca2688-fcd3-455c-9960-48c7be93aeb9	44c57ad7-8550-41a2-a562-0c3919e41929	2025-01-29 20:23:12.034
a0eebb40-918c-4f38-b912-2aff4a9c83d2	Tratamento de Erros no Gin	Como lidar com erros de forma eficaz no Gin	package main\n\nimport (\n"errors"\n"github.com/gin-gonic/gin"\n"net/http"\n)\n\nfunc getUser(c *gin.Context) {\nuserID := c.Param("id")\nif userID != "1" {\nc.JSON(http.StatusNotFound, gin.H{"error": "Usuário não encontrado"})\nreturn\n}\nc.JSON(http.StatusOK, gin.H{"user": "Usuário encontrado!"})\n}\n\nfunc main() {\nr := gin.Default()\nr.GET("/user/:id", getUser)\nr.Run(":8080")\n}\n	O tratamento de erros no Gin é feito verificando condições e retornando respostas adequadas.\n\n- Se `userID != "1"`, retornamos um erro 404 com `c.JSON(http.StatusNotFound)`.\n- Caso contrário, retornamos uma resposta de sucesso.\n- O Gin também permite usar middlewares para capturar erros globais, melhorando a padronização da API.\n\nIsso garante uma experiência consistente e previsível para os usuários da API.	2025-01-29 20:23:12.036	83215e01-3e5f-4f48-92e3-4dee38caf05f	44c57ad7-8550-41a2-a562-0c3919e41929	2025-01-29 20:23:12.036
74aa6957-507c-4aba-9f84-96fbc0a97234	Grupos de Rotas	Como organizar rotas em grupos no Gin	package main\n\nimport (\n"github.com/gin-gonic/gin"\n)\n\nfunc main() {\nr := gin.Default()\n\napi := r.Group("/api")\n{\napi.GET("/users", func(c *gin.Context) {\nc.JSON(200, gin.H{"users": "Lista de usuários"})\n})\n\napi.GET("/products", func(c *gin.Context) {\nc.JSON(200, gin.H{"products": "Lista de produtos"})\n})\n}\n\nr.Run(":8080")\n}\n	Grupos de rotas ajudam a organizar endpoints com um prefixo comum.\n\n- Criamos o grupo `/api` e definimos sub-rotas dentro dele.\n- Isso torna o código mais organizado e reduz repetição de prefixos.\n- Também podemos aplicar middlewares a grupos específicos.\n\nIsso melhora a modularidade e facilita a manutenção do código.	2025-01-29 20:23:12.039	72af4c6b-d78f-4408-9254-dd1ecc3f41e9	44c57ad7-8550-41a2-a562-0c3919e41929	2025-01-29 20:23:12.039
b865b277-b2f5-48b4-83cb-86ed8c8c37f6	Valores Dinâmicos nas Rotas	Como trabalhar com valores dinâmicos em rotas no Gin	package main\n\nimport (\n"github.com/gin-gonic/gin"\n"net/http"\n)\n\nfunc main() {\nr := gin.Default()\n\nr.GET("/post/:year/:month/:day", func(c *gin.Context) {\nyear := c.Param("year")\nmonth := c.Param("month")\nday := c.Param("day")\nc.JSON(http.StatusOK, gin.H{"date": year + "-" + month + "-" + day})\n})\n\nr.Run(":8080")\n}\n	Podemos capturar múltiplos parâmetros dinâmicos em uma rota.\n\n- A rota `/post/:year/:month/:day` captura três valores da URL.\n- `c.Param("year")`, `c.Param("month")` e `c.Param("day")` extraem esses valores.\n- Isso é útil para páginas de detalhes, filtragens e categorias dinâmicas.\n\nFacilita a criação de URLs semânticas e amigáveis para APIs e aplicações web.	2025-01-29 20:23:12.041	ee213bd2-0726-44c5-a4b7-569f7b7c2e4e	44c57ad7-8550-41a2-a562-0c3919e41929	2025-01-29 20:23:12.041
d2ede40f-eea6-4c4a-bccb-0607278b2429	 Closure	Entendendo closures em Go	Closure\nfunc contador() func() int {\ni := 0\nreturn func() int {\ni++\nreturn i\n}\n}\n\nfunc main() {\nc := contador()\nfmt.Println(c())\nfmt.Println(c())\nfmt.Println(c())\n}	Closures são funções que capturam o ambiente onde foram criadas, incluindo variáveis externas a elas.\nNo exemplo, a função 'contador' retorna uma função anônima que tem acesso à variável 'i' do escopo externo.	2025-01-29 20:23:12.119	ea515541-8d30-42c3-87d1-f0292c895ffe	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.119
a001cb40-737d-43d9-b6c5-1f4d17406bf6	Validação de Requisição	Como validar dados enviados pelo cliente no Gin	package main\n\nimport (\n"github.com/gin-gonic/gin"\n"github.com/go-playground/validator/v10"\n"net/http"\n)\n\ntype User struct {\nName  string `json:"name" binding:"required"`\nEmail string `json:"email" binding:"required,email"`\nAge   int    `json:"age" binding:"gte=18,lte=60"`\n}\n\nvar validate = validator.New()\n\nfunc createUser(c *gin.Context) {\nvar user User\n\nif err := c.ShouldBindJSON(&user); err != nil {\nc.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})\nreturn\n}\n\nc.JSON(http.StatusOK, gin.H{"message": "Usuário criado com sucesso", "user": user})\n}\n\nfunc main() {\nr := gin.Default()\nr.POST("/user", createUser)\nr.Run(":8080")\n}\n	A validação de dados no Gin é feita com o pacote `binding`, que usa `validator.v10`.\n\n- A struct `User` tem regras de validação nos campos, como `required`, `email` e `gte=18,lte=60`.\n- `c.ShouldBindJSON(&user)` verifica se os dados da requisição são válidos.\n- Se houver erro, retornamos um código HTTP 400 com a mensagem de erro.\n\nIsso garante que os dados recebidos estejam no formato esperado antes do processamento.	2025-01-29 20:23:12.043	717a3e3a-ac6e-4c5e-9176-58c6daa37a63	44c57ad7-8550-41a2-a562-0c3919e41929	2025-01-29 20:23:12.043
8039d7e5-87ba-411e-9d98-675dee685987	Manipulação de Respostas	Como retornar diferentes tipos de respostas no Gin	package main\n\nimport (\n"github.com/gin-gonic/gin"\n"net/http"\n)\n\nfunc main() {\nr := gin.Default()\n\nr.GET("/json", func(c *gin.Context) {\nc.JSON(http.StatusOK, gin.H{"message": "Resposta JSON"})\n})\n\nr.GET("/text", func(c *gin.Context) {\nc.String(http.StatusOK, "Resposta em texto")\n})\n\nr.GET("/html", func(c *gin.Context) {\nc.Data(http.StatusOK, "text/html; charset=utf-8", []byte("<h1>Resposta HTML</h1>"))\n})\n\nr.Run(":8080")\n}\n	O Gin permite retornar diferentes formatos de resposta:\n\n- `c.JSON` retorna JSON estruturado.\n- `c.String` retorna texto puro.\n- `c.Data` pode ser usado para HTML, arquivos ou qualquer outro formato.\n\nIsso facilita a criação de APIs flexíveis que atendem diferentes tipos de clientes.	2025-01-29 20:23:12.045	735f51dc-6d01-48e6-9a86-d1fe1ba28e03	44c57ad7-8550-41a2-a562-0c3919e41929	2025-01-29 20:23:12.045
7c2b51b8-6765-40df-9842-2c9482c41852	Persistência de Dados	Como conectar o Gin a um banco de dados PostgreSQL	package main\n\nimport (\n"github.com/gin-gonic/gin"\n"gorm.io/driver/postgres"\n"gorm.io/gorm"\n"net/http"\n)\n\ntype User struct {\nID    uint   `json:"id" gorm:"primaryKey"`\nName  string `json:"name"`\nEmail string `json:"email" gorm:"unique"`\n}\n\nvar db *gorm.DB\n\nfunc initDB() {\ndsn := "host=localhost user=postgres password=1234 dbname=mydb port=5432 sslmode=disable"\nvar err error\ndb, err = gorm.Open(postgres.Open(dsn), &gorm.Config{})\nif err != nil {\npanic("Erro ao conectar ao banco de dados")\n}\ndb.AutoMigrate(&User{})\n}\n\nfunc createUser(c *gin.Context) {\nvar user User\nif err := c.ShouldBindJSON(&user); err != nil {\nc.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})\nreturn\n}\ndb.Create(&user)\nc.JSON(http.StatusOK, gin.H{"message": "Usuário criado com sucesso", "user": user})\n}\n\nfunc main() {\nr := gin.Default()\ninitDB()\n\nr.POST("/users", createUser)\n\nr.Run(":8080")\n}\n	Aqui conectamos o Gin ao banco de dados PostgreSQL usando GORM.\n\n- `gorm.Open(postgres.Open(dsn))` estabelece a conexão.\n- `db.AutoMigrate(&User{})` cria a tabela automaticamente se ela não existir.\n- `db.Create(&user)` insere um novo usuário no banco.\n\nIsso simplifica a integração da API com o banco de dados de forma eficiente.	2025-01-29 20:23:12.047	24e471b8-52f7-4590-b953-6afb426239c2	44c57ad7-8550-41a2-a562-0c3919e41929	2025-01-29 20:23:12.047
7975705c-f310-491f-8673-2fb05ebea45c	Autenticação e Autorização	Como implementar autenticação com JWT no Gin	package main\n\nimport (\n"github.com/dgrijalva/jwt-go"\n"github.com/gin-gonic/gin"\n"net/http"\n"time"\n)\n\nvar secretKey = []byte("chave-secreta")\n\nfunc GenerateToken(c *gin.Context) {\ntoken := jwt.New(jwt.SigningMethodHS256)\nclaims := token.Claims.(jwt.MapClaims)\nclaims["username"] = "usuario123"\nclaims["exp"] = time.Now().Add(time.Hour * 1).Unix()\n\ntokenString, _ := token.SignedString(secretKey)\nc.JSON(http.StatusOK, gin.H{"token": tokenString})\n}\n\nfunc AuthMiddleware() gin.HandlerFunc {\nreturn func(c *gin.Context) {\ntokenString := c.GetHeader("Authorization")\nif tokenString == "" {\nc.JSON(http.StatusUnauthorized, gin.H{"error": "Token não fornecido"})\nc.Abort()\nreturn\n}\n\ntoken, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\nreturn secretKey, nil\n})\nif err != nil || !token.Valid {\nc.JSON(http.StatusUnauthorized, gin.H{"error": "Token inválido"})\nc.Abort()\nreturn\n}\n\nc.Next()\n}\n}\n\nfunc main() {\nr := gin.Default()\n\nr.POST("/login", GenerateToken)\n\nprotected := r.Group("/api")\nprotected.Use(AuthMiddleware())\nprotected.GET("/secure", func(c *gin.Context) {\nc.JSON(http.StatusOK, gin.H{"message": "Acesso autorizado!"})\n})\n\nr.Run(":8080")\n}\n	Implementamos autenticação JWT para proteger rotas sensíveis.\n\n- `GenerateToken` gera um token JWT válido por 1 hora.\n- `AuthMiddleware` verifica a validade do token antes de permitir o acesso.\n- `protected.Use(AuthMiddleware())` protege todas as rotas dentro do grupo `/api`.\n\nIsso garante que apenas usuários autenticados possam acessar determinadas funcionalidades da API.	2025-01-29 20:23:12.048	3286c5d4-7e80-4426-a171-a7fd878f07bf	44c57ad7-8550-41a2-a562-0c3919e41929	2025-01-29 20:23:12.048
4000563f-5f43-44af-855e-9391177682ca	Logs e Monitoramento no Gin	Como registrar logs e monitorar requisições no Gin	package main\n\nimport (\n"github.com/gin-gonic/gin"\n"log"\n"os"\n)\n\nfunc main() {\nfile, _ := os.Create("server.log")\ngin.DefaultWriter = file\n\nr := gin.Default()\n\nr.GET("/", func(c *gin.Context) {\nlog.Println("Requisição recebida!")\nc.JSON(200, gin.H{"message": "Bem-vindo ao servidor"})\n})\n\nr.Run(":8080")\n}	Podemos configurar logs no Gin para capturar atividades do servidor.\n\n- `os.Create("server.log")` cria um arquivo para armazenar logs.\n- `gin.DefaultWriter = file` direciona os logs do Gin para esse arquivo.\n- `log.Println("Requisição recebida!")` registra eventos importantes.\n\nIsso ajuda a monitorar e depurar o funcionamento da API de forma eficiente.	2025-01-29 20:23:12.05	9e46d198-be36-49aa-b81e-3b668c06c353	44c57ad7-8550-41a2-a562-0c3919e41929	2025-01-29 20:23:12.05
3b327f89-9e46-4724-88c2-3ee8b9bd617f	 Init	Função init em Go	Função init\npackage main\n\nimport "fmt"\n\nfunc init() {\nfmt.Println("Função init chamada")\n}\n\nfunc main() {\nfmt.Println("Função main chamada")\n}	A função 'init' é chamada automaticamente antes da função 'main' e é usada para inicializações que precisam ocorrer antes da execução do programa.\nNo exemplo, 'init' é chamada antes de 'main', exibindo a mensagem 'Função init chamada' primeiro.	2025-01-29 20:23:12.121	616d0d68-2195-4d91-a165-a76c033089a8	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.121
501ea355-8855-4bf9-9d06-9efce7873943	Variáveis e Escopo	Declaração de variáveis e regras de escopo.	\nDeclarando variáveis\nlet nome = "Maria";  Variável de escopo de bloco\nconst idade = 30;    Variável de valor constante\nvar cidade = "São Paulo";  Variável com escopo global\n\nfunction saudacao() {\nlet mensagem = "Olá";\nconsole.log(mensagem);\nconsole.log(nome);\nconsole.log(cidade);  'cidade' está disponível por ser var\n}\n\nsaudacao();\n\nretorno: "Olá", "Maria", "São Paulo"\n	\n- let: Variáveis com escopo de bloco.\n- const: Variáveis com valor constante e escopo de bloco.\n- var: Variáveis com escopo de função ou global (dependendo de onde são declaradas).\n- Funções possuem seu próprio escopo local.\n	2025-01-29 20:23:12.292	8118e5af-91a8-4e6a-9a02-1f9831254126	1c889291-fc8c-48c8-8de2-d343294427e5	2025-02-05 15:15:22.808
9b26cf48-7ff6-451f-9b31-ddef91cedc62	Filtros com WHERE	Filtrando resultados com a cláusula WHERE	\n-- Filtro com igualdade\nSELECT * FROM usuarios\nWHERE idade = 25;\n-- retorno: usuários com 25 anos\n\n-- Filtro com maior/menor\nSELECT * FROM produtos\nWHERE preco >= 100;\n-- retorno: produtos com preço maior ou igual a 100\n\n-- Multiplas condições (AND)\nSELECT * FROM usuarios\nWHERE idade >= 18\nAND cidade = 'São Paulo';\n-- retorno: usuários maiores de idade de São Paulo\n\n-- Multiplas condições (OR)\nSELECT * FROM produtos\nWHERE categoria = 'Elet rônicos'\nOR preco > 1000;\n-- retorno: produtos elet rônicos ou caros\n\n-- Filtro com LIKE\nSELECT * FROM usuarios\nWHERE nome LIKE 'Jo%';\n-- retorno: usuários com nome começando com "Jo"\n\n-- Filtro com IN\nSELECT * FROM produtos\nWHERE categoria IN ('Elet rônicos', 'Informática');\n-- retorno: produtos das categorias listadas	\nWHERE:\n- Filtra registros por condições\n- Operadores: =, >, <, >=, <=, <>\n- Condições: AND, OR, NOT\n- LIKE para padrões de texto\n- IN para listas de valores\n- BETWEEN para intervalos	2025-01-29 20:23:12.63	44cce5c1-62d9-494b-8b56-4e8768be553a	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-02-11 16:58:00.99
4e75ce0a-6245-495c-ac96-2184cbd7a3ce	Módulos e require/import	Como criar e utilizar módulos em Node.js	\nImportando módulos built-in\nconst fs = require('fs');\nconst path = require('path');\n\nModulo ES6 (com package.json type: "module")\nimport fs from 'fs';\nimport path from 'path';\n\nCriando um módulo\narquivo: matematica.js\nconst somar = (a, b) => a + b;\nconst multiplicar = (a, b) => a * b;\n\nmodule.exports = {\nsomar,\nmultiplicar\n};\n\nImportando módulo local\nconst matematica = require('./matematica');\nconsole.log(matematica.somar(2, 3));\n\nretorno: 5\n\nImportando apenas funções específicas\nconst { somar, multiplicar } = require('./matematica');\nconsole.log(multiplicar(4, 2));\n\nretorno: 8	\n- CommonJS (require/module.exports): Sistema padrão do Node.js\n- ES Modules (import/export): Sistema moderno (necessita configuração)\n- Os módulos permitem organizar código em arquivos separados\n- Cada módulo tem seu próprio escopo\n- module.exports define o que será exposto\n- require() carrega módulos síncronamente	2025-01-29 20:23:12.452	e800445e-326e-41ba-95c8-4286a03823e3	6ae0814b-a033-483b-91f2-dc1996076c37	2025-02-11 16:58:33.09
89722a77-6df4-4038-8cc0-02f964be15fd	 Formas	Trabalhando com formas geométricas em Go	Estruturas para formas geométricas\ntype Retangulo struct {\nlargura, altura int\n}\n\nfunc (r Retangulo) area() int {\nreturn r.largura * r.altura\n}\n\nfunc main() {\nr := Retangulo{largura: 10, altura: 5}\nfmt.Println("Área do retângulo:", r.area())\n}	Neste exemplo, uma struct 'Retangulo' é definida para representar uma forma geométrica.\nA função 'area' é um método associado ao tipo 'Retangulo', e calcula a área do retângulo com base nas suas propriedades 'largura' e 'altura'.	2025-01-29 20:23:12.126	e9125c33-1109-4386-b301-f40118069650	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.126
197b2831-f8a8-48fb-bcd3-636084414961	Introdução ao NestJS	Framework Node.js para construção de aplicações back-end eficientes e escaláveis	Instalação do NestJS CLI\nnpm install -g @nestjs/cli\n\nCriação de novo projeto\nnest new projeto-exemplo\n\nEstrutura básica de uma aplicação\nimport { Module } from '@nestjs/common';\n\n@Module({\nimports: [],\ncontrollers: [],\nproviders: [],\n})\nexport class AppModule {}	O NestJS é um framework progressivo para construção de aplicações server-side com Node.js. Ele utiliza TypeScript como linguagem principal e se inspira em padrões de arquitetura como Angular.\n\nPrincipais características:\n- Arquitetura modular baseada em decorators\n- Suporte nativo a Injeção de Dependências\n- Baseado em módulos reutilizáveis\n- Alto desempenho e escalabilidade\n- Fortemente tipado com TypeScript\n\nNo exemplo de código, mostramos:\n1. Instalação do NestJS CLI\n2. Criação de um novo projeto\n3. Definição de um módulo básico usando decorators\n	2025-01-29 20:23:12.406	b13da36c-4f49-411d-ba10-bba1c2d315d1	29682086-bbe4-46d1-8f91-35eb6c7c8b96	2025-02-04 21:09:22.432
7ad3bd4d-0783-4113-b584-28b3fbc0cea5	Variáveis e Escopo	Declaração e escopo de variáveis em TypeScript	Declaração de variáveis\nlet contador: number = 1;\n\nretorno: 1\n\nconst PI: number = 3.14159;\n\nretorno: 3.14159\n\nvar antiga: string = "evitar usar var";\n\nretorno: "evitar usar var"\n\nInferência de tipos\nlet nome = "João";              TypeScript infere como string\n\nretorno: "João"\n\nlet idade = 25;                 TypeScript infere como number\n\nretorno: 25\n\nlet ativo = true;               TypeScript infere como boolean\n\nretorno: true\n\nlet nums = [1, 2, 3];          TypeScript infere como number[]\n\nretorno: [1, 2, 3]\n\nEscopo de bloco\n{\nlet escopo = "local";       Só existe neste bloco\n\nretorno: "local"\nconst PI = 3.14;           Diferente do PI externo\n\nretorno: 3.14\n}\nconsole.log(escopo);        Erro: escopo não existe aqui\n\nHoisting com var (evitar)\nconsole.log(x);                undefined (hoisting)\nvar x = 10;\n\nretorno: undefined, depois 10\n\nconsole.log(y);             Erro com let\nlet y = 20;\n\nDestructuring de objetos\nconst pessoa = {\nnome: "Maria",\nidade: 30,\ncidade: "SP"\n};\n\nconst { nome: nomeComplet o, idade: anos } = pessoa;\nretorno para nomeComplet o: "Maria"\nretorno para anos: 30\n\nconst { cidade, ...resto } = pessoa;\nretorno para cidade: "SP"\nretorno para resto: { nome: "Maria", idade: 30 }\n\nDestructuring de arrays\nconst numeros = [1, 2, 3, 4, 5];\n\nconst [primeiro, segundo, ...restantes] = numeros;\nretorno para primeiro: 1\nretorno para segundo: 2\nretorno para restantes: [3, 4, 5]\n\nconst [, , terceiro] = numeros;\n\nretorno: 3\n\nSpread operator\nconst array1 = [1, 2, 3];\nconst array2 = [...array1, 4, 5];\n\nretorno: [1, 2, 3, 4, 5]\n\nconst obj1 = { a: 1, b: 2 };\nconst obj2 = { ...obj1, c: 3 };\n\nretorno: { a: 1, b: 2, c: 3 }\n\nReatribuição e mutação\nlet mutavel = { valor: 1 };\nmutavel.valor = 2;             OK - mudando propriedade\n\nretorno: { valor: 2 }\n\nconst imutavel = { valor: 1 };\nimutavel.valor = 2;            OK - mudando propriedade\n\nretorno: { valor: 2 }\nimutavel = { valor: 3 };    Erro - não pode reatribuir const\n\nTemplate literals\nconst usuario = "Ana";\nconst msg = `Bem-vinda ${usuario}!`;\n\nretorno: "Bem-vinda Ana!"\n\nconst multi = `\nLinha 1\nLinha 2\n`;\n\nretorno: "\nLinha 1\nLinha 2\n"	Declaração de variáveis\n\nlet - Declara variável que pode ser reatribuída, com escopo de bloco\n\nconst - Declara constante que não pode ser reatribuída, com escopo de bloco\n\nvar - Forma antiga de declarar variáveis, com hoisting e escopo de função (evitar)\n\n\nInferência de tipos\n\nTypeScript pode inferir automaticamente o tipo baseado no valor inicial\n\nNão é necessário declarar o tipo explicitamente quando é óbvio\n\nA inferência funciona com tipos primitivos e compostos\n\n\nEscopo de bloco\n\nlet e const têm escopo de bloco - só existem dentro do bloco onde foram declaradas\n\nBlocos podem ter variáveis com mesmo nome de variáveis externas (shadowing)\n\nvar não respeita escopo de bloco (mais um motivo para evitar)\n\n\nHoisting com var\n\nvar sofre hoisting - declaração é movida para o topo, mas não a inicialização\n\nlet e const não sofrem hoisting - não podem ser usadas antes da declaração\n\nHoisting pode causar bugs difíceis de encontrar\n\n\nDestructuring de objetos\n\nExtrai propriedades de objetos em variáveis individuais\n\nPermite renomear variáveis usando : novo_nome\n\nRest operator (...) coleta propriedades restantes em novo objeto\n\n\nDestructuring de arrays\n\nExtrai elementos de arrays em variáveis individuais\n\nPode pular elementos usando vírgulas\n\nRest operator (...) coleta elementos restantes em novo array\n\n\nSpread operator\n\nEm arrays - Copia elementos de um array para outro\n\nEm objetos - Copia propriedades de um objeto para outro\n\nCria cópias superficiais (shallow copy)\n\n\nReatribuição e mutação\n\nlet permite reatribuição (mudar a referência)\n\nconst impede reatribuição mas não impede mutação de objetos/arrays\n\nPara imutabilidade total, use Object.freeze()\n\n\nTemplate literals\n\nPermitem interpolação de expressões usando ${}\n\nSuportam strings multilinhas preservando formatação\n\nPodem incluir expressões complexas dentro de ${}	2025-01-29 20:23:12.793	58c81dec-bdb1-4c36-a2a3-150b259d3e68	5d9f153f-110c-44de-a4c7-c7020debf158	2025-02-04 21:34:28.241
3101854e-4f52-4f30-a8ad-41054262e85d	Variáveis e Constantes	Como declarar e utilizar variáveis e constantes em Go	Declarando variáveis de forma explícita e utilizando inferência\nvar idade int = 30\nvar nome string = "João"\n\nUsando a inferência de tipo\ncidade := "São Paulo"\naltura := 1.75\n\nDeclarando const antes com 'const'\nconst Pi = 3.14159\nconst nomeDaEmpresa = "GoCorp"	Em Go, as variáveis podem ser declaradas de forma explícita utilizando a palavra-chave 'var' com um tipo definido,\nou através da inferência de tipo usando ':=' para atribuição implícita de tipo.\nJá as constantes, que não podem ser alteradas após sua inicialização, são declaradas com a palavra-chave 'const'. O exemplo mostra a declaração de constantes e variáveis de maneira clara e eficiente.	2025-01-29 20:23:12.078	e2b91939-f97e-4427-ab90-4e9d6ab74ac3	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-02-12 21:13:55.132
ba93a311-5f11-498f-a51f-6a0cce52bf66	Tipos de dados	Entenda os diferentes tipos de dados disponíveis em Go	Tipos primitivos e compostos em Go\nvar inteiro int = 10\nvar flutuante float64 = 3.14159\nvar texto string = "Olá, Go!"\nvar booleano bool = true\n\nTipos compostos: Arrays e Slices\nvar arrayDeInteiros [3]int = [3]int{1, 2, 3}\nvar sliceDeInteiros []int = []int{1, 2, 3, 4, 5}	Go oferece uma variedade de tipos de dados para armazenar informações.\nOs tipos primitivos como 'int', 'float64', 'string', e 'bool' são fundamentais para representar números, textos e valores booleanos.\nAlém disso, Go permite o uso de tipos compostos como arrays (com tamanho fixo) e slices (com tamanho dinâmico), que são amplamente usados na manipulação de coleções de dados.	2025-01-29 20:23:12.08	4c17ccef-46aa-40a7-bb2c-eef9c8772232	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.08
f1a9e915-4a60-4951-ae8c-d1356d02f189	Tipos em Go	Os tipos básicos e estruturados em GoLang	Declaração de variáveis em Go com tipo explícito\nvar texto string = "Olá, Mundo"\nvar numero int = 42\nvar decimal float64 = 3.14159\nvar booleano bool = true\n\nUso de inferencia de tipo com 'var' e ':='\ntextoInferido := "Olá, Go!"\nnumeroInferido := 100\ndecimalInferido := 2.71828\nbooleanoInferido := false	Go usa tipagem estática para garantir a consistência de tipos em tempo de compilação.\nVocê pode declarar variáveis explicitamente ou confiar na inferência de tipo. No exemplo acima, 'var' permite que você declare uma variável com tipo explícito,\ne a inferência de tipo usa a sintaxe ':=' para atribuições sem especificação explícita de tipo.\nIsso ajuda a evitar erros relacionados a tipos enquanto mantém a legibilidade do código.	2025-01-29 20:23:12.076	92fddc03-289e-4b0e-ba29-44e7bfdc4b22	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-02-05 15:17:50.926
b51970b1-1281-4b23-b744-f0b6c1d08fda	Funções em Go	Definindo funções e retornando valores	Função simples que recebe um parâmetro e retorna um valor\nfunc saudacao(nome string) string {\nreturn "Olá, " + nome + "!"\n}\n\nFunção com múltiplos parâmetros\nfunc somar(a int, b int) int {\nreturn a + b\n}\n\nFunção sem retorno (usando 'void' equivalente)\nfunc imprimirMensagem(mensagem string) {\nfmt.Println(mensagem)\n}	As funções em Go são definidas com a palavra-chave 'func' e podem ter parâmetros e retornos de diferentes tipos.\nNo exemplo, a função 'saudacao' recebe um parâmetro do tipo string e retorna um valor do tipo string.\nGo também permite funções com múltiplos parâmetros e funções sem retorno, como a 'imprimirMensagem' que apenas imprime uma mensagem na saída padrão.	2025-01-29 20:23:12.082	00d6d39c-d43e-44d2-92a5-63361d30f1fc	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.082
dae8e957-f243-40d3-974d-71f794a9b048	 Tipo Genérico	Usando tipos genéricos em Go	Usando tipos genéricos\npackage main\n\nimport "fmt"\n\nfunc imprimir[T any](valor T) {\nfmt.Println(valor)\n}\n\nfunc main() {\nimprimir(42)\nimprimir("Texto genérico")\n}	Go 1.18 introduziu suporte para tipos genéricos, permitindo que funções e tipos aceitem argumentos de diferentes tipos.\nNo exemplo, a função 'imprimir' usa um tipo genérico 'T', que pode ser qualquer tipo, e imprime seu valor.\nA palavra-chave 'any' é usada para indicar que qualquer tipo pode ser passado.	2025-01-29 20:23:12.128	501bc229-deb4-48bb-8710-b16348dd3f5d	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.128
f048408d-72d4-4a38-bb75-55132b9fc5c0	Go routines	Execução concorrente em Go	Goroutines básicas\nfunc imprimir(texto string) {\nfmt.Println(texto)\n}\n\nfunc main() {\ngo imprimir("Olá")\ngo imprimir("Mundo")\ntime.Sleep(time.Second)\n}	Goroutines são funções que executam concorrentemente. Use 'go' para iniciar uma goroutine.	2025-01-29 20:23:12.135	a8a424e4-9f7d-4663-8df6-409f3c624db5	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.135
3549f770-1081-4c7b-9b8d-88a1330cb6f8	Operadores	Operadores aritméticos, relacionais e lógicos em Go	Operadores aritméticos\nvar soma = 10 + 5         15\nvar subtracao = 10 - 5    5\nvar multiplicacao = 10 * 5    50\nvar divisao = 10 / 5      2\n\nOperadores relacionais\nvar maiorQue = 10 > 5     true\nvar igual = 10 == 10      true\nvar diferente = 10 != 5   true\n\nOperadores lógicos\nvar eVerdade = true && false   false\nvar ouVerdade = true || false  true\nvar naoVerdade = !true        false	Go possui operadores aritméticos, relacionais e lógicos que permitem manipulação de dados e controle de fluxo.\nOs operadores aritméticos são usados para realizar operações matemáticas simples.\nOs operadores relacionais comparam valores, e os operadores lógicos servem para combinar condições booleanas no controle de fluxo de execução.	2025-01-29 20:23:12.084	d4eb34bf-0911-4326-8880-811fa3de9215	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.084
6ad8778d-a179-40d5-9133-f03380dc029b	Structs em Go	Como usar structs para agrupar dados em Go	Definindo uma struct\ntype Pessoa struct {\nNome   string\nIdade  int\nEndereco string\n}\n\nInicializando e acessando valores em structs\npessoa := Pessoa{"João", 25, "Rua 123"}\nfmt.Println("Nome:", pessoa.Nome)\nfmt.Println("Idade:", pessoa.Idade)\nfmt.Println("Endereço:", pessoa.Endereco)\nreturn: Nome: João\nreturn: Idade: 25\nreturn: Endereço: Rua 123	Structs em Go são tipos compostos que permitem agrupar dados de diferentes tipos sob uma única estrutura.\nNo exemplo, a struct 'Pessoa' possui campos de tipo 'string' para o nome e endereço, e um campo de tipo 'int' para a idade.\nVocê pode inicializar uma struct com valores diretamente e acessar seus campos usando a notação de ponto ('.').	2025-01-29 20:23:12.085	4a0b3f88-c0c8-44c0-a63f-9ac2b303be05	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.085
5e0bda5b-2ee6-4a4e-adea-51e339f3bb23	Arrays e Slices	Arrays e slices em Go	Arrays em Go com tamanho fixo\nvar arr [3]int = [3]int{1, 2, 3}\n\nSlices em Go com tamanho dinâmico\nvar slice []int = []int{1, 2, 3, 4, 5}\n\nModificando valores em arrays e slices\narr[0] = 10\nslice = append(slice, 6)\nreturn: [10, 2, 3]\nreturn: [1, 2, 3, 4, 5, 6]	Arrays têm tamanho fixo enquanto slices são dinâmicos.\nO exemplo demonstra a declaração e manipulação de ambos os tipos em Go.\nArrays mantêm um tamanho fixo enquanto slices podem crescer dinamicamente.	2025-01-29 20:23:12.087	1c917ce4-50e3-40f3-8773-93b946cebb47	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-02-11 15:16:49.863
0158b389-d0d9-4e17-a572-6d4df7106bd2	Ponteiros	Trabalhando com ponteiros em Go	Ponteiros em Go\nvar numero int = 10\nvar ponteiro *int = &numero   Obtendo endereço\n\nfmt.Println("Valor:", numero)\nfmt.Println("Endereço:", ponteiro)\nfmt.Println("Valor via ponteiro:", *ponteiro)\nreturn: Valor: 10\nreturn: Endereço: 0x...\nreturn: Valor via ponteiro: 10	Ponteiros armazenam endereços de memória de outras variáveis.\nO operador & obtém o endereço de uma variável.\nO operador * acessa o valor armazenado no endereço.	2025-01-29 20:23:12.089	78ea8104-bd70-4d0a-98db-26bd32f3f39e	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.089
0eb6815b-abea-429a-a075-b31375f85d4f	Waitgroup	Esperando a conclusão de múltiplas Go routines	Usando WaitGroup\nvar wg sync.WaitGroup\nwg.Add(1)\n\ngo func() {\ndefer wg.Done()\nfmt.Println("Go routine executada")\n}()\n\nwg.Wait()	O WaitGroup é usado para esperar até que um conjunto de Go routines termine sua execução.	2025-01-29 20:23:12.136	1d3e1a06-5fcc-4518-9969-9bd3ecd55b3e	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.136
4d383e95-df03-47cc-a5c5-3578cc5e2edf	Maps	Maps (ou dicionários) em Go	Maps em Go para armazenar pares chave-valor\nvar numeros map[string]int = map[string]int{"um": 1, "dois": 2}\n\nCriando um map com a notação curta\npessoas := map[string]string{\n"João": "Analista",\n"Maria": "Desenvolvedora",\n}\n\nAdicionando um item a um map\npessoas["Pedro"] = "Designer"\n\nVerificando se uma chave existe\ncargo, existe := pessoas["João"]\nfmt.Println("Cargo de João:", cargo, "Existe?", existe)\nreturn: Cargo de João: Analista Existe? true	Maps em Go são coleções de pares chave-valor, onde cada chave é única.\nNo exemplo, o mapa 'numeros' associa strings a inteiros, enquanto o mapa 'pessoas' associa nomes a cargos.\nVocê pode verificar se uma chave existe no mapa ao utilizar a segunda variável, como mostrado no exemplo de 'cargo' e 'existe'.	2025-01-29 20:23:12.091	c4c4bc5a-378c-4951-ab7d-ccfb88ea0f68	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.091
33c84645-3f1e-4e37-96dd-aa28f54be581	Canais	Comunicação entre Go routines com canais	Exemplo de canal\nch := make(chan string)\n\ngo func() {\nch <- "Mensagem da Go routine"\n}()\n\nmsg := <-ch\nfmt.Println(msg)	Canais permitem a comunicação segura entre Go routines, permitindo passar dados de uma Go routine para outra.	2025-01-29 20:23:12.137	e9550a71-7130-4965-a749-77ed489e996d	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.137
bef79048-0943-4c0b-9bcf-96df089c8d8c	 Estruturas de controle	Estruturas de controle como if, switch, for em Go	Exemplo de if-else\nif idade >= 18 {\nfmt.Println("Adulto")\n} else {\nfmt.Println("Menor de idade")\n}\nreturn: Adulto ou Menor de idade	Estruturas de controle são mecanismos fundamentais em Go para controlar o fluxo de execução\ndo programa, permitindo tomada de decisões e repetições.\n\nElementos principais:\n- if/else: Executa código com base em condições\n- switch: Seleciona código baseado em múltiplas condições\n- for: Único loop em Go, versátil para diferentes tipos de iteração\n- break/continue: Controla o fluxo dentro de loops\n- defer: Adia execução até o fim da função atual	2025-01-29 20:23:12.093	c222c3e7-63f2-4901-a0dd-ae6f330326b4	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.093
956b0b81-cec5-4cec-9cd8-65dee20c69ef	 Métodos	Definindo métodos em Go	Definindo um método\ntype Pessoa struct {\nNome string\n}\n\nfunc (p Pessoa) saudacao() string {\nreturn "Olá, " + p.Nome\n}	Métodos em Go são funções associadas a um tipo específico.\nNo exemplo, criamos um método 'saudacao' para o tipo 'Pessoa'.\nO receptor (p Pessoa) indica que este método pertence ao tipo Pessoa.	2025-01-29 20:23:12.094	efc5f103-162b-4d5e-9be3-f9164c9f2a4e	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.094
b4544529-f614-47a9-ba48-b9ce49a43377	Interfaces	Definindo interfaces em Go	Definindo uma interface\ntype Saudavel interface {\nsaudacao() string\n}\n\ntype Pessoa struct {\nNome string\n}\n\nfunc (p Pessoa) saudacao() string {\nreturn "Olá, " + p.Nome\n}\n\nfunc exibirSaudacao(s Saudavel) {\nfmt.Println(s.saudacao())\n}\n\nfunc main() {\np := Pessoa{Nome: "João"}\nexibirSaudacao(p)\n}	Interfaces em Go definem um conjunto de métodos que um tipo deve implementar.\nNo exemplo, a interface 'Saudavel' exige que qualquer tipo que a implemente tenha o método 'saudacao'.\nA função 'exibirSaudacao' recebe um parâmetro do tipo 'Saudavel' e pode ser usada para chamar o método 'saudacao' de qualquer tipo que implemente essa interface.\nNo caso, 'Pessoa' implementa a interface implicitamente, pois define o método 'saudacao'.	2025-01-29 20:23:12.097	21260613-2c0f-461e-acad-e6e351452539	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.097
63bdaaf2-1f19-438c-bef1-dbed7ea22fdd	Funções com retorno nomeado	Explorando funções avançadas em Go	Funções com retorno nomeado\nfunc soma(a, b int) (resultado int) {\nresultado = a + b\nreturn\n}\n\nfunc main() {\nfmt.Println(soma(3, 4))\n}	Funções com retorno nomeado permitem que o valor a ser retornado seja nomeado dentro da assinatura da função.\nNo exemplo, a função 'soma' retorna o valor nomeado 'resultado', que é atribuído e retornado implicitamente.	2025-01-29 20:23:12.111	606baf70-7188-45d6-addd-9adb6a377e54	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.111
18647431-6062-44c0-a4ed-236c50f77f47	 Funções Variáticas	Usando funções variáticas em Go	Função variática\nfunc somarNumeros(numeros ...int) int {\ntotal := 0\nfor _, numero := range numeros {\ntotal += numero\n}\nreturn total\n}\n\nfunc main() {\nfmt.Println(somarNumeros(1, 2, 3, 4, 5))\n}	Funções variáticas permitem passar um número variável de argumentos para uma função.\nNo exemplo, a função 'somarNumeros' pode receber qualquer quantidade de inteiros e somá-los.	2025-01-29 20:23:12.113	d69c8f3c-136a-4127-89a9-d1780922ed98	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-02-05 15:19:36.716
557e7652-efe6-4527-9205-bc7cf3819c52	 Funções Anônimas	Trabalhando com funções anônimas em Go	Função anônima\nfunc main() {\nsaudacao := func(nome string) {\nfmt.Println("Olá,", nome)\n}\nsaudacao("João")\n}	Funções anônimas não possuem nome e podem ser atribuídas a variáveis, como no exemplo.\nA função 'saudacao' é anônima e é atribuída à variável 'saudacao' para ser chamada mais tarde.	2025-01-29 20:23:12.115	6addd68d-b4ca-4991-8b30-24f2d3c384bf	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.115
68bd85d3-7f33-4d7c-83ac-a5d284faa97f	 Funções Recursivas	Entendendo funções recursivas em Go	Função recursiva para calcular fatorial\nfunc fatorial(n int) int {\nif n == 0 {\nreturn 1\n}\nreturn n * fatorial(n-1)\n}\n\nfunc main() {\nfmt.Println(fatorial(5))\n}	Funções recursivas são aquelas que se chamam dentro delas mesmas.\nNo exemplo, a função 'fatorial' chama a si mesma até que a condição base (n == 0) seja alcançada.	2025-01-29 20:23:12.116	8b845cde-88ac-4b75-b622-7bcbafd40c54	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.116
0f3661da-4b54-47f9-a2e3-77c6daeb0e28	 Defer	Usando defer para adiar a execução de funções	Usando defer\nfunc exemploDefer() {\ndefer fmt.Println("Isso será impresso ao final")\nfmt.Println("Isso será impresso primeiro")\n}\n\nfunc main() {\nexemploDefer()\n}	A palavra-chave 'defer' é usada para adiar a execução de uma função até que a função corrente retorne.\nNo exemplo, a mensagem 'Isso será impresso ao final' é impressa após a execução da função, apesar de ter sido chamada primeiro.	2025-01-29 20:23:12.117	b8e3e068-f509-455a-9fa8-1117eb2eb06b	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.117
74216d7d-fc60-41c7-9017-e6a6d3616afb	Select em Go	Controlando múltiplos canais com select	Exemplo de select com timeout e canal default\nfunc main() {\ncanal1 := make(chan string)\ncanal2 := make(chan string)\ndone := make(chan bool)\n\nGoroutine que envia dados após 2 segundos\ngo func() {\ntime.Sleep(2 * time.Second)\ncanal1 <- "Mensagem do canal 1"\n}()\n\nGoroutine que envia dados após 1 segundo\ngo func() {\ntime.Sleep(1 * time.Second)\ncanal2 <- "Mensagem do canal 2"\n}()\n\nSelect com timeout\nfor i := 0; i < 2; i++ {\nselect {\ncase msg1 := <-canal1:\nfmt.Println(msg1)\n\nretorno: "Mensagem do canal 1"\n\ncase msg2 := <-canal2:\nfmt.Println(msg2)\n\nretorno: "Mensagem do canal 2"\n\ncase <-time.After(3 * time.Second):\nfmt.Println("Timeout!")\nreturn\n\ndefault:\nfmt.Println("Nenhuma mensagem disponível")\ntime.Sleep(500 * time.Millisecond)\n}\n}\n}	Select permite trabalhar com múltiplos canais:\n\n- Espera por múltiplos canais simultaneamente\n- Escolhe o primeiro canal que estiver pronto/com dados\n- case default: executa quando nenhum canal está pronto\n- time.After(): adiciona timeout para evitar espera infinita\n\nCasos de uso comuns:\n1. Timeout em operações\n2. Processamento de múltiplas fontes de dados\n3. Cancelamento de operações\n4. Controle de concorrência	2025-01-29 20:23:12.139	aa53d87f-070c-48a7-a5e5-9103362ec1e0	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.139
4b241ae9-21fd-42e9-a28a-7b59cf91078c	Generator	Padrão de concorrência generator para gerar sequência de valores	Exemplo de Generator\nfunc generator() <-chan int {\nch := make(chan int)\ngo func() {\nfor i := 0; ; i++ {\nch <- i\n}\n}()\nreturn ch\n}\n\nfunc main() {\nch := generator()\nfmt.Println(<-ch)\nfmt.Println(<-ch)\n}	Generators são padrões de concorrência em Go que criam sequências de valores sob demanda,\npermitindo processamento eficiente de grandes conjuntos de dados.\n\nElementos principais:\n- Canal de saída: Envia valores gerados\n- Goroutine: Executa geração em background\n- Lazy evaluation: Gera valores conforme necessário\n- Closure: Mantém estado entre gerações\n- Controle de finalização: Fecha canal quando apropriado.	2025-01-29 20:23:12.145	cc534a65-71d4-4fef-8104-abd9291b532e	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.145
4eae0394-6e25-4c7e-a44c-9c7a73fda23f	Multiplexador	Padrão de concorrência multiplexador para gerenciamento de múltiplas fontes	Exemplo de multiplexador\nfunc multiplexador(ch1, ch2 <-chan string) <-chan string {\nch := make(chan string)\ngo func() {\nfor {\nselect {\ncase msg1 := <-ch1:\nch <- msg1\ncase msg2 := <-ch2:\nch <- msg2\n}\n}\n}()\nreturn ch\n}\n\nfunc main() {\nch1 := make(chan string)\nch2 := make(chan string)\n\ngo func() {\nch1 <- "Mensagem de ch1"\n}()\ngo func() {\nch2 <- "Mensagem de ch2"\n}()\n\nch := multiplexador(ch1, ch2)\nfmt.Println(<-ch)\n}	Multiplexador é um padrão de concorrência que combina múltiplos canais em um único fluxo\nde dados, facilitando o gerenciamento de várias fontes de dados concorrentes.\n\nElementos principais:\n- Select: Gerencia múltiplos canais\n- Canal de saída: Unifica dados dos canais fonte\n- Goroutine dedicada: Executa multiplexação\n- Controle de fechamento: Gerencia término dos canais\n- Priorização: Pode definir ordem de processamento	2025-01-29 20:23:12.146	0e946266-26da-45d9-a410-9656334e6658	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.146
3baba1b9-a4b9-4e2b-a130-7971ecc9efb5	Funções do Pacote fmt	Principais funções do pacote fmt em Go para entrada e saída formatada	Print - Imprime diretamente no console\nfmt.Print("Olá", "Mundo", 123)\n\nretorno: OláMundo123\n\nPrintln - Imprime com quebra de linha\nfmt.Println("Olá", "Mundo", 123)\n\nretorno: Olá Mundo 123\n(adiciona espaços entre argumentos e quebra de linha no final)\n\nPrintf - Imprime texto formatado\nnome := "João"\nidade := 25\nfmt.Printf("Nome: %s, Idade: %d\n", nome, idade)\n\nretorno: Nome: João, Idade: 25\n\nSprintf - Retorna string formatada\ntexto := fmt.Sprintf("Nome: %s, Idade: %d", nome, idade)\nfmt.Println(texto)\n\nretorno: Nome: João, Idade: 25\n\nFprintf - Escreve texto formatado em um io.Writer\narquivo, err := os.Create("saida.txt")\nif err != nil {\nreturn err\n}\ndefer arquivo.Close()\n\nfmt.Fprintf(arquivo, "Nome: %s\n", nome)\n\nretorno: Escreve "Nome: João" no arquivo saida.txt\n\nFprint - Escreve diretamente em um io.Writer\nfmt.Fprint(arquivo, "Olá Mundo")\n\nretorno: Escreve "Olá Mundo" no arquivo sem formatação\n\nErrorf - Cria um erro formatado\nerr = fmt.Errorf("erro: usuário %s não encontrado", nome)\nfmt.Println(err)\n\nretorno: erro: usuário João não encontrado\n\nScan - Lê entrada do usuário\nvar nome string\nvar idade int\nfmt.Print("Digite nome e idade: ")\nfmt.Scan(&nome, &idade)\nEspera entrada do usuário: João 25\nfmt.Printf("Nome: %s, Idade: %d\n", nome, idade)\n\nretorno: Nome: João, Idade: 25\n\nScanf - Lê entrada formatada\nvar dia, mes, ano int\nfmt.Print("Digite a data (DD/MM/AAAA): ")\nfmt.Scanf("%d/%d/%d", &dia, &mes, &ano)\nEspera entrada do usuário: 15/03/2024\nfmt.Printf("Data: %02d/%02d/%d\n", dia, mes, ano)\n\nretorno: Data: 15/03/2024\n\nExemplos práticos combinando funções\n\nExemplo 1: Log formatado\nlogMsg := fmt.Sprintf("[%s] Usuário %s logado",\ntime.Now().Format("2006-01-02"), nome)\nfmt.Println(logMsg)\n\nretorno: [2024-01-14] Usuário João logado\n\nExemplo 2: Relatório em arquivo\nheader := fmt.Sprintf("Relatório - %s\n",\ntime.Now().Format("Jan 2006"))\nfmt.Fprintf(arquivo, header)\nfmt.Fprintf(arquivo, "Usuário: %s\n", nome)\nfmt.Fprintf(arquivo, "Idade: %d\n", idade)\n\nretorno: Escreve relatório formatado no arquivo\n\nExemplo 3: Tratamento de erro com formato\nif idade < 18 {\nerr := fmt.Errorf("usuário %s não tem idade mínima (%d < 18)",\nnome, idade)\nfmt.Println(err)\nreturn err\n}\n\nretorno: usuário João não tem idade mínima (15 < 18)	 Funções de Saída Básica\n\nfmt.Print\n- Imprime argumentos diretamente\n- Não adiciona espaços ou quebras de linha\n- Útil para saída simples e contínua\n\nfmt.Println\n- Imprime argumentos com espaços entre eles\n- Adiciona quebra de linha no final\n- Melhor para leitura e debug\n\nfmt.Printf\n- Imprime texto formatado usando verbos (%s, %d, etc)\n- Permite controle preciso do formato de saída\n- Essencial para saídas personalizadas\n\n\nFunções de Formatação\n\nfmt.Sprintf\n- Similar ao Printf, mas retorna string\n- Não imprime, apenas formata\n- Útil para criar mensagens formatadas\n\nfmt.Errorf\n- Cria erro com mensagem formatada\n- Usa mesma sintaxe do Printf\n- Ideal para mensagens de erro descritivas\n\n\nFunções de Arquivo\n\nfmt.Fprintf\n- Escreve texto formatado em io.Writer\n- Pode escrever em arquivos, conexões, etc\n- Combina formatação com escrita em arquivo\n\nfmt.Fprint\n- Escreve texto direto em io.Writer\n- Sem formatação especial\n- Versão básica do Fprintf\n\n\nFunções de Entrada\n\nfmt.Scan\n- Lê entrada do usuário\n- Separa por espaços automaticamente\n- Converte para tipos especificados\n\nfmt.Scanf\n- Lê entrada formatada do usuário\n- Usa padrão especificado\n- Mais controle sobre formato de entrada\n\n\nDicas de Uso\n\nPrint/Println\n- Use para debug e saídas simples\n- Println é mais comum por ser mais legível\n\nPrintf/Sprintf\n- Use para mensagens formatadas\n- Sprintf quando precisar da string\n\nFprintf/Fprint\n- Use para escrever em arquivos\n- Fprintf para conteúdo formatado\n\nErrorf\n- Use para criar erros descritivos\n- Melhor que strings de erro simples\n\nScan/Scanf\n- Use para entrada do usuário\n- Scanf quando formato é importante	2025-01-29 20:23:12.15	464dd251-8e83-4477-bebb-f356c5801cc1	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.15
07fe6972-15e6-4808-907a-1d2ea6703466	Pacote strings em Go	Manipulação e processamento de strings com o pacote strings	Importando o pacote\nimport (\n"fmt"\n"strings"\n)\n\nOperações com strings\nfunc main() {\ntexto := "Go é uma linguagem de programação incrível!"\npalavras := "maçã,banana,laranja,uva"\n\nTransformações básicas\nmaiusculas := strings.ToUpper(texto)\nminusculas := strings.ToLower(texto)\ntitulo := strings.Title("bem vindo ao go")\n\nBusca e substituição\ncontemGo := strings.Contains(texto, "Go")\ncomecaCom := strings.HasPrefix(texto, "Go")\nterminaCom := strings.HasSuffix(texto, "!")\nposicao := strings.Index(texto, "linguagem")\nultimaPosicao := strings.LastIndex(texto, "a")\n\nSubstituições\nsubstituido := strings.Replace(texto, "incrível", "fantástica", 1)\ntodosSubstituidos := strings.ReplaceAll(texto, "a", "@")\n\nDivisão e união\npartes := strings.Split(palavras, ",")\nunido := strings.Join(partes, " - ")\n\nRemoção de espaços\ntextoComEspacos := "   texto com espaços   "\nsemEspacos := strings.TrimSpace(textoComEspacos)\n\nConcatenação eficiente\nvar builder strings.Builder\nbuilder.WriteString("Primeira")\nbuilder.WriteString(" ")\nbuilder.WriteString("Segunda")\nresultado := builder.String()\n\nFields e transformações\ncampos := strings.Fields("   go  lang   rules   ")\nmapeado := strings.Map(func(r rune) rune {\nif r == 'a' { return '@' }\nreturn r\n}, "banana")\n}	O pacote strings oferece diversas funções para manipulação de texto:\n\nTransformações:\n- ToUpper/ToLower: Conversão de caso\n- Title: Capitalização de palavras\n- TrimSpace/Trim: Remoção de espaços\n\nBusca:\n- Contains: Verifica substring\n- HasPrefix/HasSuffix: Verifica início/fim\n- Index/LastIndex: Encontra posições\n\nModificações:\n- Replace/ReplaceAll: Substituições\n- Split/Join: Divisão e união\n- Builder: Concatenação eficiente\n\nBoas Práticas:\n- Use Builder para múltiplas concatenações\n- Prefira ReplaceAll a Replace(-1)\n- Fields é melhor que Split(" ")\n- Strings são imutáveis em Go	2025-01-29 20:23:12.207	76b2b979-718e-4e9b-be27-6f5750c27ba9	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.207
48d574c3-ff22-46a5-a98b-e758a21f003e	Tipo int em Go	Trabalhando com números inteiros e suas operações em Go	Declaração de var iáveis int\nvar numero int = 42         Declaração com var\nidade := 25                Declaração curta\nconst maxValor = 100       Constante\n\nTipos específicos de int\nvar num8 int8 = 127        -128 até 127\nvar num16 int16 = 32767    -32768 até 32767\nvar num32 int32 = 2147483647\nvar num64 int64 = 9223372036854775807\n\nOperações matemáticas\nsoma := 10 + 5            15\nsubtracao := 10 - 5       5\nmultiplicacao := 10 * 5    50\ndivisao := 10 / 3         3 (divisão inteira)\nresto := 10 % 3           1 (resto da divisão)\n\nOperadores de incremento/decremento\nnumero++                  Incrementa 1\nnumero--                  Decrementa 1\n\nConversões\nvar x float64 = 123.456\nnumeroInt := int(x)       123 (trunca decimal)\n\nFunções úteis para int\nabsoluto := abs(-42)      42\nmaximo := max(10, 20)     20\nminimo := min(10, 20)     10\n\nStrings e int\nstrNumero := "42"\nConvertendo string para int\nnum, err := strconv.Atoi(strNumero)\nif err != nil {\nfmt.Println("Erro na conversão:", err)\n}\n\nConvertendo int para string\nstr := strconv.Itoa(numero)\n\nComparações\nmaior := 10 > 5           true\nmenor := 10 < 20          true\nigual := 10 == 10         true\ndiferente := 10 != 5      true\nmaiorIgual := 10 >= 10    true\nmenorIgual := 5 <= 10     true\n\nOperadores bit a bit\nand := 12 & 25           AND bit a bit\nor := 12 | 25            OR bit a bit\nxor := 12 ^ 25           XOR bit a bit\nleftShift := 12 << 2     Deslocamento à esquerda\nrightShift := 12 >> 2    Deslocamento à direita	 Tipos de Int em Go\n\nint - Tipo padrão, tamanho depende da arquitetura (32 ou 64 bits)\nint8 - 8 bits (-128 a 127)\nint16 - 16 bits (-32768 a 32767)\nint32 - 32 bits (-2^31 a 2^31-1)\nint64 - 64 bits (-2^63 a 2^63-1)\n\nQuando usar cada tipo\n- int: Use para a maioria dos casos\n- int8/int16: Quando precisar economizar memória\n- int32: Para compatibilidade específica\n- int64: Para números muito grandes\n\nOperações Matemáticas\n+ : Adição\n- : Subtração\n* : Multiplicação\n/ : Divisão (trunca decimais)\n% : Resto da divisão\n++ : Incremento\n-- : Decremento\n\nConversões\n- strconv.Atoi(): String para int\n- strconv.Itoa(): Int para string\n- int(): Conversão entre tipos numéricos\n\nBoas Práticas\nUse int para contadores e índices\nVerifique overflow em operações\nTrate erros em conversões\nUse constantes quando o valor não muda\nConsidere o range do tipo escolhido\n\nOperadores Bit a Bit\n& : AND - Útil para máscaras de bits\n| : OR - Combina flags\n^ : XOR - Toggle de bits\n<< : Multiplica por 2^n\n>> : Divide por 2^n	2025-01-29 20:23:12.21	8967d610-bbdd-4249-8a32-fd830af5f787	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.21
4859a6c4-9f51-4dc4-89b9-99c52f5f9670	Pacote time em Go	Manipulação de datas, horários e durações com o pacote time	Obtendo data e hora atual\nagora := time.Now()\nfmt.Println("Data e Hora:", agora)\n\nretorno: 2024-01-14 15:04:05.123456789 -0300 BRT\n\nComponentes da data/hora\nano := agora.Year()            2024\nmes := agora.Month()           January\ndia := agora.Day()             14\nhora := agora.Hour()           15\nminuto := agora.Minute()       4\nsegundo := agora.Second()      5\nnanoseg := agora.Nanosecond()  123456789\n\nFormatação de data\nlayoutBR := "02/01/2006"\nlayoutUS := "2006-01-02"\nlayoutComplet o := "02/01/2006 15:04:05"\n\ndataBR := agora.Format(layoutBR)\n\nretorno: 14/01/2024\n\ndataUS := agora.Format(layoutUS)\n\nretorno: 2024-01-14\n\nParsing de string para time\ndataStr := "14/01/2024"\ndataParsed, err := time.Parse(layoutBR, dataStr)\nif err != nil {\nfmt.Println("Erro ao parsear data:", err)\n}\n\nCriando data específica\ndata := time.Date(2024, 1, 14, 15, 4, 5, 0, time.Local)\n\nComparações de tempo\nantes := data.Before(agora)    true se data é anterior\ndepois := data.After(agora)    true se data é posterior\nigual := data.Equal(agora)     true se datas são iguais\n\nOperações com tempo\namanha := agora.AddDate(0, 0, 1)   Adiciona 1 dia\nontem := agora.AddDate(0, 0, -1)   Subtrai 1 dia\nproxMes := agora.AddDate(0, 1, 0)  Adiciona 1 mês\nproxAno := agora.AddDate(1, 0, 0)  Adiciona 1 ano\n\nDurações\nduration := time.Hour * 24         1 dia\nduasHoras := time.Hour * 2         2 horas\ndezMinutos := time.Minute * 10     10 minutos\n\nTimer e Sleep\ntime.Sleep(time.Second * 2)        Pausa por 2 segundos\n\nCriando timer\ntimer := time.NewTimer(time.Second * 5)\n<-timer.C                          Espera 5 segundos\n\nCriando ticker (repetição)\nticker := time.NewTicker(time.Second)\nfor i := 0; i < 5; i++ {\n<-ticker.C                     Executa a cada segundo\nfmt.Println("Tick")\n}\nticker.Stop()\n\nMedindo tempo de execução\ninicio := time.Now()\n... código a ser medido ...\nduracao := time.Since(inicio)\nfmt.Printf("Tempo de execução: %v\n", duracao)	 Principais Conceitos\n\nTime\n- Representa um instante no tempo\n- Precisão de nanosegundos\n- Inclui informação de fuso horário\n\nDuration\n- Representa um período de tempo\n- Pode ser positivo ou negativo\n- Útil para cálculos de intervalo\n\nLocation\n- Representa um fuso horário\n- Importante para conversões\n- Afeta formatação e parsing\n\nFormatação\nGo usa uma data específica como referência:\n- 2006 = Ano\n- 01 = Mês\n- 02 = Dia\n- 15 = Hora (24h)\n- 04 = Minuto\n- 05 = Segundo\n\nOperações Comuns\n- AddDate(): Adiciona anos, meses, dias\n- Add(): Adiciona uma duração\n- Sub(): Calcula diferença entre tempos\n- Since(): Tempo decorrido desde\n- Until(): Tempo até\n\nUsos Práticos\nTimestamps em logs\nAgendamento de tarefas\nMedição de performance\nControle de expiração\nFormatação para display\n\nTimer e Ticker\nTimer\n- Executa uma vez após delay\n- Pode ser cancelado\n- Útil para timeouts\n\nTicker\n- Executa periodicamente\n- Deve ser parado manualmente\n- Útil para tarefas recorrentes	2025-01-29 20:23:12.212	833aa709-3a1d-4cbc-95da-fa9dc70205ed	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.212
42ca90ce-a3c7-42fb-95e3-41350e979d9d	Pacote os em Go	Interação com o sistema operacional: arquivos, processos, ambiente	Argumentos da linha de comando\nargs := os.Args                Lista de argumentos\nprogramName := args[0]         Nome do programa\nif len(args) > 1 {\nfirstArg := args[1]        Primeiro argumento\n}\n\nVariáveis de ambiente\nhome := os.Getenv("HOME")      Lê var iável\nos.Setenv("API_KEY", "123")    Define var iável\nallEnv := os.Environ()         Todas var iáveis\n\nDiretório atual\ndir, err := os.Getwd()         Obtém diretório atual\nif err != nil {\nlog.Fatal(err)\n}\n\nos.Chdir("/tmp")               Muda diretório\n\nManipulação de arquivos\nCriação\nfile, err := os.Create("arquivo.txt")\nif err != nil {\nlog.Fatal(err)\n}\ndefer file.Close()\n\nEscrita\ndata := []byte("Olá, Mundo!")\nfile.Write(data)\n\nLeitura\nfile, err = os.Open("arquivo.txt")\nif err != nil {\nlog.Fatal(err)\n}\ndefer file.Close()\n\nbuffer := make([]byte, 1024)\nn, err := file.Read(buffer)\n\nInformações do arquivo\nfileInfo, err := os.Stat("arquivo.txt")\nif err != nil {\nlog.Fatal(err)\n}\nsize := fileInfo.Size()\nmode := fileInfo.Mode()\nmodTime := fileInfo.ModTime()\n\nManipulação de diretórios\nos.Mkdir("novapasta", 0755)        Cria diretório\nos.MkdirAll("pasta/subpasta", 0755)  Cria hierarquia\n\nListagem de diretório\nentries, err := os.ReadDir(".")\nfor _, entry := range entries {\nfmt.Println(entry.Name())\n}\n\nRemoção\nos.Remove("arquivo.txt")           Remove arquivo\nos.RemoveAll("pasta")             Remove recursivamente\n\nProcessos\npid := os.Getpid()                ID do processo\nppid := os.Getppid()              ID do processo pai\n\nSinais\nsigs := make(chan os.Signal, 1)\nsignal.Notify(sigs, os.Interrupt)\ngo func() {\n<-sigs\nfmt.Println("Recebeu sinal de interrupção")\nos.Exit(0)\n}()\n\nPermissões de arquivo\nos.Chmod("arquivo.txt", 0644)     Muda permissões\nos.Chown("arquivo.txt", 1000, 1000)  Muda proprietário	 Principais Funcionalidades\n\nArgumentos e Ambiente\n- os.Args: Argumentos da linha de comando\n- os.Getenv/Setenv: Variáveis de ambiente\n- os.Environ: Lista todas variáveis\n\nArquivos e Diretórios\n- Create/Open: Manipulação de arquivos\n- Mkdir/MkdirAll: Criação de diretórios\n- Remove/RemoveAll: Remoção de arquivos/diretórios\n- ReadDir: Lista conteúdo de diretório\n\nProcessos e Sinais\n- Getpid/Getppid: IDs de processo\n- Signal: Manipulação de sinais\n- Exit: Termina o programa\n\nPermissões de Arquivo (Unix)\n- 0644: rw-r--r-- (Padrão para arquivos)\n- 0755: rwxr-xr-x (Padrão para diretórios)\n- 0600: rw------- (Privado)\n\nBoas Práticas\nSempre feche arquivos (use defer)\nTrate erros adequadamente\nVerifique permissões\nUse caminhos absolutos com cuidado\nLimpe recursos temporários\n\nCasos de Uso Comuns\nScripts e automação\nManipulação de arquivos\nLogging e diagnóstico\nGerenciamento de configuração\nInteração com sistema operacional\n\nDicas de Segurança\nValide entradas de usuário\nEvite permissões excessivas\nUse caminhos seguros\nTrate sinais apropriadamente\nLimpe dados sensíveis	2025-01-29 20:23:12.215	0b9e1fe6-d0a7-4fb3-b1bc-ca7bbc267109	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.215
9b383f6a-13d2-446e-928c-5b65d339e9ec	Verbos de Formatação em Go	Principais verbos de formatação para usar com fmt.Printf, fmt.Sprintf, etc.	Verbos básicos de formatação\nnome := "João"\nidade := 25\naltura := 1.75\nprogramador := true\n\n%s - Para strings (texto)\nfmt.Printf("Nome: %s\n", nome)\n\nretorno: Nome: João\n\n%d - Para números inteiros (int)\nfmt.Printf("Idade: %d anos\n", idade)\n\nretorno: Idade: 25 anos\n\n%f - Para números decimais (float)\nfmt.Printf("Altura: %.2f metros\n", altura)\n\nretorno: Altura: 1.75 metros\n\n%t - Para booleanos (true/false)\nfmt.Printf("É programador? %t\n", programador)\n\nretorno: É programador? true\n\n%v - Para qualquer tipo de valor\nfmt.Printf("Dados: %v, %v, %v, %v\n", nome, idade, altura, programador)\n\nretorno: Dados: João, 25, 1.75, true\n\n%#v - Mostra a sintaxe Go do valor\nfmt.Printf("Sintaxe Go: %#v\n", nome)\n\nretorno: Sintaxe Go: "João"\n\n%T - Mostra o tipo do valor\nfmt.Printf("Tipos: %T, %T, %T, %T\n", nome, idade, altura, programador)\n\nretorno: Tipos: string, int, float64, bool\n\n%%  - Imprime o símbolo %\nfmt.Printf("Porcentagem: 100%%\n")\n\nretorno: Porcentagem: 100%\n\nAlinhamento e precisão\n%ns - Alinha texto à direita em n espaços\nfmt.Printf("|%10s|\n", nome)\n\nretorno: |      João|\n\n%-ns - Alinha texto à esquerda em n espaços\nfmt.Printf("|%-10s|\n", nome)\n\nretorno: |João      |\n\n%.nf - Define casas decimais para float\nfmt.Printf("Altura: %.1f\n", altura)\n\nretorno: Altura: 1.8\n\nFormatação de números\nnumero := 1234567\n%,d - Adiciona separador de milhar\nfmt.Printf("Número: %,d\n", numero)\n\nretorno: Número: 1,234,567\n\n%x ou %X - Hexadecimal (minúsculo ou maiúsculo)\nfmt.Printf("Hex: %x - %X\n", 255, 255)\n\nretorno: Hex: ff - FF\n\n%b - Binário\nfmt.Printf("Binário: %b\n", 7)\n\nretorno: Binário: 111	 Verbos básicos de formatação\n\n* %s - Usado para strings (textos)\nFormata e exibe strings\nNão adiciona aspas na saída\n\n* %d Usado para números inteiros\nFormata números inteiros\nPode usar com int, int32, int64, etc.\n\n* %f Usado para números decimais\nFormata números de ponto flutuante\nPode controlar casas decimais com * %.nf\n\n* %t Usado para booleanos\nMostra true ou false\nÚtil para valores lógicos\n\n* %v Verbo genérico\nFunciona com qualquer tipo\nFormato padrão do valor\n\n* %#v Formato sintático Go\nMostra como o valor seria em código Go\nInclui tipos e estruturas\n\n* %T Mostra o tipo\nExibe o tipo Go do valor\nÚtil para debugging\n\nAlinhamento e precisão\n\n* %ns Alinhamento à direita\nn define o número de espaços\nPreenche com espaços à esquerda\n\n* %-ns Alinhamento à esquerda\nn define o número de espaços\nPreenche com espaços à direita\n\n* %.nf Precisão decimal\nn define número de casas decimais\nArredonda o valor automaticamente\n\nFormatação especial de números\n\n* %,d Separador de milhar\nAdiciona vírgula a cada 3 dígitos\nFacilita leitura de números grandes\n\n* %x/* %X Formato hexadecimal\nMinúsculo ou maiúsculo\nBase 16\n\n* %b Formato binário\nMostra número em base 2\nÚtil para operações bit a bit	2025-01-29 20:23:12.225	fe72b9b3-d9aa-404a-99e7-5dfa992ccb3b	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.225
e59d495d-ced5-46b2-801b-00bd5541377f	Testes Unitários	Criando e executando testes unitários em Go	\narquivo: calculator.go\npackage calculator\n\nfunc Add(a, b int) int {\nreturn a + b\n}\n\narquivo: calculator_test.go\npackage calculator\n\nimport "testing"\n\nTeste simples\nfunc TestAdd(t *testing.T) {\ngot := Add(2, 3)\nwant := 5\n\nif got != want {\nt.Errorf("Add(2, 3) = %d; want %d", got, want)\n}\n}\n\nTeste com tabela\nfunc TestAddTable(t *testing.T) {\ntests := []struct {\nname string\na    int\nb    int\nwant int\n}{\n{"positivos", 2, 3, 5},\n{"negativo_positivo", -2, 3, 1},\n{"zeros", 0, 0, 0},\n}\n\nfor _, tt := range tests {\nt.Run(tt.name, func(t *testing.T) {\ngot := Add(tt.a, tt.b)\nif got != tt.want {\nt.Errorf("Add(%d, %d) = %d; want %d",\ntt.a, tt.b, got, tt.want)\n}\n})\n}\n}\n\nTeste com subtestes\nfunc TestAddSubtests(t *testing.T) {\nt.Run("números positivos", func(t *testing.T) {\ngot := Add(2, 3)\nwant := 5\nif got != want {\nt.Error("falhou com positivos")\n}\n})\n\nt.Run("com zero", func(t *testing.T) {\ngot := Add(0, 5)\nwant := 5\nif got != want {\nt.Error("falhou com zero")\n}\n})\n}\n\nExecutar testes: go test\nCom verbosidade: go test -v\nTestes específicos: go test -run TestAdd	\nTestes unitários verificam o funcionamento correto de funções e métodos\nindividuais. São fundamentais para garantir a qualidade do código e facilitar\nmanutenções futuras.\n\nFunções e métodos principais:\n- TestNomeFuncao(): Função de teste que verifica um comportamento específico\n- t.Run(): Executa subtestes, permitindo organizar testes relacionados\n- t.Error/Errorf(): Reporta falhas encontradas durante o teste\n- t.Parallel() : Sinaliza para que os testes rodem em paralelo.\n- go test: Comando para executar os testes\n- go test ./... : executa os testes em todos os pacotes do projeto de uma só vez\n- go test -v: Executa testes com saída detalhada	2025-01-29 20:23:12.236	35ccfeba-2cb3-457a-bcdf-4ef79eed4607	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.236
bfef2170-de7e-478c-a80c-3adca42a3c97	Benchmarks	Testando performance com benchmarks	\narquivo: benchmark_test.go\npackage main\n\nimport "testing"\n\nfunc BenchmarkAdd(b *testing.B) {\nResetar timer se precisar setup\nb.ResetTimer()\n\nfor i := 0; i < b.N; i++ {\nAdd(2, 3)\n}\n}\n\nBenchmark com diferentes tamanhos\nfunc BenchmarkSlice(b *testing.B) {\nfor size := 100; size <= 10000; size *= 10 {\nb.Run(fmt.Sprintf("size-%d", size), func(b *testing.B) {\nslice := make([]int, size)\nb.ResetTimer()\n\nfor i := 0; i < b.N; i++ {\n_ = append(slice, 1)\n}\n})\n}\n}\n\nBenchmark paralelo\nfunc BenchmarkParallel(b *testing.B) {\nb.RunParallel(func(pb *testing.PB) {\nfor pb.Next() {\nAdd(2, 3)\n}\n})\n}\n\nExecutar: go test -bench=.\nCom alocações: go test -bench=. -benchmem\nEspecífico: go test -bench=BenchmarkAdd	\nBenchmarks são testes de performance que medem o tempo de execução e consumo\nde recursos de uma função. São essenciais para identificar gargalos e otimizar\no código.\n\nFunções e métodos principais:\n- BenchmarkNome(): Define um teste de benchmark\n- b.N: Número de iterações determinado automaticamente\n- b.ResetTimer(): Reseta o timer para ignorar setup\n- b.RunParallel(): Executa benchmark em paralelo\n- go test -bench: Executa os benchmarks\n- -benchmem: Inclui estatísticas de memória	2025-01-29 20:23:12.238	9110fb44-beeb-4c57-9f89-b0fffc4a5564	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.238
0064af94-0680-4880-b23f-fcfa5fe74aa1	Cobertura de Testes	Analisando cobertura de código com testes	\narquivo: coverage_test.go\npackage main\n\nimport "testing"\n\nfunc TestFuncao(t *testing.T) {\ntests := []struct {\nname  string\ninput int\nwant  bool\n}{\n{"positivo", 5, true},\n{"zero", 0, false},\n{"negativo", -5, true},\n}\n\nfor _, tt := range tests {\nt.Run(tt.name, func(t *testing.T) {\ngot := Funcao(tt.input)\nif got != tt.want {\nt.Errorf("got %v; want %v", got, tt.want)\n}\n})\n}\n}\n\nGerar relatório de cobertura\ngo test -cover\n\nGerar arquivo de cobertura\ngo test -coverprofile=coverage.out\n\nVer relatório detalhado\ngo tool cover -html=coverage.out\n\nVer cobertura por função\ngo tool cover -func=coverage.out	\nCobertura de testes mede quanto do código está sendo testado. Ajuda a identificar\npartes do código que precisam de mais testes e garante uma melhor qualidade\ndo software.\n\nComandos e funcionalidades principais:\n- go test -cover: Mostra porcentagem de cobertura\n- -coverprofile: Gera arquivo com dados detalhados\n- cover -html: Visualização HTML da cobertura\n- cover -func: Mostra cobertura por função\n- Cores indicam linhas cobertas/não cobertas\n- Identifica caminhos de código não testados	2025-01-29 20:23:12.24	bb8e3a18-92cc-4399-bade-458da0578976	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.24
d45633b2-cfe4-4421-8047-f27156f5dbf0	Mocks e Stubs	Criando mocks para testes isolados	\nInterface a ser mockada\ntype Database interface {\nGet(id string) (*User, error)\nSave(user *User) error\n}\n\nMock da Database\ntype MockDB struct {\nGetFunc  func(id string) (*User, error)\nSaveFunc func(user *User) error\n}\n\nfunc (m *MockDB) Get(id string) (*User, error) {\nreturn m.GetFunc(id)\n}\n\nfunc (m *MockDB) Save(user *User) error {\nreturn m.SaveFunc(user)\n}\n\nTeste usando mock\nfunc TestUserService(t *testing.T) {\nmockDB := &MockDB{\nGetFunc: func(id string) (*User, error) {\nreturn &User{ID: id, Name: "Test"}, nil\n},\nSaveFunc: func(user *User) error {\nreturn nil\n},\n}\n\nservice := NewUserService(mockDB)\nuser, err := service.GetUser("123")\n\nif err != nil {\nt.Error("não deveria retornar erro")\n}\nif user.Name != "Test" {\nt.Error("nome incorreto")\n}\n}\n\nUsando testify/mock\nimport "github.com/stretchr/testify/mock"\n\ntype MockDB struct {\nmock.Mock\n}\n\nfunc (m *MockDB) Get(id string) (*User, error) {\nargs := m.Called(id)\nreturn args.Get(0).(*User), args.Error(1)\n}\n\nTeste com testify\nfunc TestWithTestify(t *testing.T) {\nmockDB := new(MockDB)\nmockDB.On("Get", "123").Return(&User{ID: "123"}, nil)\n\nservice := NewUserService(mockDB)\nservice.GetUser("123")\n\nmockDB.AssertExpectations(t)\n}	\nMocks são objetos que simulam o comportamento de dependências reais durante os\ntestes. Permitem testar código isoladamente e controlar o comportamento das\ndependências.\n\nConceitos e ferramentas principais:\n- Interface: Define contrato para mock\n- MockDB: Implementação simulada\n- testify/mock: Framework de mocking\n- AssertExpectations: Verifica chamadas esperadas\n- On/Return: Define comportamento do mock\n- Stub: Implementação simplificada para testes	2025-01-29 20:23:12.243	60976bed-39aa-424d-ac42-8aade2914484	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.243
00f1d1db-e9cc-4df9-ab64-60e056e92e81	Debugging	Técnicas de debugging em Go	\nUsando print para debug\nfunc debugPrint() {\nfmt.Printf("Valor: %+v\n", objeto)\nfmt.Printf("Tipo: %T\n", var iavel)\nlog.Printf("Debug: %#v\n", dados)\n}\n\nUsando delve (dlv)\nInstalar: go install github.com/go-delve/delve/cmd/dlv@latest\n\nBreakpoint no código\nfunc processar() {\nruntime.Breakpoint()  breakpoint programático\n... código\n}\n\nDebugging com logs\nimport "log"\n\nfunc configureLog() {\nlog.SetFlags(log.Ldate | log.Ltime | log.Lshortfile)\nlogFile, _ := os.Create("debug.log")\nlog.SetOutput(logFile)\n}\n\nRastreamento de tempo\nfunc timeTrack(start time.Time, name string) {\nelapsed := time.Since(start)\nlog.Printf("%s levou %s", name, elapsed)\n}\n\nfunc exemplo() {\ndefer timeTrack(time.Now(), "exemplo")\n... código\n}\n\nRecuperando panics\nfunc recuperar() {\nif r := recover(); r != nil {\nlog.Printf("Recuperado: %v\n", r)\n}\n}\n\nfunc exemplo2() {\ndefer recuperar()\n... código que pode panic\n}	\nDebugging é o processo de identificar e corrigir erros no código. Go oferece\nvárias ferramentas e técnicas para facilitar a localização e resolução de\nproblemas.\n\nFerramentas e técnicas principais:\n- delve (dlv): Debugger oficial para Go\n- runtime.Breakpoint(): Ponto de parada no código\n- log: Sistema de logging configurável\n- defer: Rastreamento de tempo de execução\n- recover: Recuperação de panics\n- fmt.Printf: Debug com prints formatados	2025-01-29 20:23:12.246	d90a3462-ded8-4aee-a033-8dfcc704ab8f	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.246
d328cde7-24cc-40a8-9df6-d8b663d46c9d	JWT em Go	Gerando e validando JSON Web Tokens (JWT) com a biblioteca jwt-go	Exemplo de geração e validação de JWT\npackage main\n\nimport (\n"fmt"\n"time"\n\n"github.com/golang-jwt/jwt/v5"\n)\n\nvar secretKey = []byte("sua_chave_secreta")\n\nfunc gerarToken() (string, error) {\ntoken := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{\n"user": "usuario123",\n"exp":  time.Now().Add(time.Hour * 2).Unix(),\n})\nreturn token.SignedString(secretKey)\n}\n\nfunc validarToken(tokenString string) error {\ntoken, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\nreturn secretKey, nil\n})\nif err != nil {\nreturn err\n}\nif claims, ok := token.Claims.(jwt.MapClaims); ok && token.Valid {\nfmt.Println("Token válido para o usuário:", claims["user"])\n}\nreturn nil\n}\n\nfunc main() {\ntoken, _ := gerarToken()\nfmt.Println("Token Gerado:", token)\nvalidarToken(token)\n}	JWT (JSON Web Token) é um padrão para autenticação segura.\nO exemplo utiliza a biblioteca 'jwt-go' para criar e validar tokens.\nO token inclui claims (informações como o nome do usuário e a expiração).\nA chave secreta é usada para assinar e validar o token, garantindo sua integridade.	2025-01-29 20:23:12.256	8c7d8063-3953-4c7f-bc9c-9322ac092fbd	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.256
53109451-5ee0-4b35-973e-aec102671ec9	Hash e Criptografia	Como gerar e comparar hashes com bcrypt em Go	Exemplo de uso do bcrypt\npackage main\n\nimport (\n"fmt"\n"golang.org/x/crypto/bcrypt"\n)\n\nfunc gerarHash(senha string) (string, error) {\nhash, err := bcrypt.GenerateFromPassword([]byte(senha), bcrypt.DefaultCost)\nreturn string(hash), err\n}\n\nfunc verificarHash(senha, hash string) bool {\nerr := bcrypt.CompareHashAndPassword([]byte(hash), []byte(senha))\nreturn err == nil\n}\n\nfunc main() {\nsenha := "senha_secreta"\nhash, _ := gerarHash(senha)\nfmt.Println("Hash gerado:", hash)\n\nvalido := verificarHash(senha, hash)\nfmt.Println("Senha válida?", valido)\n}	A biblioteca 'bcrypt' é amplamente usada para hashing de senhas em Go.\nO hash gerado é seguro e adequado para armazenamento de credenciais.\nO exemplo inclui funções para gerar e verificar hashes usando bcrypt.	2025-01-29 20:23:12.259	d34e66e7-4032-4f32-bb13-f4a29c09ebda	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.259
575372b2-29a1-4419-a61c-bedf67cf64ce	Exclusão (DELETE)	Removendo registros de tabelas SQL	\n-- DELETE básico\nDELETE FROM usuarios\nWHERE status = 'inativo';\n-- retorno: n registros delet ados\n\n-- DELETE com JOIN\nDELETE p\nFROM pedidos p\nINNER JOIN usuarios u ON p.usuario_id = u.id\nWHERE u.status = 'cancelado';\n-- retorno: delet a pedidos de usuários cancelados\n\n-- DELETE com subquery\nDELETE FROM produtos\nWHERE id IN (\nSELECT produto_id\nFROM vendas\nGROUP BY produto_id\nHAVING COUNT(*) = 0\n);\n-- retorno: delet a produtos sem vendas\n\n-- DELETE limitado\nDELETE FROM logs\nWHERE data < '2024-01-01'\nLIMIT 1000;\n-- retorno: delet a 1000 registros antigos	\nDELETE:\n- Remove registros\n- Permite WHERE\n- Aceita JOINs\n- Pode ser limitado\n- Mantém estrutura\n- Usa índices	2025-01-29 20:23:12.652	dbd4aebc-45f4-4e07-a23c-934407e4f82e	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.652
d394cdd8-1be3-44ae-b0ed-80e9e8abfd19	Middleware de Autenticação	Um middleware para autenticar requisições em um servidor HTTP	Exemplo de middleware de autenticação\npackage main\n\nimport (\n"net/http"\n)\n\nfunc autenticar(next http.Handler) http.Handler {\nreturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\ntoken := r.Header.Get("Authorization")\nif token != "Bearer token_valido" {\nhttp.Error(w, "Não autorizado", http.StatusUnauthorized)\nreturn\n}\nnext.ServeHTTP(w, r)\n})\n}\n\nfunc main() {\nhttp.Handle("/", autenticar(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\nw.Write([]byte("Bem-vindo!"))\n})))\n\nhttp.ListenAndServe(":8080", nil)\n}	Middlewares são usados para interceptar e processar requisições HTTP antes de chegar aos handlers.\nEste exemplo implementa um middleware que verifica o cabeçalho "Authorization" para autenticação básica.	2025-01-29 20:23:12.261	33942eb6-204e-4306-ac22-af7ed7eacd68	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.261
4da2ed5a-2758-4123-8a2f-84934f013dab	OAuth2	Implementando fluxo básico de autenticação OAuth2 com a biblioteca 'oauth2'	Exemplo de uso do OAuth2\npackage main\n\nimport (\n"fmt"\n"golang.org/x/oauth2"\n)\n\nfunc main() {\nconfig := &oauth2.Config{\nClientID:     "seu_client_id",\nClientSecret: "seu_client_secret",\nEndpoint: oauth2.Endpoint{\nAuthURL:  "https:provider.com/oauth2/auth",\nTokenURL: "https:provider.com/oauth2/token",\n},\nRedirectURL: "http:localhost:8080/callback",\nScopes:      []string{"profile", "email"},\n}\n\nurl := config.AuthCodeURL("state")\nfmt.Println("Visite o URL para autenticação:", url)\n}	OAuth2 é um padrão para delegação de autenticação.\nNo exemplo, configuramos um cliente OAuth2 para gerar um URL de autorização, que redireciona o usuário ao provedor de identidade.	2025-01-29 20:23:12.263	f348c48b-8307-4275-bf70-5ed520dccf94	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.263
12236206-5201-4490-bb20-36fd4f0fa5aa	CORS em Go	Como configurar CORS em um servidor HTTP em Go	Exemplo de configuração de CORS\npackage main\n\nimport (\n"net/http"\n)\n\nfunc habilitarCORS(h http.Handler) http.Handler {\nreturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\nw.Header().Set("Access-Control-Allow-Origin", "*")\nw.Header().Set("Access-Control-Allow-Methods", "GET, POST, OPTIONS")\nw.Header().Set("Access-Control-Allow-Headers", "Content-Type")\nif r.Method == "OPTIONS" {\nreturn\n}\nh.ServeHTTP(w, r)\n})\n}\n\nfunc main() {\nhttp.Handle("/", habilitarCORS(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\nw.Write([]byte("Requisição bem-sucedida"))\n})))\n\nhttp.ListenAndServe(":8080", nil)\n}	CORS (Cross-Origin Resource Sharing) permite que servidores definam políticas para compartilhamento de recursos entre diferentes origens.\nO exemplo adiciona cabeçalhos CORS a todas as respostas HTTP.	2025-01-29 20:23:12.266	df0c4d2e-5f28-4a31-ac2e-359c708345ab	dda9f985-8614-4e9c-8564-dcd7de1181f7	2025-01-29 20:23:12.266
a100c585-977c-4e20-86b6-afa755dfcf71	Comentários e Boas Práticas	Como usar comentários e aplicar boas práticas em JavaScript	Comentário de linha única\nconsole.log("Hello World");\n\n/* Comentário de\nmúltiplas linhas */\n\n/**\n* Comentário de documentação (JSDoc)\n* @param {number} a Primeiro número\n* @param {number} b Segundo número\n* @returns {number} A soma dos números\n*/\nfunction soma(a, b) {\nreturn a + b;\n}\n\nBoas práticas de nomeação\nconst ID_USUARIO = 'user123';   const antes\nlet nomeUsuario = 'João';       var iáveis\nfunction calcularTotal() {}     funções\n\nUse let e const ao invés de var\nconst pi = 3.14;\nlet contador = 0;\n\nIndentação e formatação\nfunction exemploFormatacao() {\nif (condicao) {\nconsole.log("Verdadeiro");\n} else {\nconsole.log("Falso");\n}\n}\n\nTratamento de erros\ntry {\nCódigo que pode gerar erro\nthrow new Error("Exemplo de erro");\n} catch (erro) {\nconsole.error("Erro:", erro.message);\n}\n\nUse === ao invés de ==\nif (valor === null) {\nconsole.log("Valor é null");\n}	Comentários e boas práticas em JavaScript são fundamentais para criar código\nlegível, manutenível e seguindo os padrões modernos da linguagem.\n\nElementos principais:\n- Comentários simples:  para documentação rápida\n- Comentários múltiplos: /* */ para blocos maiores\n- JSDoc: /** */ para documentação formal de funções e classes\n- Declarações: Prefira const e let sobre var\n- Comparações: Use === e !== para comparações estritas\n- Nomeação: camelCase para variáveis e funções\n- Indentação: 2 ou 4 espaços consistentes\n- Ponto e vírgula: Use-os ao final das instruções\n- Error handling: Use try/catch para tratamento de erros	2025-01-29 20:23:12.297	b1d6433e-3e6d-44b0-bf1f-cd8121124955	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.297
9c930501-07a1-4724-9f40-37e1f03c4a68	Operadores	Operadores utilizados em JavaScript para manipulação de dados.	\nOperadores aritméticos\nlet soma = 5 + 3;  8\nlet subtracao = 5 - 3;  2\nlet multiplicacao = 5 * 3;  15\nlet divisao = 5 / 3;  1.6666...\n\nOperadores de comparação\nlet igual = 5 == 5;  true\nlet diferente = 5 != 3;  true\nlet maiorQue = 5 > 3;  true\nlet menorQue = 5 < 3;  false\n\nOperadores lógicos\nlet e = true && false;  false\nlet ou = true || false;  true\nlet negacao = !true;  false\n	\nOperadores aritméticos: Realizam operações matemáticas como soma (+), subtração (-), multiplicação (*), e divisão (/).\nOperadores de comparação: Comparam valores, como igual (==), diferente (!=), maior que (>), e menor que (<).\nOperadores lógicos: Operações lógicas como 'e' (&&), 'ou' (||), e negação (!).\n	2025-01-29 20:23:12.294	1159ff9e-0164-4c62-8583-2cd1c8d23265	1c889291-fc8c-48c8-8de2-d343294427e5	2025-02-04 21:17:14.173
5ce0d3e6-a2aa-45d3-a6aa-944c4aecdbf1	Tipos de dados	Conceitos básicos e essenciais de JavaScript.	\nTipos primitivos\nlet texto = "Olá";\n\nretorno: "Olá"\n\nlet numero = 42;\n\nretorno: 42\n\nlet boolean = true; ou false\n\nretorno: true\n\nlet nulo = null;\n\nretorno: null\n\nlet indefinido;\n\nretorno: undefined\n\nExemplo de tipos de dados\nlet objeto = { chave: "valor" };  object\nlet lista = [1, 2, 3];  array\n\n	\nTipos primitivos:\n- string: Representa textos e caracteres.\n- number: Representa números, tanto inteiros quanto decimais.\n- boolean: Representa valores verdadeiro (true) ou falso (false).\n- null: Representa a ausência intencional de valor.\n- undefined: Representa uma variável que não foi atribuída.\n- object: para objetos, que podem armazenar coleções de dados.\n- array: uma forma de objeto para listas de dados.\n	2025-01-29 20:23:12.289	290a7b0c-8cb3-417d-a500-1b3630752476	1c889291-fc8c-48c8-8de2-d343294427e5	2025-02-06 21:35:01.675
1a0113fd-ffb8-40d7-ba64-4a3ac7f7b181	Arrays e Métodos	Manipulação de arrays em JavaScript	Declaração e inicialização\nlet numeros = [1, 2, 3, 4, 5];\n\nretorno: [1, 2, 3, 4, 5]\n\nlet frutas = ["maçã", "banana", "laranja"];\n\nretorno: ["maçã", "banana", "laranja"]\n\nMétodos de adição e remoção\nfrutas.push("uva");\n\nretorno: 4 (novo tamanho do array)\nfrutas agora é: ["maçã", "banana", "laranja", "uva"]\n\nlet ultima = frutas.pop();\n\nretorno: "uva"\nfrutas agora é: ["maçã", "banana", "laranja"]\n\nfrutas.unshift("morango");\n\nretorno: 4 (novo tamanho do array)\nfrutas agora é: ["morango", "maçã", "banana", "laranja"]\n\nlet primeira = frutas.shift();\n\nretorno: "morango"\nfrutas agora é: ["maçã", "banana", "laranja"]\n\nfrutas.splice(1, 2, "pera");\n\nretorno: ["banana", "laranja"] (elementos removidos)\nfrutas agora é: ["maçã", "pera"]\n\nMétodos de transformação\nlet dobrados = numeros.map(n => n * 2);\n\nretorno: [2, 4, 6, 8, 10]\n\nlet pares = numeros.filter(n => n % 2 === 0);\n\nretorno: [2, 4]\n\nlet soma = numeros.reduce((acc, n) => acc + n, 0);\n\nretorno: 15\n\nMétodos de busca\nlet indice = frutas.indexOf("banana");\n\nretorno: 1 (ou -1 se não encontrar)\n\nlet temMaca = frutas.includes("maçã");\n\nretorno: true\n\nlet encontrado = numeros.find(n => n > 3);\n\nretorno: 4 (ou undefined se não encontrar)\n\nlet algumMaior3 = numeros.some(n => n > 3);\n\nretorno: true\n\nlet todosMaior0 = numeros.every(n => n > 0);\n\nretorno: true\n\nOrdenação e outras operações\nlet ordenados = [...numeros].sort((a, b) => a - b);\n\nretorno: [1, 2, 3, 4, 5]\n\nlet parte = numeros.slice(1, 3);\n\nretorno: [2, 3]\n\nlet juntado = numeros.join(", ");\n\nretorno: "1, 2, 3, 4, 5"\n\nIteração\nnumeros.forEach((n, i) => {\nconsole.log(`Número ${n} no índice ${i}`);\n});\nnão tem retorno, apenas exibe no console\n\nMap com arrow function\nlet stringNumeros = numeros.map(n => n.toString());\n\nretorno: ["1", "2", "3", "4", "5"]\n\nFilter com diferentes tipos\nlet itens = ["a", 1, "b", 2];\nlet apenasStrings = itens.filter(item => typeof item === "string");\n\nretorno: ["a", "b"]	 Declaração e inicialização\nArrays em JavaScript são estruturas dinâmicas que podem armazenar qualquer tipo de dado\nPodem ser criados usando colchetes [] ou new Array()\n\n\nMétodos de adição e remoção\n.push() - Adiciona elementos ao final do array e retorna o novo tamanho\n.pop() - Remove o último elemento e o retorna\n.unshift() - Adiciona elementos no início e retorna o novo tamanho\n.shift() - Remove o primeiro elemento e o retorna\n.splice() - Permite remover e adicionar elementos em qualquer posição\n\n\nMétodos de transformação\n.map() - Cria um novo array transformando cada elemento\n.filter() - Cria um novo array com elementos que passam no teste\n.reduce() - Reduz o array a um único valor\n\n\nMétodos de busca\n.indexOf() - Retorna a posição do elemento ou -1 se não encontrar\n.includes() - Retorna true/false se o elemento existe\n.find() - Retorna o primeiro elemento que satisfaz a condição\n.some() - Verifica se algum elemento satisfaz a condição\n.every() - Verifica se todos os elementos satisfazem a condição\n\n\nOrdenação e outras operações\n.sort() - Ordena os elementos (use comparador para números)\n.slice() - Extrai uma parte do array\n.join() - Converte o array em string com separador\n\n\nIteração\n.forEach() - Executa uma função para cada elemento\nArrow functions tornam o código mais conciso\nSpread operator (...) cria cópias de arrays	2025-01-29 20:23:12.304	a98180e1-fff9-4db6-b2b8-a433885f82fa	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.304
bee9d3b9-856a-45c2-8292-b7aaa5e67c1d	Objetos e Métodos	Trabalhando com objetos em JavaScript	Criação de objetos\nconst pessoa = {\nnome: "Maria",\nidade: 30\n};\n\nretorno: { nome: "Maria", idade: 30 }\n\nMétodos do Object\nconst chaves = Object.keys(pessoa);\n\nretorno: ["nome", "idade"]\n\nconst valores = Object.values(pessoa);\n\nretorno: ["Maria", 30]\n\nconst entradas = Object.entries(pessoa);\n\nretorno: [["nome", "Maria"], ["idade", 30]]\n\nconst temPropriedade = Object.hasOwn(pessoa, "nome");\n\nretorno: true\n\nAcessando e modificando\npessoa.nome = "Ana";\n\nretorno: "Ana"\npessoa agora é: { nome: "Ana", idade: 30 }\n\npessoa["idade"] = 31;\n\nretorno: 31\npessoa agora é: { nome: "Ana", idade: 31 }\n\ndelet e pessoa.email;\n\nretorno: true\n\nSpread e Rest\nconst pessoaComplet a = {\n...pessoa,\nemail: "ana@email.com"\n};\n\nretorno: { nome: "Ana", idade: 31, email: "ana@email.com" }\n\nconst { nome, ...resto } = pessoaComplet a;\nretorno para nome: "Ana"\nretorno para resto: { idade: 31, email: "ana@email.com" }\n\nObject.freeze\nconst pessoaImutavel = Object.freeze(pessoa);\nTentativa de modificação não terá efeito em modo strict\npessoaImutavel.nome = "João";  Erro em strict mode\n\nGetters e Setters\nconst conta = {\nsaldo: 0,\nget saldoFormatado() {\nreturn `R$ ${this.saldo.toFixed(2)}`;\n},\ndeposito(valor) {\nthis.saldo += valor;\n}\n};\nuso:\nconta.deposito(100);\nretorno do saldoFormatado: "R$ 100.00"\n\nVerificação de tipo de objeto\nconst veiculo = { tipo: "carro", portas: 4 };\n\nfunction ehCarro(veiculo) {\nreturn veiculo.tipo === "carro";\n}\n\nif (ehCarro(veiculo)) {\nconsole.log(veiculo.portas);\n}\nretorno do console.log: 4\n\nObjetos como dicionários\nconst dicionario = {\n"um": 1,\n"dois": 2\n};\n\nretorno: { "um": 1, "dois": 2 }\n\nAcessando propriedades dinamicamente\nfunction getProp(obj, key) {\nreturn obj[key];\n}\nconst nomePessoa = getProp(pessoa, "nome");\n\nretorno: "Ana"\n\nObject descriptors\nObject.defineProperty(pessoa, 'idade', {\nvalue: 31,\nwritable: false,     não pode ser alterado\nenumerable: true,    aparece em loops\nconfigurable: false  não pode ser delet ado\n});\n\nCriando objetos com prototypes\nconst pessoaProto = {\nsaudacao() {\nreturn `Olá, meu nome é ${this.nome}`;\n}\n};\n\nconst novaPessoa = Object.create(pessoaProto, {\nnome: {\nvalue: 'João',\nwritable: true,\nenumerable: true\n}\n});\nuso:\nnovaPessoa.saudacao();\n\nretorno: "Olá, meu nome é João"	 Criação de objetos\nObjetos podem ser criados usando a notação literal {} ou Object.create()\nPropriedades podem ser adicionadas dinamicamente\n\n\nMétodos do Object\nObject.keys() - Retorna array com os nomes das propriedades\nObject.values() - Retorna array com os valores das propriedades\nObject.entries() - Retorna array de pares [chave, valor]\nObject.hasOwn() - Verifica se a propriedade pertence ao objeto\n\n\nAcessando e modificando\nNotação ponto (obj.prop) - Acesso direto a propriedades\nNotação colchetes (obj["prop"]) - Acesso dinâmico a propriedades\ndelete - Remove propriedades do objeto\n\n\nSpread e Rest\n... spread - Copia todas as propriedades de um objeto\n... rest - Coleta propriedades restantes em um novo objeto\n\n\nObject.freeze\nTorna o objeto imutável\nModificações são ignoradas em modo strict\nÚtil para dados que não devem ser alterados\n\n\nGetters e Setters\nget - Define propriedade computada\nset - Define função para alterar propriedade\nPermite encapsulamento e lógica personalizada\n\n\nVerificação de tipo de objeto\nFunções podem verificar propriedades específicas\nÚtil para trabalhar com diferentes tipos de objetos\nPermite código condicional baseado no tipo\n\n\nObjetos como dicionários\nPodem usar strings como chaves\nÚtil para mapear valores\nAcesso dinâmico a propriedades\n\n\nObject descriptors\nPermitem controle fino sobre propriedades\nPodem definir propriedades como imutáveis\nControlam enumeração e configuração\n\n\nPrototypes\nBase para herança em JavaScript\nPermitem compartilhar métodos entre objetos\nFundamental para programação orientada a objetos em JS	2025-01-29 20:23:12.306	7f0b8502-0038-444b-9553-5e98387b9a25	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.306
2c3fda3e-9401-45ca-b25d-da1a338d9244	Strings e Métodos	Manipulação de strings em JavaScript	Criação de strings\nlet aspasSimples = 'texto simples';\n\nretorno: "texto simples"\n\nlet aspasDuplas = "texto com aspas";\n\nretorno: "texto com aspas"\n\nlet var iavel = "mundo";\nlet template = `Olá ${var iavel}`;\n\nretorno: "Olá mundo"\n\nMétodos de busca\nlet texto = "JavaScript é incrível";\n\nlet tamanho = texto.length;\n\nretorno: 21\n\nlet posicao = texto.indexOf("é");\n\nretorno: 11\n\nlet ultimaPosicao = texto.lastIndexOf("i");\n\nretorno: 19\n\nlet inclui = texto.includes("Script");\n\nretorno: true\n\nlet comeca = texto.startsWith("Java");\n\nretorno: true\n\nlet termina = texto.endsWith("vel");\n\nretorno: true\n\nlet buscaRegex = texto.search(/é/);\n\nretorno: 11\n\nlet match = texto.match(/[A-Z]/g);\n\nretorno: ["J", "S"]\n\nMétodos de transformação\nlet maiusculas = texto.toUpperCase();\n\nretorno: "JAVASCRIPT É INCRÍVEL"\n\nlet minusculas = texto.toLowerCase();\n\nretorno: "javascript é incrível"\n\nlet textoComEspacos = "  texto com espaços  ";\nlet semEspacos = textoComEspacos.trim();\n\nretorno: "texto com espaços"\n\nlet semEspacosInicio = textoComEspacos.trimStart();\n\nretorno: "texto com espaços  "\n\nlet semEspacosFim = textoComEspacos.trimEnd();\n\nretorno: "  texto com espaços"\n\nlet substituido = texto.replace("incrível", "fantástico");\n\nretorno: "JavaScript é fantástico"\n\nlet substituicaoGlobal = "ana banana".replace(/ana/g, "ada");\n\nretorno: "ada bada"\n\nlet partes = texto.split(" ");\n\nretorno: ["JavaScript", "é", "incrível"]\n\nExtração de substrings\nlet sub1 = texto.substring(0, 4);\n\nretorno: "Java"\n\nlet sub2 = texto.slice(4, 10);\n\nretorno: "Script"\n\nlet sub3 = texto.slice(-9);\n\nretorno: "incrível"\n\nlet caractere = texto.charAt(0);\n\nretorno: "J"\n\nlet codigo = texto.charCodeAt(0);\n\nretorno: 74\n\nTemplate literals\nconst nome = "João";\nconst idade = 30;\nconst info = `Nome: ${nome}, Idade: ${idade}`;\n\nretorno: "Nome: João, Idade: 30"\n\nTemplate multiline\nconst mensagem = `\nPrimeira linha\nSegunda linha\nTerceira linha\n`;\n\nretorno: "\nPrimeira linha\nSegunda linha\nTerceira linha\n"\n\nPadronização de strings\nlet preenchido = "123".padStart(5, "0");\n\nretorno: "00123"\n\nlet preenchidoFim = "123".padEnd(5, "0");\n\nretorno: "12300"\n\nlet repetido = "abc".repeat(3);\n\nretorno: "abcabcabc"\n\nMétodos de comparação\nlet comparacao = "a".localeCompare("b");\n\nretorno: -1 (a vem antes de b)\n\nConversão de outros tipos para string\nlet numero = 123;\nlet stringNumero = String(numero);\n\nretorno: "123"\n\nlet array = [1, 2, 3];\nlet stringArray = array.toString();\n\nretorno: "1,2,3"	 Criação de strings\nStrings podem ser criadas com aspas simples (''), duplas ("") ou backticks (``)\nTemplate literals (``) permitem interpolação de variáveis e strings multiline\n\n\nMétodos de busca\n.length - Retorna o número de caracteres\n.indexOf() - Encontra a primeira posição de uma substring\n.lastIndexOf() - Encontra a última posição de uma substring\n.includes() - Verifica se contém uma substring\n.startsWith() - Verifica se começa com uma substring\n.endsWith() - Verifica se termina com uma substring\n.search() - Busca usando expressão regular\n.match() - Retorna array com correspondências de regex\n\n\nMétodos de transformação\n.toUpperCase() - Converte para maiúsculas\n.toLowerCase() - Converte para minúsculas\n.trim() - Remove espaços no início e fim\n.trimStart() - Remove espaços apenas no início\n.trimEnd() - Remove espaços apenas no fim\n.replace() - Substitui texto ou padrão\n.split() - Divide a string em um array\n\n\nExtração de substrings\n.substring() - Extrai parte da string por posição\n.slice() - Similar ao substring, mas aceita índices negativos\n.charAt() - Retorna o caractere em uma posição\n.charCodeAt() - Retorna o código ASCII do caractere\n\n\nTemplate literals\nPermitem interpolação com ${expressão}\nSuportam múltiplas linhas sem caracteres especiais\nÚteis para criar strings complexas\n\n\nPadronização de strings\n.padStart() - Preenche o início até um tamanho específico\n.padEnd() - Preenche o final até um tamanho específico\n.repeat() - Repete a string um número de vezes\n\n\nConversões\nString() - Converte outros tipos para string\n.toString() - Método alternativo para conversão\n.localeCompare() - Compara strings considerando localização	2025-01-29 20:23:12.309	619ded41-bf96-4267-865e-f6951a65b343	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.309
f70a73fc-e320-4aca-8fb5-7731a0536135	Controle de Fluxo - Condicionais	Controle de fluxo essencial em JavaScript usando if/else e switch.	\nCondicionais (if/else, switch)\nlet idade = 20;\n\nUsando if/else\nif (idade >= 18) {\nconsole.log("Maior de idade");\n} else {\nconsole.log("Menor de idade");\n}\n\nretorno: "Maior de idade"\n\nlet dia = "segunda-feira";\n\nUsando switch\nswitch (dia) {\ncase "segunda-feira":\nconsole.log("Início da semana");\nbreak;\ncase "sexta-feira":\nconsole.log("Final de semana chegando");\nbreak;\ndefault:\nconsole.log("Meio da semana");\n}\n\nretorno: "Início da semana"\n	\nCondicionais:\n- if/else: Verifica uma condição e executa um bloco de código se for verdadeira, caso contrário, executa outro bloco.\n- switch: Serve para verificar uma variável contra diferentes valores, executando um bloco de código correspondente ao valor.\n	2025-01-29 20:23:12.316	a0c8cc3b-74ad-4cb7-9454-7b217c05f4fd	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.316
f1318f7f-8d6a-4f4d-a1b2-8ed0245b43bd	Controle de Fluxo - Loops	Controle de fluxo essencial em JavaScript usando loops.	\nLoops (for, while, for...of)\nlet numeros = [1, 2, 3, 4, 5];\n\nUsando for\nfor (let i = 0; i < numeros.length; i++) {\nconsole.log(numeros[i]);\n}\n\nretorno: 1, 2, 3, 4, 5\n\nUsando while\nlet contador = 0;\nwhile (contador < 3) {\nconsole.log("Contagem:", contador);\ncontador++;\n}\n\nretorno: "Contagem: 0", "Contagem: 1", "Contagem: 2"\n\nUsando for...of\nfor (let numero of numeros) {\nconsole.log(numero);\n}\n\nretorno: 1, 2, 3, 4, 5\n	\nLoops:\n- for: Ideal para percorrer arrays ou executar um bloco de código um número específico de vezes.\n- while: Executa um bloco de código enquanto uma condição for verdadeira.\n- for...of: Utilizado para percorrer elementos de objetos iteráveis (como arrays, strings, maps, etc.). Ao contrário do for, o for...of itera diretamente sobre os valores, e não sobre os índices.\n	2025-01-29 20:23:12.318	dcba32fa-5076-4253-959d-3e5b9142844e	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.318
adf7a076-638a-4ec9-967f-d0b23ced077b	Tratamento de Erros	Como tratar erros em JavaScript usando try/catch.	\nTratamento de Erros\ntry {\nlet resultado = 10 / 0;\nif (resultado === Infinity) {\nthrow new Error("Divisão por zero!");\n}\nconsole.log(resultado);\n} catch (error) {\nconsole.log("Erro:", error.message);\n}\n\nretorno: "Erro: Divisão por zero!"\n	\nTratamento de Erros:\n- try/catch: Usado para capturar erros que podem ocorrer em tempo de execução e tratá-los sem interromper a execução do programa. O bloco try contém o código que pode gerar erros, e o bloco catch trata o erro.\n	2025-01-29 20:23:12.32	0b8987f6-171f-4caf-a3c3-1ecfc468ba48	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.32
0523dcf9-8536-43a6-91bc-4e694ef6513c	Funções - Async/Await	Funções essenciais em JavaScript, incluindo async/await.	\nAsync/Await\nasync function obterDados(url: string): Promise<string> {\nconst dados = await buscarDados(url);\nreturn dados;\n}\n\nasync function exibirDados() {\nconst mensagem = await obterDados("https:api.exemplo.com");\nconsole.log(mensagem);\n}\nchamada da função\nexibirDados();\nretorno (após 2 segundos): "Dados recebidos de https:api.exemplo.com"\n	\nAsync/Await:\n- Async/Await é uma forma mais moderna de trabalhar com operações assíncronas. Com `async`, a função sempre retorna uma Promise, e com `await`, podemos esperar o resultado de uma Promise antes de continuar a execução do código.\n	2025-01-29 20:23:12.321	1ec601a3-0a2a-42cc-883d-123d756f9266	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.321
4d8eefb6-6768-4182-a1e5-0cd3f833c365	Funções - Declaração de Funções	Funções essenciais em JavaScript, incluindo declaração de funções tradicionais.	\nDeclaração de Funções\nfunction saudacao(nome: string): string {\nreturn `Olá, ${nome}!`;\n}\nChamada da função\nlet mensagem = saudacao("Maria");\n\nretorno: "Olá, Maria!"\n	\nDeclaração de Funções:\n- Funções tradicionais são declaradas com a palavra-chave `function`. Elas possuem um nome, podem receber parâmetros e retornar valores. São úteis quando a função precisa ser reutilizada em várias partes do código.\n	2025-01-29 20:23:12.329	34b5fb0c-79f9-4ba3-b071-ac90483f5071	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.329
a4d68c25-2e2f-437c-b9de-6e8569a19bde	Arrow Functions	Sintaxe moderna para funções em JavaScript	Arrow function básica\nconst soma = (a, b) => a + b;\nconsole.log(soma(5, 3));  retorno: 8\n\nArrow function com múltiplas linhas\nconst multiplicar = (a, b) => {\nconst resultado = a * b;\nreturn resultado;\n};\n\nArrow function sem parâmetros\nconst saudacao = () => "Olá!";\n\nArrow function com um parâmetro\nconst dobrar = x => x * 2;\nParênteses opcionais com um parâmetro\n\nArrow function retornando objeto\nconst criarUsuario = (nome, idade) => ({\nnome: nome,\nidade: idade\n});\n\nArrow function s em arrays\nconst numeros = [1, 2, 3, 4, 5];\nconst dobrados = numeros.map(n => n * 2);\n\nretorno: [2, 4, 6, 8, 10]\n\nComo callback\nsetTimeout(() => {\nconsole.log("Executado após 1 segundo");\n}, 1000);\n\nArrow function com default parameters\nconst somar = (a = 0, b = 0) => a + b;\nconsole.log(somar());      retorno: 0\nconsole.log(somar(5));     retorno: 5\nconsole.log(somar(5, 3));  retorno: 8\n\nArrow function em métodos de array\nconst frutas = ['maçã', 'banana', 'uva'];\nconst maiusculas = frutas.map(fruta => fruta.toUpperCase());\n\nretorno: ['MAÇÃ', 'BANANA', 'UVA']\n\nFiltrando com arrow function\nconst numeros = [1, 2, 3, 4, 5, 6];\nconst pares = numeros.filter(num => num % 2 === 0);\n\nretorno: [2, 4, 6]	Arrow Functions são uma forma mais concisa de escrever funções em JavaScript,\nintroduzidas no ES6. Elas oferecem uma sintaxe mais limpa e um comportamento específico do this.\n\nElementos principais:\n- Sintaxe concisa: Menos código para funções simples\n- this léxico: Mantém o contexto do escopo envolvente\n- Retorno implícito: Uma linha retorna automaticamente\n- Parâmetros: Flexibilidade na declaração\n- Callbacks: Ideal para funções de callback\n- Métodos de array: Perfeita para map, filter, reduce	2025-01-29 20:23:12.33	30f9f537-67dd-44bb-8b61-22102e45760f	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.33
dccdca3b-e73d-4aba-b2fd-e0b17cf8d9a9	Funções - Recursivas	Funções essenciais em JavaScript, incluindo funções recursivas.	\nFunções Recursivas\nfunction fatorial(n: number): number {\nif (n <= 1) return 1;\nreturn n * fatorial(n - 1);\n}\nChamada da função\nlet resultadoFatorial = fatorial(5);\n\nretorno: 120\n	\nFunções Recursivas:\n- Funções recursivas são aquelas que se chamam dentro de si mesmas. Elas são frequentemente usadas para resolver problemas que podem ser decompostos em subproblemas, como o cálculo de um fatorial.\n	2025-01-29 20:23:12.332	7b3ecc68-8ea2-4d61-b746-727c2a2d13bc	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.332
13a7404d-5111-4064-8cc8-8a06d6c19e7a	Funções Anônimas em JavaScript	Criando e usando funções anônimas (funções sem nome)	Função anônima básica\nconst saudacao = function() {\nconsole.log("Olá!");\n};\nuso: saudacao();\n\nFunção anônima com parâmetros\nconst soma = function(a, b) {\nreturn a + b;\n};\nuso: console.log(soma(5, 3));  retorno: 8\n\nFunção anônima como callback\nsetTimeout(function() {\nconsole.log("Executado após 2 segundos");\n}, 2000);\n\nIIFE (Immediately Invoked Function Expression)\n(function() {\nconst mensagem = "Esta função executa imediatamente";\nconsole.log(mensagem);\n})();\n\nFunção anônima em evento\nbutton.addEventListener('click', function(event) {\nconsole.log("Botão clicado!");\nevent.preventDefault();\n});\n\nFunção anônima com arrow function\nconst multiplicar = (a, b) => a * b;\nuso: console.log(multiplicar(4, 2));  retorno: 8\n\nFunção anônima como método de objeto\nconst calculadora = {\nsomar: function(a, b) {\nreturn a + b;\n},\nSintaxe curta em objetos\nsubtrair(a, b) {\nreturn a - b;\n}\n};\nuso: console.log(calculadora.somar(5, 3));  retorno: 8	Funções anônimas são funções sem nome que podem ser atribuídas a variáveis ou passadas\ncomo argumentos. São fundamentais para callbacks e programação funcional em JavaScript.\n\nElementos principais:\n- Expressão de função: Função atribuída a uma variável\n- Arrow Function: Sintaxe curta (=>) para funções anônimas\n- Callbacks: Funções passadas como argumentos\n- IIFE: Funções auto-executáveis\n- Event Handlers: Usadas em eventos\n- Métodos de objeto: Funções como propriedades	2025-01-29 20:23:12.334	d649baef-be20-4cf9-94bf-dcdacd28cd7b	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.334
401a8af9-3568-49bb-9260-0a3565a38ddd	Funções - Callbacks e Promises	Funções essenciais em JavaScript, incluindo callbacks.	\nCallbacks\nfunction fetchDados(url: string, callback: (dados: string) => void): void {\nsetTimeout(() => {\ncallback(`Dados recebidos de ${url}`);\n}, 2000);\n}\n\nfetchDados("https:api.exemplo.com", (mensagem) => {\nconsole.log(mensagem);\n});\nretorno (após 2 segundos): "Dados recebidos de https:api.exemplo.com"\n\nPromises\nfunction buscarDados(url: string): Promise<string> {\nreturn new Promise((resolve, reject) => {\nsetTimeout(() => {\nresolve(`Dados recebidos de ${url}`);\n}, 2000);\n});\n}\n\nbuscarDados("https:api.exemplo.com")\n.then((dados) => console.log(dados))\n.catch((erro) => console.error(erro));\nretorno (após 2 segundos): "Dados recebidos de https:api.exemplo.com"\n	\nCallbacks:\n- Callbacks são funções passadas como argumento para outra função e executadas posteriormente, geralmente após a conclusão de uma tarefa assíncrona. No exemplo, usamos `setTimeout` para simular uma operação assíncrona e chamar o callback após um tempo determinado.\n\nPromises:\n- Promises são usadas para representar operações assíncronas em JavaScript. Elas têm três estados: pending, fulfilled e rejected. Utilizamos `.then()` para tratar a resolução e `.catch()` para capturar erros.\n	2025-01-29 20:23:12.336	15bece6a-b53c-4a72-82fc-13380075cc73	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.336
28ed55f5-7c0c-4463-808c-e3c796fbab2e	Conceitos Avançados - Closures	Conceitos avançados importantes em JavaScript, incluindo closures.	\nClosures\nfunction criarContador() {\nlet contador = 0;\nreturn function incrementar() {\ncontador++;\nreturn contador;\n};\n}\n\nconst contador1 = criarContador();\nconst contador2 = criarContador();\n\nconsole.log(contador1());  retorno: 1\nconsole.log(contador1());  retorno: 2\nconsole.log(contador2());  retorno: 1\n	\nClosures:\n- Closures ocorrem quando uma função é capaz de "lembrar" e acessar variáveis de seu escopo de criação, mesmo após a função externa ter sido executada. No exemplo, a função incrementar tem acesso à variável contador, mesmo após a execução de criarContador(). Isso é possível porque incrementar é uma closure.\n	2025-01-29 20:23:12.337	18a60ad0-fd43-41fc-9ff2-f2a936e798b7	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.337
e802bcc7-ba90-48d5-bf79-2abfb7c328cd	NPM e Gerenciamento de Pacotes	Gerenciando dependências com NPM (Node Package Manager)	\nIniciar um projeto\nnpm init -y\n\npackage.json básico\n{\n"name": "meu-projeto",\n"version": "1.0.0",\n"dependencies": {\n"express": "^4.18.2"\n},\n"devDependencies": {\n"nodemon": "^3.0.1"\n},\n"scripts": {\n"start": "node index.js",\n"dev": "nodemon index.js"\n}\n}	\n- Gerencia dependências do projeto\n- Executa scripts definidos no package.json\n- Controla versões dos pacotes\n- Gerencia dependências de desenvolvimento\n- Permite publicar pacotes\n- Executa auditoria de segurança\n\nComandos NPM comuns\nnpm install express\n- Instala dependência\nnpm install -D nodemon\n- Instala dependências de desenvolvimento\nnpm run dev\n- Executa script\nnpm update\n- Atualiza pacotes\nnpm list\n- Lista dependências\nnpm audit\n- Verifica vulnerabilidades                   	2025-01-29 20:23:12.454	97ae8670-0a18-4068-82ee-b02adefd4acb	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.454
b035c6a7-d214-42b4-81ec-7113ab18e46b	Bind, Call e Apply em JavaScript	Controlando o contexto 'this' e executando funções com diferentes contextos	Exemplo com método bind()\nconst pessoa = {\nnome: "João",\nsaudacao: function() {\nreturn "Olá, eu sou " + this.nome;\n}\n};\n\nconst outraPessoa = {\nnome: "Maria"\n};\n\nCriando nova função com bind\nconst saudacaoMaria = pessoa.saudacao.bind(outraPessoa);\nconsole.log(saudacaoMaria());\n\nretorno: "Olá, eu sou Maria"\n\nExemplo com call()\nfunction mostrarDetalhes(idade, cidade) {\nconsole.log(`${this.nome} tem ${idade} anos e mora em ${cidade}`);\n}\n\nmostrarDetalhes.call(pessoa, 30, "São Paulo");\n\nretorno: "João tem 30 anos e mora em São Paulo"\n\nExemplo com apply()\nconst args = [25, "Rio de Janeiro"];\nmostrarDetalhes.apply(outraPessoa, args);\n\nretorno: "Maria tem 25 anos e mora em Rio de Janeiro"\n\nExemplo prático com bind\nclass Contador {\nconst ructor() {\nthis.count = 0;\nGarantindo que 'this' seja sempre Contador\nthis.incrementar = this.incrementar.bind(this);\n}\n\nincrementar() {\nthis.count++;\nconsole.log(this.count);\n}\n}\n\nconst meuContador = new Contador();\nconst btnIncrement = document.getElementById('btn');\nbtnIncrement.addEventListener('click', meuContador.incrementar);\n\nExemplo com call em herança\nfunction Animal(nome) {\nthis.nome = nome;\n}\n\nfunction Cachorro(nome, raca) {\nAnimal.call(this, nome);\nthis.raca = raca;\n}\n\nExemplo com apply para valores máximos/mínimos\nconst numeros = [5, 6, 2, 3, 7];\nconst max = Math.max.apply(null, numeros);\n\nretorno: 7\n\nComparação entre os três\nfunction exibirInfo(a, b) {\nconsole.log(`${this.nome}: ${a} e ${b}`);\n}\n\nUsando bind\nconst exibirJoao = exibirInfo.bind(pessoa);\nexibirJoao("dado1", "dado2");\n\nretorno: "João: dado1 e dado2"\n\nUsando call\nexibirInfo.call(pessoa, "dado1", "dado2");\n\nretorno: "João: dado1 e dado2"\n\nUsando apply\nexibirInfo.apply(pessoa, ["dado1", "dado2"]);\n\nretorno: "João: dado1 e dado2"	Bind, Call e Apply são métodos fundamentais em JavaScript para controlar o contexto\n'this' e executar funções com diferentes objetos. Cada um tem seu propósito específico.\n\nElementos principais:\n- bind(): Cria nova função com 'this' fixo\n- call(): Executa função com 'this' e argumentos individuais\n- apply(): Executa função com 'this' e array de argumentos\n- Contexto (this): Define o objeto de referência\n- Event listeners: Comum usar bind em eventos\n- Herança: call/apply em construtores\n- Borrowed methods: Usar métodos de outros objetos	2025-01-29 20:23:12.339	1f76ee87-60cf-42d5-829d-f77a410835ea	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.339
c22a1309-f4bd-440c-9f62-fed59c2b2ebd	Conceitos Avançados - Hoisting	Conceitos avançados importantes em JavaScript, incluindo hoisting.	\nHoisting\nconsole.log(nome);  retorno: undefined\nvar nome = "João";\n\nExemplo com let\ntry {\nconsole.log(idade);  lança erro: Cannot access 'idade' before initialization\nlet idade = 25;\n} catch (e) {\nconsole.log(e.message);\n}\n	\nHoisting:\n- Hoisting é um comportamento do JavaScript onde variáveis e funções são movidas para o topo de seu contexto (função ou escopo global) durante a execução. No exemplo, a variável nome é "elevada" para o topo, mas como foi declarada com var, seu valor será undefined até que seja atribuído. Já com let, ocorre um erro se tentarmos acessar a variável antes da inicialização, devido ao conceito de temporal dead zone (TDZ).\n	2025-01-29 20:23:12.347	3709480f-fbc3-49ba-b1a0-d74cbc447687	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.347
761bf4bd-5c52-44e1-bff8-3c7f92ac9a80	Conceitos Avançados - Event Loop e Assíncrono	Conceitos avançados importantes em JavaScript, incluindo o event loop e o comportamento assíncrono.	\nEvent Loop e Assíncrono\nconsole.log("Início");\n\nsetTimeout(() => {\nconsole.log("Execução do setTimeout");\n}, 0);\n\nconsole.log("Fim");\n\nretorno: "Início", "Fim", "Execução do setTimeout"\n	\nEvent Loop e Assíncrono:\n- O event loop é um mecanismo que permite que JavaScript execute operações assíncronas, como callbacks e promessas, sem bloquear o fluxo de execução do programa. No exemplo, a função setTimeout é executada de forma assíncrona, mesmo com o tempo de 0 ms. Ela é colocada na fila de tarefas e só será executada depois que o call stack (pilha de execução) estiver vazio. Portanto, a sequência de execução é: "Início", "Fim", e então, após a execução do código síncrono, "Execução do setTimeout".\n	2025-01-29 20:23:12.349	a8a6f331-fd65-46e3-a679-fabc2620683c	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.349
d88d7428-8e4e-49b4-b358-1a3f54fcd931	Prototype e Herança em JavaScript	Entendendo o sistema de protótipos e herança em JavaScript	Construtor de objeto usando prototype\nfunction Animal(nome) {\nthis.nome = nome;\n}\n\nAnimal.prototype.fazerSom = function() {\nreturn "Som genérico";\n};\n\nHerança prototipal\nfunction Cachorro(nome, raca) {\nAnimal.call(this, nome);\nthis.raca = raca;\n}\n\nEstabelecendo a cadeia de protótipos\nCachorro.prototype = Object.create(Animal.prototype);\nCachorro.prototype.const ructor = Cachorro;\n\nSobrescrevendo método do protótipo\nCachorro.prototype.fazerSom = function() {\nreturn "Au au!";\n};\n\nExemplo de uso\nconst animal = new Animal("Animal");\nconsole.log(animal.fazerSom());   "Som genérico"\n\nconst rex = new Cachorro("Rex", "Vira-lata");\nconsole.log(rex.fazerSom());      "Au au!"\n\nVerificando a cadeia de protótipos\nconsole.log(rex instanceof Cachorro);   true\nconsole.log(rex instanceof Animal);     true\n\nAdicionando métodos dinamicamente\nAnimal.prototype.comer = function() {\nreturn `${this.nome} está comendo`;\n};\n\nTodos os objetos herdam o novo método\nconsole.log(rex.comer());   "Rex está comendo"\n\nObject.create com propriedades\nconst protoGato = {\nmiar() {\nreturn "Miau!";\n}\n};\n\nconst gato = Object.create(protoGato, {\nnome: {\nvalue: 'Felix',\nwritable: true\n}\n});	Prototypes são o mecanismo de herança nativo do JavaScript, permitindo objetos\ncompartilharem propriedades e métodos através de uma cadeia de protótipos.\n\nElementos principais:\n- prototype: Objeto que serve como template\n- __proto__: Referência ao protótipo\n- Constructor: Função que cria objetos\n- Herança: Reutilização de código\n- Object.create(): Cria objetos com protótipo específico\n- instanceof: Verifica cadeia de protótipos	2025-01-29 20:23:12.351	974e4c3c-4056-4904-b51a-ef8fe6c5e801	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.351
f1b059cc-de7f-48f3-90e9-7818c9d237b9	Iteradores e Generators	Criando e usando iteradores e generators em JavaScript	Iterador personalizado\nconst meuIterador = {\ndados: [1, 2, 3, 4],\nposicaoAtual: 0,\nnext() {\nreturn {\ndone: this.posicaoAtual >= this.dados.length,\nvalue: this.dados[this.posicaoAtual++]\n};\n}\n};\n\nGenerator básico\nfunction* contador() {\nyield 1;\nyield 2;\nyield 3;\n}\n\nconst gen = contador();\nconsole.log(gen.next());  { value: 1, done: false }\nconsole.log(gen.next());  { value: 2, done: false }\nconsole.log(gen.next());  { value: 3, done: false }\nconsole.log(gen.next());  { value: undefined, done: true }\n\nGenerator infinito\nfunction* geradorID() {\nlet id = 1;\nwhile(true) {\nyield id++;\n}\n}\n\nGenerator com yield*\nfunction* let ras() {\nyield 'a';\nyield 'b';\n}\n\nfunction* numeros() {\nyield 1;\nyield* let ras();     delegando para outro generator\nyield 2;\n}\n\nAsync Generator\nasync function* streamDados() {\nconst dados = [1, 2, 3];\nfor(let item of dados) {\nawait new Promise(resolve => setTimeout(resolve, 1000));\nyield item;\n}\n}\n\nUsando async generator\n(async () => {\nfor await (const item of streamDados()) {\nconsole.log(item);   log a cada 1 segundo\n}\n})();	Iteradores e Generators são recursos poderosos para controlar o fluxo de dados de\nforma eficiente e criar sequências sob demanda.\n\nElementos principais:\n- Iteradores: Interface para percorrer dados\n- Generators: Funções que geram sequências\n- yield: Pausa execução e retorna valor\n- next(): Obtém próximo valor\n- Async Generators: Iteração assíncrona\n- yield*: Delega para outro generator	2025-01-29 20:23:12.353	65791507-ff32-426c-902b-c7ddaeecf2d3	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.353
d7f4273c-565d-4c20-928f-206816882e94	Promises Avançadas	Técnicas avançadas com Promises em JavaScript	Criando Promise personalizada\nconst minhaPromise = new Promise((resolve, reject) => {\nsetTimeout(() => {\nconst sucesso = true;\nif (sucesso) {\nresolve("Operação concluída");\n} else {\nreject(new Error("Falha na operação"));\n}\n}, 1000);\n});\n\nEncadeamento de Promises\nminhaPromise\n.then(resultado => resultado.toUpperCase())\n.then(resultado => console.log(resultado))\n.catch(erro => console.error(erro))\n.finally(() => console.log("Finalizado"));\n\nPromise.all\nconst promises = [\nfetch('url1'),\nfetch('url2'),\nfetch('url3')\n];\n\nPromise.all(promises)\n.then(resultados => {\nTodos sucesso\n})\n.catch(erro => {\nQualquer erro\n});\n\nPromise.race\nPromise.race([\nfetch('url1'),\nnew Promise((_, reject) =>\nsetTimeout(() => reject(new Error('Timeout')), 5000)\n)\n])\n.then(resultado => console.log('Resposta rápida'))\n.catch(erro => console.log('Timeout ou erro'));\n\nPromise.allSettled\nPromise.allSettled([\nPromise.resolve(1),\nPromise.reject('erro'),\nPromise.resolve(3)\n])\n.then(resultados => {\nArray com status de todas as promises\n});\n\nAsync/Await com tratamento de erro\nasync function exemploAsyncAwait() {\ntry {\nconst resultado1 = await fetch('url1');\nconst resultado2 = await fetch('url2');\nreturn [resultado1, resultado2];\n} catch (erro) {\nconsole.error('Erro:', erro);\nthrow erro;\n}\n}\n\nPromise com cancelamento\nfunction promiseCancelavel() {\nlet cancelar;\n\nconst promise = new Promise((resolve, reject) => {\ncancelar = () => reject('Cancelado');\n... lógica normal\n});\n\nreturn { promise, cancelar };\n}	Promises avançadas permitem gerenciar operações assíncronas complexas de forma\nelegante e controlada.\n\nElementos principais:\n- Promise.all: Executa múltiplas promises em paralelo\n- Promise.race: Retorna primeira promise concluída\n- Promise.allSettled: Status de todas as promises\n- Encadeamento: Sequência de operações\n- Cancelamento: Interromper operações\n- Error handling: Tratamento de erros robusto	2025-01-29 20:23:12.355	c447188a-b75d-4c88-8a53-3b55287b5070	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.355
3742f25d-e211-4465-a4b7-dbcbcc96c884	Introdução ao DOM	Entendendo o Document Object Model (DOM) em JavaScript	Estrutura básica do DOM\ndocument.documentElement   elemento <html>\ndocument.head             elemento <head>\ndocument.body             elemento <body>\n\nNavegando pelo DOM\nconst pai = elemento.parentNode;\nconst filhos = elemento.childNodes;\nconst primeiro = elemento.firstChild;\nconst ultimo = elemento.lastChild;\nconst proximo = elemento.nextSibling;\nconst anterior = elemento.previousSibling;\n\nTipos de nós\nconsole.log(elemento.nodeType);   1: Elemento, 3: Texto\nconsole.log(elemento.nodeName);   Tag name em maiúsculo\nconsole.log(elemento.nodeValue);  Conteúdo do nó\n\nPropriedades do documento\nconsole.log(document.title);      Título da página\nconsole.log(document.URL);        URL complet a\nconsole.log(document.domain);     Domínio do site\nconsole.log(document.charset);    Codificação\n\nVerificando estado do documento\ndocument.addEventListener('DOMContentLoaded', () => {\nconsole.log('DOM carregado');\n});\n\nAcessando elemento raiz\nconst root = document.documentElement;\nconsole.log(root.lang);          Idioma do documento	O DOM (Document Object Model) é uma interface de programação para documentos HTML/XML.\nRepresenta a página como uma árvore de objetos que pode ser manipulada via JavaScript.\n\nElementos principais:\n- document: Objeto raiz do DOM\n- Nós: Elementos, texto, comentários\n- Navegação: Entre nós pai/filho/irmãos\n- Propriedades: Acesso a informações\n- Eventos: Resposta a ações do usuário\n- Estados: Carregamento e prontidão	2025-01-29 20:23:12.364	c5bd59e1-4641-458a-b246-9d13dab5b815	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.364
014eeeaf-6949-4d27-9731-4b0b00c8c047	Seletores DOM	Diferentes formas de selecionar elementos no DOM	Selet or por ID\nconst elemento = document.getElementById('meuId');\n\nSelet ores por classe\nconst elementos = document.getElementsByClassName('minhaClasse');\nconst modernos = document.querySelector('.minhaClasse');\nconst todos = document.querySelectorAll('.minhaClasse');\n\nSelet ores por tag\nconst divs = document.getElementsByTagName('div');\nconst primeiraDiv = document.querySelector('div');\nconst todasDivs = document.querySelectorAll('div');\n\nSelet ores complexos\nconst nested = document.querySelector('div.classe > p');\nconst multiplos = document.querySelectorAll('p, span');\nconst filhos = document.querySelectorAll('ul > li');\n\nSelet ores por atributo\nconst porAtributo = document.querySelector('[data-test]');\nconst valorAtributo = document.querySelector('[type="text"]');\n\nEncontrando elementos filhos\nconst pai = document.querySelector('.container');\nconst filhosDiretos = pai.children;\nconst todosDescendentes = pai.querySelectorAll('*');\n\nVerificando existência\nconst existe = document.querySelector('.classe') !== null;\n\nIterando sobre resultados\nconst items = document.querySelectorAll('li');\nitems.forEach(item => {\nconsole.log(item.textContent);\n});	Seletores DOM permitem encontrar e manipular elementos específicos na página.\nDiferentes métodos oferecem flexibilidade para selecionar elementos de várias formas.\n\nElementos principais:\n- getElementById: Seleção por ID única\n- querySelector: Seletor CSS moderno\n- querySelectorAll: Múltiplos elementos\n- getElementsByClassName: Por classe\n- getElementsByTagName: Por tag\n- Seletores aninhados: Relações pai/filho	2025-01-29 20:23:12.367	e0b58ecc-fdc5-46a2-ab2d-b05cdb466983	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.367
8bd7ab5d-84b8-4c83-a9d8-354a1dff6df4	Manipulação de Eventos	Trabalhando com eventos do DOM em JavaScript	Adicionando event listener\nelemento.addEventListener('click', function(event) {\nconsole.log('Clicado!');\n});\n\nArrow function e evento\nelemento.addEventListener('mouseover', (e) => {\ne.target.style.color = 'red';\n});\n\nRemovendo event listener\nfunction handler(e) {\nconsole.log('Manipulado!');\n}\nelemento.addEventListener('click', handler);\nelemento.removeEventListener('click', handler);\n\nEventos comuns\ndocument.addEventListener('DOMContentLoaded', () => {});\nelemento.addEventListener('click', () => {});\nelemento.addEventListener('mouseenter', () => {});\nelemento.addEventListener('mouseleave', () => {});\nelemento.addEventListener('submit', (e) => {\ne.preventDefault();  Previne comportamento padrão\n});\n\nPropagação de eventos\nelemento.addEventListener('click', (e) => {\ne.stopPropagation();  Para propagação\n}, true);  Capture phase\n\nDelegação de eventos\ndocument.querySelector('ul').addEventListener('click', (e) => {\nif (e.target.tagName === 'LI') {\nconsole.log('Li clicado:', e.target.textContent);\n}\n});\n\nEventos personalizados\nconst evento = new CustomEvent('meuEvento', {\ndetail: { mensagem: 'Olá!' }\n});\nelemento.dispatchEvent(evento);	Eventos permitem que o JavaScript responda a ações do usuário e mudanças na página.\nSão fundamentais para criar interatividade em aplicações web.\n\nElementos principais:\n- addEventListener: Registra handlers\n- removeEventListener: Remove handlers\n- event object: Informações do evento\n- Propagação: Bubbling e capturing\n- Delegação: Eventos em elementos dinâmicos\n- preventDefault: Controle de comportamento	2025-01-29 20:23:12.369	52cb2f82-790a-45bd-9816-fe7a81bf505d	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.369
d36b535b-a20f-457c-8714-003feecdbfdf	Variáveis de Ambiente	Trabalhando com variáveis de ambiente no Node.js	\nArquivo .env\nPORT=3000\nDATABASE_URL=mongodb://localhost/myapp\nAPI_KEY=chave123\n\nUsando dotenv para carregar var iáveis\nrequire('dotenv').config();\n\nAcessando var iáveis de ambiente\nconst port = process.env.PORT || 3000;\nconst dbUrl = process.env.DATABASE_URL;\nconst apiKey = process.env.API_KEY;\n\nVerificando ambiente\nconst isProduction = process.env.NODE_ENV === 'production';\n\nConfiguração baseada no ambiente\nif (isProduction) {\nconsole.log('Rodando em produção');\n} else {\nconsole.log('Rodando em desenvolvimento');\n}\n\nArgumentos da linha de comando\nconsole.log(process.argv);\n\nretorno: ['node', 'script.js', 'arg1', 'arg2']	\n- Armazenam configurações sensíveis\n- Variam entre ambientes (dev/prod)\n- Acessíveis via process.env\n- Geralmente definidas em arquivo .env\n- Não devem ser versionadas (git)\n- Podem ser definidas no sistema operacional	2025-01-29 20:23:12.455	2db6ecc8-6150-477f-bf96-6e76dc323fb3	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.455
d908278f-c841-45ec-b075-07cfd9c0ce7c	Manipulação de Elementos	Criando e modificando elementos do DOM	Criando elementos\nconst div = document.createElement('div');\nconst texto = document.createTextNode('Olá Mundo');\n\nAdicionando conteúdo\ndiv.textContent = 'Texto na div';\ndiv.innerHTML = '<span>HTML na div</span>';\n\nAdicionando ao DOM\nparent.appendChild(div);\nparent.insertBefore(div, referenceNode);\nparent.prepend(div);   Adiciona no início\nparent.append(div);    Adiciona no final\n\nRemovendo elementos\nelemento.remove();\nparent.removeChild(elemento);\n\nClonando elementos\nconst clone = elemento.cloneNode(true);  true para deep clone\n\nSubstituindo elementos\nparent.replaceChild(novoElemento, antigoElemento);\n\nManipulando atributos\nelemento.setAttribute('class', 'minhaClasse');\nelemento.getAttribute('id');\nelemento.hasAttribute('data-test');\nelemento.removeAttribute('style');\n\nData attributes\nelemento.dataset.info = 'valor';\nconsole.log(elemento.dataset.info);\n\nManipulando conteúdo\nelemento.textContent = 'Novo texto';\nelemento.innerHTML = '<b>HTML</b>';\nelemento.innerText = 'Texto visível';	A manipulação de elementos permite criar, modificar e remover elementos do DOM\ndinamicamente, essencial para páginas web interativas.\n\nElementos principais:\n- createElement: Cria novos elementos\n- appendChild/prepend: Adiciona elementos\n- remove/removeChild: Remove elementos\n- cloneNode: Duplica elementos\n- setAttribute: Modifica atributos\n- textContent/innerHTML: Modifica conteúdo	2025-01-29 20:23:12.371	8d975bc6-0ba6-47d4-86d7-d9fc95d11c77	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.371
713e6425-15fe-46c6-b82f-ef44c580906d	Classes e Estilização	Manipulando classes e estilos de elementos DOM	Manipulando classes\nelemento.classList.add('novaClasse');\nelemento.classList.remove('velhaClasse');\nelemento.classList.toggle('classe');\nelemento.classList.contains('classe');\nelemento.classList.replace('velha', 'nova');\n\nMúltiplas classes\nelemento.classList.add('classe1', 'classe2');\nelemento.className = 'classe1 classe2';\n\nManipulando estilos inline\nelemento.style.backgroundColor = 'red';\nelemento.style.fontSize = '16px';\nelemento.style.marginTop = '10px';\n\nObtendo estilos computados\nconst estilo = window.getComputedStyle(elemento);\nconsole.log(estilo.backgroundColor);\n\nManipulando CSS customizado\nelemento.style.setProperty('--minha-cor', 'blue');\nelemento.style.getPropertyValue('--minha-cor');\n\nAlterando visibilidade\nelemento.style.display = 'none';\nelemento.style.visibility = 'hidden';\n\nAnimações com classes\nelemento.classList.add('animate');\nsetTimeout(() => {\nelemento.classList.remove('animate');\n}, 1000);\n\nTrabalhando com dimensões\nconst altura = elemento.offsetHeight;\nconst largura = elemento.offsetWidth;\nconst posicaoTopo = elemento.offsetTop;\nconst posicaoEsquerda = elemento.offsetLeft;	Classes e estilos permitem modificar a aparência e comportamento visual dos elementos\ndinamicamente via JavaScript.\n\nElementos principais:\n- classList: Gerencia classes\n- style: Estilos inline\n- getComputedStyle: Estilos aplicados\n- CSS Variables: Propriedades customizadas\n- Dimensões: Tamanho e posição\n- Animações: Transições via classe	2025-01-29 20:23:12.374	9cafdf73-a105-4d48-83d5-28dfb2a037f5	1c889291-fc8c-48c8-8de2-d343294427e5	2025-01-29 20:23:12.374
a65b669e-a8f4-4abd-84ec-3057aa2af09b	Estrutura de Projeto	Organização de diretórios e arquivos em um projeto NestJS	projeto-exemplo/\n├── src/\n│   ├── main.ts          # Ponto de entrada da aplicação\n│   ├── app.module.ts    # Módulo raiz da aplicação\n│   ├── app.controller.ts # Controlador principal\n│   ├── app.service.ts   # Serviço principal\n│   └── modules/         # Diretório para módulos específicos\n│       └── usuarios/\n│           ├── usuarios.module.ts\n│           ├── usuarios.controller.ts\n│           └── usuarios.service.ts\n├── test/                # Diretórios de testes\n├── nest-cli.json        # Configurações do NestJS\n└── tsconfig.json        # Configurações do TypeScript	A estrutura de um projeto NestJS segue uma organização modular e bem definida:\n\nPrincipais componentes:\n- src/main.ts: Ponto de entrada da aplicação\n- src/app.module.ts: Módulo raiz que importa todos os outros\n- Diretório modules/: Agrupa módulos específicos da aplicação\n\nCada módulo geralmente contém:\n1. Módulo (.module.ts)\n2. Controlador (.controller.ts)\n3. Serviço (.service.ts)\n\nBenefícios desta estrutura:\n- Organização clara\n- Separação de responsabilidades\n- Facilidade de manutenção e escalabilidade\n	2025-01-29 20:23:12.408	b99de24a-65d0-4a1c-b35d-c5d33c768d13	29682086-bbe4-46d1-8f91-35eb6c7c8b96	2025-01-29 20:23:12.408
1162527f-5386-427e-b800-f3f0aa26aa91	Módulos no NestJS	Criação e configuração de módulos no NestJS	import { Module } from '@nestjs/common';\nimport { UsuariosController } from './usuarios.controller';\nimport { UsuariosService } from './usuarios.service';\n\n@Module({\ncontrollers: [UsuariosController],  Controladores do módulo\nproviders: [UsuariosService],       Serviços/Providers\nimports: [],                         Módulos importados\nexports: [UsuariosService]           Serviços exportados\n})\nexport class UsuariosModule {}\n\nExemplo de módulo raiz\n@Module({\nimports: [UsuariosModule, OutroModule],\ncontrollers: [AppController],\nproviders: [AppService],\n})\nexport class AppModule {}	Módulos no NestJS são classes decoradas com @Module() que organizam componentes relacionados.\n\nPrincipais elementos de um módulo:\n- controllers: Controladores associados ao módulo\n- providers: Serviços e injetáveis\n- imports: Outros módulos necessários\n- exports: Serviços disponibilizados para outros módulos\n\nCaracterísticas importantes:\n1. Encapsulam um conjunto coeso de funcionalidades\n2. Permitem organização modular da aplicação\n3. Facilitam a injeção de dependências\n4. Promovem baixo acoplamento entre componentes	2025-01-29 20:23:12.41	53f968bb-c0e0-4656-8db1-c528a766f5a4	29682086-bbe4-46d1-8f91-35eb6c7c8b96	2025-01-29 20:23:12.41
284553cb-2266-4f80-86df-60562551c9bf	Rotas e Controladores	Definição de rotas e controladores no NestJS	import { Controller, Get, Post, Body } from '@nestjs/common';\nimport { UsuariosService } from './usuarios.service';\n\n@Controller('usuarios')  Prefixo de rota\nexport class UsuariosController {\nconst ructor(\nprivate usuariosService: UsuariosService\n) {}\n\nRota GET /usuarios\n@Get()\nlistarTodos() {\nreturn this.usuariosService.listarTodos();\n}\n\nRota POST /usuarios\n@Post()\ncriarUsuario(@Body() dadosUsuario: CriarUsuarioDto) {\nreturn this.usuariosService.criar(dadosUsuario);\n}\n\nRota GET /usuarios/:id\n@Get(':id')\nbuscarPorId(@Param('id') id: string) {\nreturn this.usuariosService.buscarPorId(id);\n}\n}	Controladores no NestJS gerenciam rotas e requisições HTTP.\n\nPrincipais decorators de rota:\n- @Controller(): Define o prefixo base para rotas\n- @Get(): Manipula requisições GET\n- @Post(): Manipula requisições POST\n- @Put(): Manipula requisições PUT\n- @Delete(): Manipula requisições DELETE\n\nCaracterísticas:\n1. Utilizam decorators para definir rotas\n2. Injetam serviços via construtor\n3. Podem usar decorators para capturar parâmetros:\n- @Body(): Corpo da requisição\n- @Param(): Parâmetros de rota\n- @Query(): Parâmetros de consulta	2025-01-29 20:23:12.412	b56831ce-a3dc-4be4-a219-6b1e8c941282	29682086-bbe4-46d1-8f91-35eb6c7c8b96	2025-01-29 20:23:12.412
fdee9317-982d-407e-86bc-1a26ae30eeb1	Parâmetros de Rota	Manipulação de parâmetros em rotas NestJS	import { Controller, Get, Param, Query } from '@nestjs/common';\n\n@Controller('produtos')\nexport class ProdutosController {\nParâmetro de rota simples\n@Get(':id')\nbuscarProduto(@Param('id') id: string) {\nreturn { mensagem: Buscando produto S{id} };\n}\n\nMúltiplos parâmetros\n@Get('categoria/:categoria/marca/:marca')\nbuscarPorCategoriaEMarca(\n@Param('categoria') categoria: string,\n@Param('marca') marca: string\n) {\nreturn {\ncategoria,\nmarca\n};\n}\n\nParâmetros de consulta\n@Get()\nlistarProdutos(\n@Query('pagina') pagina = 1,\n@Query('limite') limite = 10\n) {\nreturn {\npagina,\nlimite,\nprodutos: []\n};\n}\n}	Parâmetros de rota permitem capturar valores dinâmicos em URLs.\n\nTipos de parâmetros:\n1. Parâmetros de Rota (@Param)\n- Capturados diretamente na URL\n- Definidos no path do decorator\n\n2. Parâmetros de Consulta (@Query)\n- Opcionais\n- Passados após ? na URL (ex: /produtos?pagina=2&limite=10)\n- Podem ter valores padrão\n\nCaracterísticas:\n- Conversão automática de tipos\n- Validação pode ser adicionada com Pipes\n- Flexibilidade na definição de rotas dinâmicas	2025-01-29 20:23:12.414	fcc9927a-773a-4241-ba77-b0bec12a40a3	29682086-bbe4-46d1-8f91-35eb6c7c8b96	2025-01-29 20:23:12.414
6e47e893-1a09-45b1-a81b-3997437c8eae	Resposta de Requisição	Formatação e envio de respostas HTTP	import {\nController,\nGet,\nPost,\nRes,\nHttpStatus,\nHttpException\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n@Controller('usuarios')\nexport class UsuariosController {\nResposta simples\n@Get()\nlistarusuarios() {\nreturn { usuarios: [] };\n}\n\nUsando Response do Express\n@Get('detalhes')\nobterDetalhes(@Res() res: Response) {\nres.status(200).json({\nmensagem: 'Detalhes obtidos com sucesso'\n});\n}\n\nLançando exceções HTTP\n@Post()\ncriarUsuario() {\ntry {\nLógica de criação\nthrow new Error('Usuário já existe');\n} catch (error) {\nthrow new HttpException({\nstatus: HttpStatus.CONFLICT,\nerror: 'Erro ao criar usuário',\ndetalhes: error.message\n}, HttpStatus.CONFLICT);\n}\n}\n}	Respostas de requisição no NestJS podem ser manipuladas de várias formas:\n\nMétodos de Resposta:\n1. Retorno direto de objetos\n- NestJS converte automaticamente para JSON\n- Status padrão 200 OK\n\n2. Uso do objeto Response do Express\n- Controle total sobre cabeçalhos e status\n- Método @Res() para injetar resposta\n\n3. Tratamento de Exceções\n- HttpException para erros personalizados\n- Permite definir status e mensagens específicas\n\nBoas Práticas:\n- Use retornos simples quando possível\n- Utilize HttpException para erros esperados\n- Padronize formatos de resposta	2025-01-29 20:23:12.416	6fa25aa7-99ee-42a9-b254-2c37177adf55	29682086-bbe4-46d1-8f91-35eb6c7c8b96	2025-01-29 20:23:12.416
5f56abd0-0648-4e9b-9559-a6fdc77e1cfc	Serviços no NestJS	Criação e uso de serviços para lógica de negócio	import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class UsuariosService {\nprivate usuarios = [\n{ id: 1, nome: 'João' },\n{ id: 2, nome: 'Maria' }\n];\n\nlistarTodos() {\nreturn this.usuarios;\n}\n\nbuscarPorId(id: number) {\nreturn this.usuarios.find(usuario => usuario.id === id);\n}\n\ncriar(dadosUsuario) {\nconst novoUsuario = {\nid: this.usuarios.length + 1,\n...dadosUsuario\n};\nthis.usuarios.push(novoUsuario);\nreturn novoUsuario;\n}\n}\n\n@Controller('usuarios')\nexport class UsuariosController {\nconst ructor(\nprivate usuariosService: UsuariosService\n) {}\n\n@Get()\nlistarUsuarios() {\nreturn this.usuariosService.listarTodos();\n}\n}	Serviços no NestJS encapsulam a lógica de negócio:\n\nCaracterísticas principais:\n1. Decorador @Injectable()\n- Permite injeção de dependência\n- Registra a classe como um provider\n\n2. Separação de Responsabilidades\n- Lógica de negócio isolada dos controladores\n- Facilita manutenção e testes\n\n3. Injeção de Dependência\n- Serviços são injetados via construtor\n- Promove baixo acoplamento\n- Facilita substituição e mock de dependências\n\nBoas Práticas:\n- Mantenha serviços focados em uma responsabilidade\n- Use para manipulação de dados\n- Separe lógicas complexas em métodos distintos	2025-01-29 20:23:12.418	025ee422-3233-4f93-9281-1dedebd0c3fb	29682086-bbe4-46d1-8f91-35eb6c7c8b96	2025-01-29 20:23:12.418
a8fda09d-119a-43ff-b81c-45b0f6a291b2	Injeção de Dependências	Gerenciamento de dependências no NestJS	import { Injectable, Inject } from '@nestjs/common';\n\nServiço de Usuários\n@Injectable()\nexport class UsuariosService {\nconst ructor(\n@Inject('REPOSITORIO_USUARIOS')\nprivate repositorio: RepositorioUsuarios\n) {}\n\nlistarTodos() {\nreturn this.repositorio.encontrarTodos();\n}\n}\n\nMódulo de Usuários\n@Module({\nproviders: [\nUsuariosService,\n{\nprovide: 'REPOSITORIO_USUARIOS',\nuseClass: RepositorioPostgres\n},\nValor const ante\n{\nprovide: 'CONFIG_BD',\nuseValue: {\nhost: 'localhost',\nporta: 5432\n}\n},\nFábrica\n{\nprovide: 'SERVICO_AUTENTICACAO',\nuseFactory: (configService) => {\nreturn new ServicoAutenticacao(configService);\n},\ninject: [ConfigService]\n}\n]\n})\nexport class UsuariosModule {}	Injeção de Dependências no NestJS:\n\nTipos de Injeção:\n1. Injeção por Construtor\n- Método padrão de injeção\n- Decorador @Injectable()\n- Resolve dependências automaticamente\n\n2. Injeção Personalizada\n- @Inject() para tokens customizados\n- Permite injetar valores, classes ou fábricas\n\n3. Formas de Registro de Providers:\n- useClass: Instancia uma classe\n- useValue: Injeta um valor constante\n- useFactory: Cria instâncias dinamicamente\n\nVantagens:\n- Desacoplamento de componentes\n- Facilidade de substituição de dependências\n- Inversão de controle\n- Simplificação de testes	2025-01-29 20:23:12.419	f27d68d5-960f-4d49-be81-9ed5f69df045	29682086-bbe4-46d1-8f91-35eb6c7c8b96	2025-01-29 20:23:12.419
833eed15-f563-49d6-a79e-027326598bff	Tipos Customizados em TypeScript	Criando tipos personalizados com type e interface	Type\ntype Ponto = {\nx: number;\ny: number;\n};\n\nlet coordenada: Ponto = { x: 10, y: 20 };\n\nretorno: { x: 10, y: 20 }\n\nInterface\ninterface Pessoa {\nnome: string;\nidade: number;\nemail?: string;  Propriedade opcional\n}\n\nlet usuario: Pessoa = {\nnome: "João",\nidade: 25\n};\n\nretorno: { nome: "João", idade: 25 }	Tipos customizados permitem definir estruturas complexas reutilizáveis:\n\n- Pode representar qualquer tipo de dados\n- Não pode ser estendido após criação\n\n- Mais flexível para objetos\n- Pode ser estendida\n- Suporta propriedades opcionais (marcadas com ?)	2025-01-29 20:23:12.801	30350a92-ca83-43d9-a790-68c477d661dc	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.801
363b6a8c-33ec-4382-8291-3ba3962fa7e4	Middlewares no NestJS	Implementação de middlewares para processamento de requisições	import {\nInjectable,\nNestMiddleware\n} from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\nMiddleware Global\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\nuse(req: Request, res: Response, next: NextFunction) {\nconsole.log('Requisição recebida:', {\nmetodo: req.method,\nurl: req.originalUrl,\ntimestamp: new Date()\n});\nnext();\n}\n}\n\nConfiguração no Módulo\n@Module({\n...\n})\nexport class AppModule implements NestModuleMiddleware {\nconfigure(consumer: MiddlewareConsumer) {\nconsumer\n.apply(LoggerMiddleware)\n.forRoutes('usuarios') Aplicar apenas em rotas específicas\nOu para todos os controladores\n.forRoutes({ path: '*', method: RequestMethod.ALL })\n}\n}	Middlewares no NestJS são funções que processam requisições antes dos controladores:\n\nCaracterísticas Principais:\n1. Implementam a interface NestMiddleware\n2. Podem modificar objetos de requisição e resposta\n3. Podem interromper o ciclo de requisição\n4. Executados em ordem de declaração\n\nTipos de Middlewares:\n- Globais: Afetam todas as rotas\n- Específicos: Aplicados em rotas ou controladores selecionados\n\nCasos de Uso Comuns:\n- Logging\n- Autenticação\n- Tratamento de CORS\n- Validação de requisições	2025-01-29 20:23:12.421	158e6070-8b0b-470f-9781-24d1a969c4e8	29682086-bbe4-46d1-8f91-35eb6c7c8b96	2025-01-29 20:23:12.421
cb7b6af3-0c98-44d5-b3ab-3822a466e620	Pipes e Validação	Validação de dados e transformação com Pipes	import {\nController,\nGet,\nPost,\nBody,\nParam,\nUsePipes,\nValidationPipe\n} from '@nestjs/common';\nimport {\nIsString,\nIsEmail,\nMinLength,\nMaxLength\n} from 'class-validator';\n\nDTO (Data Transfer Object) com validações\nexport class CriarUsuarioDto {\n@IsString()\n@MinLength(2)\n@MaxLength(50)\nnome: string;\n\n@IsEmail()\nemail: string;\n\n@IsString()\n@MinLength(6)\nsenha: string;\n}\n\n@Controller('usuarios')\nexport class UsuariosController {\nValidação global\n@Post()\n@UsePipes(new ValidationPipe())\ncriarUsuario(@Body() dadosUsuario: CriarUsuarioDto) {\nreturn {\nmensagem: 'Usuário criado',\ndados: dadosUsuario\n};\n}\n\nPipe de transformação\n@Get(':id')\nbuscarUsuario(\n@Param('id', ParseIntPipe) id: number\n) {\nreturn { id };\n}\n}\n\nPipe personalizado\n@Injectable()\nexport class TrimPipe implements PipeTransform {\ntransform(value: any) {\nreturn typeof value === 'string'\n? value.trim()\n: value;\n}\n}	Pipes no NestJS têm duas funções principais:\n\nTipos de Pipes:\n1. Validação\n- Verificam se os dados atendem a critérios específicos\n- Usam bibliotecas como class-validator\n- Podem rejeitar requisições inválidas\n\n2. Transformação\n- Modificam dados de entrada\n- Convertem tipos\n- Executam pré-processamento\n\nCaracterísticas:\n- Podem ser aplicados globalmente\n- Específicos para rotas ou parâmetros\n- Suportam validações declarativas\n- Melhoram segurança e consistência dos dados\n\nBibliotecas Comuns:\n- class-validator para validações\n- class-transformer para transformações	2025-01-29 20:23:12.423	9b894b00-ea43-4e4b-bbcd-284878fb5993	29682086-bbe4-46d1-8f91-35eb6c7c8b96	2025-01-29 20:23:12.423
ecb26c1c-06ee-4743-a92d-eea03ea81757	Guards e Segurança	Implementação de proteção de rotas	import {\nInjectable,\nCanActivate,\nExecutionContext,\nUnauthorizedException\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\nGuard de Autenticação\n@Injectable()\nexport class AutenticacaoGuard implements CanActivate {\ncanActivate(\ncontext: ExecutionContext\n): boolean | Promise<boolean> | Observable<boolean> {\nconst request = context.switchToHttp().getRequest();\nconst token = request.headers.authorization;\n\nif (!token) {\nthrow new UnauthorizedException('Token não fornecido');\n}\n\ntry {\nLógica de validação de token\nconst usuarioValido = this.validarToken(token);\nreturn usuarioValido;\n} catch (erro) {\nthrow new UnauthorizedException('Token inválido');\n}\n}\n\nprivate validarToken(token: string): boolean {\nImplementação de validação de token\nreturn token.startsWith('Bearer ');\n}\n}\n\nGuard de Papel/Permissão\n@Injectable()\nexport class RolesGuard implements CanActivate {\nconst ructor(\nprivate readonly reflector: Reflector\n) {}\n\ncanActivate(context: ExecutionContext): boolean {\nconst roles = this.reflector.get<string[]>(\n'roles',\ncontext.getHandler()\n);\n\nif (!roles) {\nreturn true;\n}\n\nconst request = context.switchToHttp().getRequest();\nconst usuario = request.user;\n\nVerifica se o usuário tem a role necessária\nreturn roles.some(role => usuario.roles.includes(role));\n}\n}\n\nUso nos controladores\n@Controller('admin')\n@UseGuards(AutenticacaoGuard, RolesGuard)\nexport class AdminController {\n@Post()\n@Roles('ADMIN')\ncriarRecurso() {\nApenas administradores podem acessar\n}\n}	Guards no NestJS controlam o acesso a rotas e recursos:\n\nCaracterísticas Principais:\n1. Implementam CanActivate\n2. Executados antes de controladores/rotas\n3. Podem bloquear ou permitir acesso\n\nTipos de Guards:\n- Autenticação: Verificam identidade do usuário\n- Autorização: Controlam permissões de acesso\n- Baseados em papéis ou tokens\n\nFuncionalidades:\n- Interceptam requisições\n- Validam credenciais\n- Verificam permissões\n- Lançam exceções de não autorizado\n\nBoas Práticas:\n- Separar lógica de autenticação\n- Usar decorators para definir permissões\n- Implementar validações robustas	2025-01-29 20:23:12.425	ff4b3c8f-e287-42dd-b372-d76d5da5ff41	29682086-bbe4-46d1-8f91-35eb6c7c8b96	2025-01-29 20:23:12.425
b7855456-5dbe-41e6-b40a-891990a7a922	Interceptors no NestJS	Manipulação de requisições e respostas	import {\nInjectable,\nNestInterceptor,\nExecutionContext,\nCallHandler\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nInterceptor de Logging\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\nintercept(\ncontext: ExecutionContext,\nnext: CallHandler\n): Observable<any> {\nconst now = Date.now();\n\nreturn next.handle().pipe(\ntap(() => {\nconsole.log(Processamento levou S{Date.now() - now}ms);\n})\n);\n}\n}\n\nInterceptor de Transformação de Resposta\n@Injectable()\nexport class TransformInterceptor implements NestInterceptor {\nintercept(\ncontext: ExecutionContext,\nnext: CallHandler\n): Observable<any> {\nreturn next.handle().pipe(\nmap(data => ({\nsucesso: true,\ndados: data,\ntimestamp: new Date()\n}))\n);\n}\n}\n\nUso no Controlador\n@Controller('usuarios')\n@UseInterceptors(LoggingInterceptor, TransformInterceptor)\nexport class UsuariosController {\n@Get()\nlistarUsuarios() {\nreturn [\n{ id: 1, nome: 'João' },\n{ id: 2, nome: 'Maria' }\n];\n}\n}\n\nInterceptor Global\napp.useGlobalInterceptors(new LoggingInterceptor());	Interceptors no NestJS modificam o fluxo de requisições e respostas:\n\nCaracterísticas Principais:\n1. Baseados em Observables (RxJS)\n2. Executam antes e depois do tratamento de rotas\n3. Podem modificar requisições e respostas\n\nCasos de Uso Comuns:\n- Logging de requisições\n- Transformação de dados\n- Tratamento de erros\n- Medição de tempo de execução\n- Caching\n\nTipos de Operações:\n- Pré-processamento: Antes do controlador\n- Pós-processamento: Após o controlador\n- Manipulação de fluxo de dados\n\nBenefícios:\n- Separação de preocupações\n- Código mais limpo e modular\n- Flexibilidade na manipulação de requisições	2025-01-29 20:23:12.427	f1caaa0d-ed64-460c-b4ed-ffba65a17742	29682086-bbe4-46d1-8f91-35eb6c7c8b96	2025-01-29 20:23:12.427
bea53e40-6972-4185-b3fd-4e5d2debddf6	Objeto Global	Trabalhando com o objeto global no Node.js	\nObjeto global no Node.js\nconsole.log(global); Objeto global do Node.js\n\nVariáveis e funções globais comuns\nconsole.log(__dirname);  Diretório do arquivo atual\nconsole.log(__filename); Caminho complet o do arquivo atual\nconsole.log(process.env); Variáveis de ambiente\nconsole.log(process.argv); Argumentos da linha de comando\n\nDefinindo var iável global\nglobal.config = {\napiKey: 'abc123',\nbaseUrl: 'http://api.exemplo.com'\n};\n\nAcessando var iável global de qualquer lugar\nconsole.log(global.config.apiKey);\nou simplesmente\nconsole.log(config.apiKey);\n\nFunções de tempo global\nsetTimeout(() => {\nconsole.log('Executado após 2 segundos');\n}, 2000);\n\nsetInterval(() => {\nconsole.log('Executa a cada 1 segundo');\n}, 1000);\n\nclearTimeout e clearInterval\nconst timer = setTimeout(() => {}, 1000);\nclearTimeout(timer);\n\nconst interval = setInterval(() => {}, 1000);\nclearInterval(interval);\n\nProcess events\nprocess.on('exit', (code) => {\nconsole.log('Processo terminando com código:', code);\n});\n\nprocess.on('uncaughtException', (err) => {\nconsole.error('Erro não tratado:', err);\nprocess.exit(1);\n});	\n- Equivalente ao 'window' do browser\n- Disponível em todo o código\n- Contém funções e objetos úteis\n- Acessível sem importação\n\n- __dirname: diretório atual\n- __filename: arquivo atual\n- process: informações do processo\n- require: importação de módulos\n- module: módulo atual\n- exports: exportações	2025-01-29 20:23:12.457	8d2be5d9-a295-460e-b3fa-a74009c45cb4	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.457
1d31d104-8cf4-4b5f-8d79-d5caa77f9b5e	Buffer e Streams	Manipulação de dados binários em Node.js	\nCriando Buffers\nconst buf1 = Buffer.from('Hello');\n\nretorno: <Buffer 48 65 6c 6c 6f>\n\nconst buf2 = Buffer.alloc(5);\nbuf2.write('World');\n\nretorno: <Buffer 57 6f 72 6c 64>\n\nConvertendo Buffer para String\nconsole.log(buf1.toString());\n\nretorno: 'Hello'\n\nConcatenando Buffers\nconst bufTotal = Buffer.concat([buf1, buf2]);\nconsole.log(bufTotal.toString());\n\nretorno: 'HelloWorld'\n\nStreams básicos\nconst fs = require('fs');\n\nStream de leitura\nconst readStream = fs.createReadStream('arquivo.txt');\nreadStream.on('data', (chunk) => {\nconsole.log('Recebido:', chunk);\n});\n\nStream de escrita\nconst writeStream = fs.createWriteStream('saida.txt');\nwriteStream.write('Dados');\nwriteStream.end();	\n- Armazena dados binários\n- Útil para manipular arquivos\n- Usado em operações de I/O\n- Base para Streams\n\n- Processam dados em partes\n- Eficientes para grandes arquivos\n- Tipos: Readable, Writable, Duplex\n- Eventos: data, end, error, finish	2025-01-29 20:23:12.459	3c6590b5-981a-4493-835b-2fe611c64b1f	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.459
a612ea82-455f-4f48-b6f6-dfac94bc6c58	Operações Síncronas com Sistema de Arquivos	Manipulação síncrona de arquivos usando o módulo fs do Node.js	\nImportando módulo\nconst fs = require('fs');\n\nLeitura de arquivo\nconst conteudo = fs.readFileSync('arquivo.txt', 'utf8');\nconsole.log(conteudo);\n\nretorno: conteúdo do arquivo\n\nEscrita em arquivo\nfs.writeFileSync('novo.txt', 'Olá Mundo!');\ncria/sobrescreve arquivo com o conteúdo\n\nVerificar se arquivo existe\nconst existe = fs.existsSync('arquivo.txt');\n\nretorno: true ou false\n\nInformações do arquivo\nconst stats = fs.statSync('arquivo.txt');\nconsole.log(stats.size);      tamanho em bytes\nconsole.log(stats.isFile());  se é arquivo\nconsole.log(stats.isDirectory()); se é diretório\n\nCriar e remover diretório\nfs.mkdirSync('novapasta');\nfs.rmdirSync('novapasta');\n\nListar conteúdo do diretório\nconst arquivos = fs.readdirSync('.');\nconsole.log(arquivos);\n\nretorno: array com nomes dos arquivos	\n- Bloqueiam a execução até completar\n- Mais simples de entender e debugar\n- Ideais para scripts simples\n- Não recomendadas para aplicações em produção\n- Úteis para configuração inicial\n- Manipulam arquivos e diretórios diretamente	2025-01-29 20:23:12.466	5f6bfa1d-f657-4468-9d38-327d1e60dc27	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.466
3305e7a3-decd-49cc-9f7c-a2d35fc09047	Operações Assíncronas com Sistema de Arquivos	Manipulação assíncrona de arquivos usando fs/promises	\nImportando módulo\nconst fs = require('fs/promises');\n\nLeitura assíncrona\nasync function lerArquivo() {\ntry {\nconst conteudo = await fs.readFile('arquivo.txt', 'utf8');\nconsole.log(conteudo);\n} catch (erro) {\nconsole.error('Erro na leitura:', erro);\n}\n}\n\nEscrita assíncrona\nasync function escreverArquivo() {\ntry {\nawait fs.writeFile('arquivo.txt', 'Novo conteúdo');\nconsole.log('Arquivo escrito com sucesso');\n} catch (erro) {\nconsole.error('Erro na escrita:', erro);\n}\n}\n\nCopiando arquivo\nasync function copiarArquivo() {\ntry {\nawait fs.copyFile('origem.txt', 'destino.txt');\nconsole.log('Arquivo copiado');\n} catch (erro) {\nconsole.error('Erro na cópia:', erro);\n}\n}\n\nMovendo/Renomeando arquivo\nasync function moverArquivo() {\ntry {\nawait fs.rename('antigo.txt', 'novo.txt');\nconsole.log('Arquivo movido/renomeado');\n} catch (erro) {\nconsole.error('Erro ao mover:', erro);\n}\n}	\n- Não bloqueiam a execução\n- Usam Promises e async/await\n- Melhor performance em produção\n- Requerem tratamento de erros\n- Permitem operações paralelas\n- Ideais para aplicações web	2025-01-29 20:23:12.467	95043387-20e3-434e-bc1d-1e61f8138edb	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.467
87988563-51bc-4b15-a54c-34ca03e6f522	Manipulação de Caminhos	Trabalhando com caminhos de arquivos usando o módulo path	\nImportando módulo\nconst path = require('path');\n\nJuntando caminhos\nconst caminho = path.join('/pasta', 'subpasta', 'arquivo.txt');\nconsole.log(caminho);\n\nretorno: /pasta/subpasta/arquivo.txt\n\nResolvendo caminho absoluto\nconst absoluto = path.resolve('arquivo.txt');\nconsole.log(absoluto);\n\nretorno: /caminho/completo/arquivo.txt\n\nExtraindo informações\nconst arquivo = 'pasta/arquivo.txt';\nconsole.log(path.dirname(arquivo));  pasta\nconsole.log(path.basename(arquivo)); arquivo.txt\nconsole.log(path.extname(arquivo));  .txt\n\nNormalizando caminhos\nconst normalizado = path.normalize('/pasta//sub/./arquivo.txt');\nconsole.log(normalizado);\n\nretorno: /pasta/sub/arquivo.txt	\n- Manipula caminhos de forma segura\n- Funciona em diferentes sistemas operacionais\n- Resolve caminhos relativos e absolutos\n- Extrai componentes de caminhos\n- Normaliza caminhos inconsistentes\n- Essencial para portabilidade	2025-01-29 20:23:12.469	57e4426c-4ad5-4dcd-b7bf-c83db3140d4a	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.469
c9aa76b2-74f6-4c2a-b882-7d8ad23aacf3	Streams de Arquivos	Processamento eficiente de arquivos grandes usando streams	\nconst fs = require('fs');\n\nStream de leitura\nconst readStream = fs.createReadStream('grande.txt', {\nencoding: 'utf8',\nhighWaterMark: 64 * 1024 64KB chunks\n});\n\nreadStream.on('data', (chunk) => {\nconsole.log('Recebido:', chunk.length, 'bytes');\n});\n\nreadStream.on('end', () => {\nconsole.log('Leitura finalizada');\n});\n\nStream de escrita\nconst writeStream = fs.createWriteStream('saida.txt');\n\nwriteStream.write('Início\\n');\nwriteStream.write('Meio\\n');\nwriteStream.end('Fim');\n\nPipe - conectando streams\nconst arquivoEntrada = fs.createReadStream('entrada.txt');\nconst arquivoSaida = fs.createWriteStream('copia.txt');\n\narquivoEntrada.pipe(arquivoSaida);	\n- Processam dados em partes (chunks)\n- Ideais para arquivos grandes\n- Consomem menos memória\n- Permitem processamento em tempo real\n- Podem ser encadeados com pipe()\n- Eventos controlam o fluxo de dados	2025-01-29 20:23:12.471	873f3409-8eb6-4311-9f8f-f3175ac8b46e	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.471
84ade21c-59a5-49c4-9e15-aa0fbbd4f249	Monitoramento de Arquivos	Monitorando alterações em arquivos e diretórios com fs.watch	\nImportando módulo\nconst fs = require('fs');\n\nMonitorando um arquivo específico\nfs.watch('arquivo.txt', (eventType, filename) => {\nconsole.log('Evento:', eventType);\nconsole.log('Arquivo:', filename);\n\nretorno: Evento: change\n\nretorno: Arquivo: arquivo.txt\n});\n\nMonitorando diretório\nfs.watch('./pasta', { recursive: true }, (eventType, filename) => {\nif (filename) {\nconsole.log(`${eventType} detectado em: ${filename}`);\n\nretorno: change detectado em: teste.txt\n\nretorno: rename detectado em: novo.txt\n}\n});\n\nUsando FSWatcher para mais controle\nconst watcher = fs.watch('./pasta');\n\nwatcher.on('change', (eventType, filename) => {\nconsole.log(`Arquivo ${filename} foi ${eventType}`);\n});\n\nwatcher.on('error', (error) => {\nconsole.error('Erro no monitoramento:', error);\n});\n\nPara parar o monitoramento\nwatcher.close();\n\nExemplo prático: Auto-reload de configurações\nlet config = require('./config.json');\n\nfs.watch('./config.json', (eventType) => {\nif (eventType === 'change') {\nLimpa cache do require\ndelet e require.cache[require.resolve('./config.json')];\nRecarrega configuração\nconfig = require('./config.json');\nconsole.log('Configuração atualizada');\n}\n});	\n- Detecta mudanças em tempo real\n- Eventos: change (modificação) e rename (criação/deleção)\n- Opção recursive para subdiretórios\n- Útil para hot-reload\n- Pode monitorar arquivos ou diretórios\n- Importante tratar erros de monitoramento\n\n- Auto-reload de configurações\n- Compilação automática\n- Logs em tempo real\n- Backup automático\n- Sincronização de arquivos	2025-01-29 20:23:12.472	6baa01f3-aae0-4967-b81c-9f0f4b5abcb0	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.472
dde668bc-a5fd-4655-be6e-3200387d3ea2	Servidor HTTP Básico	Criando um servidor HTTP básico com o módulo http do Node.js	\nServidor HTTP básico\nconst http = require('http');\n\nconst server = http.createServer((req, res) => {\nDefinindo headers\nres.setHeader('Content-Type', 'application/json');\n\nObtendo informações da requisição\nconst { method, url } = req;\n\nRoteamento básico\nif (url === '/api/users' && method === 'GET') {\nres.statusCode = 200;\nres.end(JSON.stringify({\nusers: [\n{ id: 1, name: 'João' },\n{ id: 2, name: 'Maria' }\n]\n}));\n} else if (url === '/api/users' && method === 'POST') {\nLendo dados do body\nlet body = '';\nreq.on('data', chunk => {\nbody += chunk.toString();\n});\n\nreq.on('end', () => {\nconst user = JSON.parse(body);\nres.statusCode = 201;\nres.end(JSON.stringify(user));\n});\n} else {\nres.statusCode = 404;\nres.end(JSON.stringify({ error: 'Rota não encontrada' }));\n}\n});\n\nconst PORT = 3000;\nserver.listen(PORT, () => {\nconsole.log(`Servidor rodando em http://localhost:${PORT}`);\n});	\n- Módulo http para criar servidor\n- Manipula requisições (req) e respostas (res)\n- Suporta diferentes métodos HTTP (GET, POST, etc.)\n- Permite definir headers e status code\n- Processa body de requisições\n- Define portas de escuta	2025-01-29 20:23:12.48	09c12438-d9bc-44cf-868d-c3b3101f095e	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.48
47d73a0f-4836-4f04-97e0-ab744fd70e9f	Express.js Framework	Criando APIs com Express, o framework web mais popular do Node.js	\nconst express = require('express');\nconst app = express();\n\nMiddleware para processar JSON\napp.use(express.json());\n\nMiddleware de logging\napp.use((req, res, next) => {\nconsole.log(`${req.method} ${req.url}`);\nnext();\n});\n\nRotas\napp.get('/api/users', (req, res) => {\nres.json([\n{ id: 1, name: 'João' },\n{ id: 2, name: 'Maria' }\n]);\n});\n\napp.post('/api/users', (req, res) => {\nconst user = req.body;\nAqui viria lógica de persistência\nres.status(201).json(user);\n});\n\nTratamento de erros\napp.use((err, req, res, next) => {\nconsole.error(err.stack);\nres.status(500).json({ error: 'Algo deu errado!' });\n});\n\nIniciando servidor\napp.listen(3000, () => {\nconsole.log('Servidor Express rodando na porta 3000');\n});	\n- Framework web minimalista\n- Sistema de middleware\n- Roteamento simplificado\n- Tratamento de erros\n- Suporte a templates\n- Integração fácil com middlewares	2025-01-29 20:23:12.482	0c93f381-e420-4d7d-9927-f55e5d195254	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.482
d171d9bf-955e-4e85-8f00-3025f27657d2	Middlewares	Utilizando middlewares para processar requisições em Node.js	\nconst express = require('express');\nconst app = express();\n\nMiddleware de autenticação\nconst authMiddleware = (req, res, next) => {\nconst token = req.headers.authorization;\n\nif (!token) {\nreturn res.status(401).json({ error: 'Token não fornecido' });\n}\n\nAqui viria validação do token\nnext();\n};\n\nMiddleware de validação\nconst validateUser = (req, res, next) => {\nconst { name, email } = req.body;\n\nif (!name || !email) {\nreturn res.status(400).json({ error: 'Nome e email são obrigatórios' });\n}\n\nnext();\n};\n\nUsando middleware em rotas específicas\napp.post('/api/users', authMiddleware, validateUser, (req, res) => {\nRota protegida e validada\nres.status(201).json(req.body);\n});\n\nMiddleware de erro\napp.use((error, req, res, next) => {\nconsole.error(error);\nres.status(500).json({ error: 'Erro interno' });\n});	\n- Funções que processam requisições\n- Executam em sequência\n- Podem modificar req/res\n- Controlam fluxo da requisição\n- Podem ser globais ou por rota\n- Essenciais para autenticação e validação	2025-01-29 20:23:12.484	a858f6d0-61bd-45fe-a7ed-84c21ad14c45	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.484
3251d218-bbf6-4508-b5ad-a7a54fdb74a9	Roteamento	Sistema de roteamento do Express para organizar endpoints da API	\nconst express = require('express');\nconst router = express.Router();\n\nRotas de usuários\nconst userRouter = express.Router();\n\nuserRouter.get('/', (req, res) => {\nres.json({ message: 'Lista de usuários' });\n});\n\nuserRouter.get('/:id', (req, res) => {\nconst { id } = req.params;\nres.json({ message: `Usuário ${id}` });\n});\n\nRotas de produtos\nconst productRouter = express.Router();\n\nproductRouter.get('/', (req, res) => {\nres.json({ message: 'Lista de produtos' });\n});\n\nUsando os routers\napp.use('/api/users', userRouter);\napp.use('/api/products', productRouter);\n\nParâmetros de rota\nrouter.get('/posts/:id/comments/:commentId', (req, res) => {\nconst { id, commentId } = req.params;\nres.json({ postId: id, commentId });\n});\n\nQuery parameters\nrouter.get('/search', (req, res) => {\nconst { q, page } = req.query;\nres.json({ query: q, page });\n});	\n- Organiza endpoints da API\n- Agrupa rotas relacionadas\n- Suporta parâmetros dinâmicos\n- Processa query parameters\n- Permite middlewares específicos\n- Facilita manutenção do código	2025-01-29 20:23:12.485	c6a9efb4-5fc7-40c7-9029-0268c9351f29	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.485
6e35e759-cbf7-4397-b1db-7d6a74a7a845	Atualização (UPDATE)	Atualizando dados em tabelas SQL	\n-- UPDATE básico\nUPDATE usuarios\nSET status = 'ativo'\nWHERE id = 1;\n-- retorno: 1 registro atualizado\n\n-- Múltiplas colunas\nUPDATE produtos\nSET\npreco = preco * 1.1,\nultima_atualizacao = CURRENT_TIMESTAMP\nWHERE categoria = 'Elet rônicos';\n-- retorno: n registros atualizados\n\n-- UPDATE com JOIN\nUPDATE pedidos p\nINNER JOIN usuarios u ON p.usuario_id = u.id\nSET p.status = 'VIP'\nWHERE u.tipo = 'premium';\n-- retorno: atualiza status dos pedidos VIP\n\n-- UPDATE com subquery\nUPDATE produtos\nSET preco = preco * 1.2\nWHERE id IN (\nSELECT produto_id\nFROM vendas\nGROUP BY produto_id\nHAVING COUNT(*) > 100\n);\n-- retorno: aumenta preço dos mais vendidos	\nUPDATE:\n- Modifica registros existentes\n- Pode usar WHERE\n- Atualiza múltiplas colunas\n- Permite JOINs\n- Aceita subqueries\n- Cuidado com WHERE	2025-01-29 20:23:12.65	d7638852-44fb-47c2-a97a-d1c9ae13a38b	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.65
9d528f1e-c62a-4bbf-9b91-ab2ca13862c8	Arquivos Estáticos	Servindo arquivos estáticos com Express	\nconst express = require('express');\nconst path = require('path');\nconst app = express();\n\nServindo arquivos da pasta 'public'\napp.use(express.static('public'));\n\nServindo com caminho virtual\napp.use('/assets', express.static('public'));\n\nMúltiplos diretórios\napp.use(express.static('images'));\napp.use(express.static('files'));\n\nConfigurações avançadas\napp.use('/static', express.static(path.join(__dirname, 'public'), {\ndotfiles: 'ignore',\netag: false,\nindex: false,\nmaxAge: '1d',\nredirect: false\n}));\n\nExemplo de estrutura\npublic/\n├── css/\n│   └── style.css\n├── js/\n│   └── app.js\n└── images/\n└── logo.png\n\nAcessando arquivos:\nhttp://localhost:3000/css/style.css\nhttp://localhost:3000/assets/js/app.js	\n- express.static() serve arquivos diretamente\n- Útil para CSS, JavaScript, imagens\n- Suporta múltiplos diretórios\n- Permite configurar cache e segurança\n- Pode usar caminhos virtuais\n- Otimiza entrega de conteúdo estático\n\n- maxAge: Controla cache no navegador\n- etag: Validação de cache\n- index: Arquivo padrão do diretório\n- dotfiles: Tratamento de arquivos ocultos	2025-01-29 20:23:12.487	efbe96b8-eb02-4c80-ba23-51bfadb5df9e	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.487
d64491ec-a073-42fc-96f0-8c400e19fdd4	Template Engines	Usando template engines para gerar HTML dinâmico	\nconst express = require('express');\nconst app = express();\n\nConfigurando EJS como template engine\napp.set('view engine', 'ejs');\napp.set('views', './views');\n\nRota que renderiza template\napp.get('/', (req, res) => {\nres.render('index', {\ntitle: 'Minha App',\nusers: ['João', 'Maria', 'Pedro']\n});\n});\n\nviews/index.ejs\n```\n<!DOCTYPE html>\n<html>\n<head>\n<title><%= title %></title>\n</head>\n<body>\n<h1><%= title %></h1>\n<ul>\n<% users.forEach(user => { %>\n<li><%= user %></li>\n<% }); %>\n</ul>\n</body>\n</html>\n```\n\nPartials (reutilização de código)\nviews/header.ejs\n```\n<header>\n<h1><%= title %></h1>\n<nav><!-- ... --></nav>\n</header>\n```\n\nUsando partial\n```\n<%- include('header') %>\n<main>\n<!-- conteúdo -->\n</main>\n```	\n- Geram HTML dinamicamente\n- Permitem lógica no template\n- Suportam dados dinâmicos\n- Reutilizam código com partials\n- Separam lógica da apresentação\n- Facilitam manutenção\n\n- Interpolação de variáveis\n- Estruturas de controle\n- Includes e partials\n- Layouts compartilhados\n- Helpers customizados\n\n- EJS: Sintaxe próxima ao JavaScript\n- Pug: Sintaxe minimalista\n- Handlebars: Lógica mais simples\n- Nunjucks: Recursos avançados	2025-01-29 20:23:12.489	a47e2d50-a7e5-4155-adb4-737cab2928e9	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.489
7567217f-6a31-4303-81ce-27f1857508be	PostgreSQL com node-postgres	Trabalhando com PostgreSQL em Node.js usando a biblioteca 'pg'	\nconst { Pool } = require('pg');\n\nConfiguração da conexão\nconst pool = new Pool({\nuser: 'seu_usuario',\nhost: 'localhost',\ndatabase: 'nome_do_banco',\npassword: 'sua_senha',\nport: 5432,\nConfigurações adicionais\nmax: 20, máximo de conexões\nidleTimeoutMillis: 30000,\nconnectionTimeoutMillis: 2000,\n});\n\nClasse para gerenciar conexões\nclass DatabaseService {\nQuery simples\nasync query(text, params) {\nconst start = Date.now();\nconst res = await pool.query(text, params);\nconst duration = Date.now() - start;\nconsole.log('Tempo de execução:', duration, 'ms');\nreturn res;\n}\n\nTransações\nasync transacao(callback) {\nconst client = await pool.connect();\ntry {\nawait client.query('BEGIN');\nconst result = await callback(client);\nawait client.query('COMMIT');\nreturn result;\n} catch (e) {\nawait client.query('ROLLBACK');\nthrow e;\n} finally {\nclient.release();\n}\n}\n}\n\nconst db = new DatabaseService();\n\nExemplos de uso\nasync function exemplosSQL() {\nCriando tabela\nawait db.query(`\nCREATE TABLE IF NOT EXISTS usuarios (\nid SERIAL PRIMARY KEY,\nnome VARCHAR(100) NOT NULL,\nemail VARCHAR(100) UNIQUE NOT NULL,\nidade INTEGER,\ncriado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n`);\n\nInserindo dados\nconst novoUsuario = await db.query(\n'INSERT INTO usuarios (nome, email, idade) VALUES ($1, $2, $3) RETURNING *',\n['João Silva', 'joao@email.com', 25]\n);\n\nSelect com WHERE\nconst usuarios = await db.query(\n'SELECT * FROM usuarios WHERE idade > $1',\n[18]\n);\n\nJoin com outra tabela\nconst resultado = await db.query(`\nSELECT u.nome, p.titulo\nFROM usuarios u\nLEFT JOIN posts p ON p.usuario_id = u.id\nWHERE u.id = $1\n`, [1]);\n\nExemplo de transação\nawait db.transacao(async (client) => {\nAtualiza saldo de duas contas\nawait client.query(\n'UPDATE contas SET saldo = saldo - $1 WHERE id = $2',\n[100, 1]\n);\nawait client.query(\n'UPDATE contas SET saldo = saldo + $1 WHERE id = $2',\n[100, 2]\n);\n});\n\nQuery com subselect\nconst usuariosAtivos = await db.query(`\nSELECT u.*,\n(SELECT COUNT(*) FROM posts p WHERE p.usuario_id = u.id) as total_posts\nFROM usuarios u\nWHERE u.ativo = true\n`);\n\nOrdenação e paginação\nconst paginado = await db.query(`\nSELECT * FROM usuarios\nORDER BY criado_em DESC\nLIMIT $1 OFFSET $2\n`, [10, 0]); 10 registros, primeira página\n}	\n- Pool de conexões para melhor performance\n- Queries parametrizadas previnem SQL injection\n- Suporte a transações ACID\n- Tipagem forte do PostgreSQL\n\n- Queries assíncronas com async/await\n- Parâmetros nomeados ou posicionais\n- Transações automáticas\n- Pool de conexões gerenciado\n- Logs de performance\n\n- Use sempre parâmetros ($1, $2, etc)\n- Gerencie conexões com pool\n- Implemente tratamento de erros\n- Use transações quando necessário\n- Libere recursos corretamente\n\n- CRUD básico\n- JOINs e subqueries\n- Agregações (GROUP BY)\n- Ordenação e paginação\n- Full Text Search	2025-01-29 20:23:12.496	bc85963d-2dc6-437c-9601-61c1a9bb6881	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.496
38494cb4-4b44-4b45-a945-1e441619bb84	MongoDB com Mongoose	Conectando e manipulando MongoDB usando Mongoose ODM	\nconst mongoose = require('mongoose');\n\nConectando ao MongoDB\nmongoose.connect('mongodb://localhost/minhaapp', {\nuseNewUrlParser: true,\nuseUnifiedTopology: true\n});\n\nDefinindo Schema\nconst userSchema = new mongoose.Schema({\nname: { type: String, required: true },\nemail: { type: String, required: true, unique: true },\nage: Number,\ncreatedAt: { type: Date, default: Date.now }\n});\n\nCriando modelo\nconst User = mongoose.model('User', userSchema);\n\nCriando usuário\nasync function createUser() {\ntry {\nconst user = await User.create({\nname: 'João Silva',\nemail: 'joao@email.com',\nage: 25\n});\nconsole.log('Usuário criado:', user);\n} catch (error) {\nconsole.error('Erro:', error);\n}\n}\n\nBuscando usuários\nasync function findUsers() {\nEncontrar todos\nconst users = await User.find();\n\nBusca com filtros\nconst adultos = await User.find({ age: { $gte: 18 } });\n\nBusca específica\nconst joao = await User.findOne({ email: 'joao@email.com' });\n}\n\nAtualizando usuário\nasync function updateUser(id) {\nconst result = await User.findByIdAndUpdate(\nid,\n{ $set: { age: 26 } },\n{ new: true }\n);\n}\n\nRemovendo usuário\nasync function delet eUser(id) {\nawait User.findByIdAndDelet e(id);\n}	\n- ODM (Object Document Mapper) para MongoDB\n- Define estrutura com Schemas\n- Suporta validações e middlewares\n- Gerencia relacionamentos\n- Fornece interface intuitiva para queries\n- Trabalha com Promises/async-await\n\n- Create: .create() ou new Model()\n- Read: .find(), .findOne(), .findById()\n- Update: .updateOne(), .findByIdAndUpdate()\n- Delete: .deleteOne(), .findByIdAndDelete()	2025-01-29 20:23:12.498	8b22af1b-9230-4ade-9aab-e776b13ff002	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.498
a5fefe3a-32a5-47dc-8c93-3aa6badcb283	SQL com Sequelize	Usando Sequelize ORM para bancos SQL (MySQL, PostgreSQL, etc)	\nconst { Sequelize, DataTypes } = require('sequelize');\n\nConectando ao banco\nconst sequelize = new Sequelize('database', 'user', 'password', {\nhost: 'localhost',\ndialect: 'postgres' ou 'mysql', 'mariadb', 'sqlite'\n});\n\nDefinindo modelo\nconst User = sequelize.define('User', {\nname: {\ntype: DataTypes.STRING,\nallowNull: false\n},\nemail: {\ntype: DataTypes.STRING,\nunique: true\n},\nage: DataTypes.INTEGER\n});\n\nSincronizando modelo com banco\nawait User.sync();\n\nCRUD Operations\nasync function exemplosCRUD() {\nCreate\nconst user = await User.create({\nname: 'Maria',\nemail: 'maria@email.com',\nage: 30\n});\n\nRead\nconst users = await User.findAll({\nwhere: {\nage: {\n[Op.gte]: 18 maior ou igual a 18\n}\n}\n});\n\nUpdate\nawait User.update(\n{ age: 31 },\n{ where: { email: 'maria@email.com' }}\n);\n\nDelet e\nawait User.destroy({\nwhere: { id: 1 }\n});\n}	\n- ORM para bancos SQL\n- Suporta múltiplos bancos\n- Migrations automáticas\n- Validações e hooks\n- Relacionamentos robustos\n- Queries complexas\n\n- Models definem estrutura\n- Operadores para queries\n- Transações automáticas\n- Eager e Lazy loading\n- Timestamps automáticos	2025-01-29 20:23:12.501	c0a13c8b-1c80-4405-a095-bb1de8dd28ad	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.501
7795d6d8-8f6a-4ea7-b535-02756019ec0c	Inserção (INSERT)	Inserindo dados em tabelas SQL	\n-- INSERT básico\nINSERT INTO usuarios (nome, email, idade)\nVALUES ('João', 'joao@email.com', 25);\n-- retorno: 1 registro inserido\n\n-- Múltiplos registros\nINSERT INTO produtos (nome, preco, categoria)\nVALUES\n('Produto 1', 99.90, 'Elet rônicos'),\n('Produto 2', 45.50, 'Acessórios'),\n('Produto 3', 150.00, 'Elet rônicos');\n-- retorno: 3 registros inseridos\n\n-- INSERT com SELECT\nINSERT INTO usuarios_backup\nSELECT * FROM usuarios\nWHERE data_cadastro < '2024-01-01';\n-- retorno: n registros inseridos\n\n-- INSERT ignorando duplicados\nINSERT IGNORE INTO categorias (nome)\nVALUES ('Elet rônicos'), ('Acessórios');\n-- retorno: insere apenas registros não duplicados\n\n-- INSERT com valores padrão\nINSERT INTO usuarios (nome, email)\nVALUES ('Maria', 'maria@email.com');\n-- retorno: 1 registro inserido com valores default	\nINSERT:\n- Adiciona novos registros\n- Aceita valores múltiplos\n- Pode copiar de outra tabela\n- Permite valores padrão\n- Valida constraints\n- Retorna número de inserções	2025-01-29 20:23:12.647	08e662e7-0dac-4750-9b74-dbcbaa45f35b	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.647
80ff25ad-1db2-444b-84f9-bea16ddfa681	Cache com Redis	Implementando cache com Redis	\nconst Redis = require('ioredis');\nconst redis = new Redis();\n\nFunções de cache básicas\nasync function exemploCache() {\nSalvando valor\nawait redis.set('chave', 'valor');\nawait redis.set('user:1', JSON.stringify({ name: 'João' }));\n\nDefinindo expiração\nawait redis.set('token', '123456', 'EX', 3600); 1 hora\n\nObtendo valor\nconst valor = await redis.get('chave');\nconst user = JSON.parse(await redis.get('user:1'));\n\nVerificando existência\nconst exists = await redis.exists('chave');\n\nDelet ando chave\nawait redis.del('chave');\n}\n\nCache de consulta ao banco\nasync function getUserWithCache(id) {\nconst cacheKey = `user:${id}`;\n\nTenta obter do cache\nlet userData = await redis.get(cacheKey);\n\nif (userData) {\nreturn JSON.parse(userData);\n}\n\nSe não existe no cache, busca no banco\nconst user = await User.findById(id);\n\nSalva no cache\nawait redis.set(cacheKey, JSON.stringify(user), 'EX', 3600);\n\nreturn user;\n}	\n- Armazenamento chave-valor em memória\n- Alta performance\n- Estruturas de dados diversas\n- Expiração automática\n- Pub/Sub para mensagens\n- Perfeito para cache\n\n- Cache de consultas\n- Sessões de usuário\n- Rate limiting\n- Filas de tarefas\n- Contadores em tempo real	2025-01-29 20:23:12.503	a8563619-eda0-4ffb-bbec-4b6ae131eff6	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.503
85913ddb-921e-4baa-b13d-772f4905d3c3	Migrations e Seeds	Gerenciando estrutura do banco e dados iniciais	\nMigration com Sequelize\nmodule.exports = {\nup: async (queryInterface, Sequelize) => {\nawait queryInterface.createTable('Users', {\nid: {\ntype: Sequelize.INTEGER,\nprimaryKey: true,\nautoIncrement: true\n},\nname: {\ntype: Sequelize.STRING,\nallowNull: false\n},\nemail: {\ntype: Sequelize.STRING,\nunique: true\n},\ncreatedAt: Sequelize.DATE,\nupdatedAt: Sequelize.DATE\n});\n},\n\ndown: async (queryInterface) => {\nawait queryInterface.dropTable('Users');\n}\n};\n\nSeed para dados iniciais\nmodule.exports = {\nup: async (queryInterface) => {\nawait queryInterface.bulkInsert('Users', [\n{\nname: 'Admin',\nemail: 'admin@sistema.com',\ncreatedAt: new Date(),\nupdatedAt: new Date()\n}\n]);\n},\n\ndown: async (queryInterface) => {\nawait queryInterface.bulkDelet e('Users', null, {});\n}\n};	\n- Controle de versão do banco\n- Alterações rastreáveis\n- Rollback possível\n- Execução em equipe\n- Histórico de mudanças\n\n- Dados iniciais do sistema\n- Dados para testes\n- Ambiente de desenvolvimento\n- População de tabelas base\n- Dados de exemplo	2025-01-29 20:23:12.505	1e338bae-2916-499c-ae63-ac07eb990b79	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.505
73e3f94f-cbb2-4d88-ae3b-ed1b6581a452	JWT (JSON Web Tokens)	Implementando autenticação com JSON Web Tokens	\nconst jwt = require('jsonwebtoken');\nconst secretKey = process.env.JWT_SECRET;\n\nMiddleware de autenticação\nconst authMiddleware = async (req, res, next) => {\ntry {\nObtém token do header\nconst token = req.headers.authorization?.split(' ')[1];\nif (!token) {\nreturn res.status(401).json({ error: 'Token não fornecido' });\n}\n\nVerifica token\nconst decoded = jwt.verify(token, secretKey);\nreq.user = decoded;\nnext();\n} catch (error) {\nres.status(401).json({ error: 'Token inválido' });\n}\n};\n\nLogin e geração de token\nasync function login(req, res) {\nconst { email, password } = req.body;\n\ntry {\nVerifica usuário no banco\nconst user = await User.findOne({ email });\nif (!user || !await user.comparePassword(password)) {\nreturn res.status(401).json({ error: 'Credenciais inválidas' });\n}\n\nGera token\nconst token = jwt.sign(\n{\nid: user.id,\nemail: user.email,\nrole: user.role\n},\nsecretKey,\n{ expiresIn: '24h' }\n);\n\nRetorna token e dados do usuário\nres.json({\ntoken,\nuser: {\nid: user.id,\nemail: user.email,\nname: user.name\n}\n});\n} catch (error) {\nres.status(500).json({ error: 'Erro no servidor' });\n}\n}\n\nExemplo de rota protegida\napp.get('/api/profile', authMiddleware, async (req, res) => {\ntry {\nconst user = await User.findById(req.user.id);\nres.json(user);\n} catch (error) {\nres.status(500).json({ error: 'Erro ao buscar perfil' });\n}\n});\n\nRefresh token\nfunction refreshToken(req, res) {\nconst { refreshToken } = req.body;\ntry {\nconst decoded = jwt.verify(refreshToken, secretKey);\nconst newToken = jwt.sign(\n{ id: decoded.id, email: decoded.email },\nsecretKey,\n{ expiresIn: '24h' }\n);\nres.json({ token: newToken });\n} catch {\nres.status(401).json({ error: 'Refresh token inválido' });\n}\n}	\n- Token seguro para autenticação\n- Carrega informações do usuário\n- Stateless (não requer armazenamento)\n- Pode ser validado independentemente\n\n- Header: Algoritmo e tipo\n- Payload: Dados do usuário\n- Signature: Garante integridade\n\n- Use variáveis de ambiente para secrets\n- Implemente refresh tokens\n- Armazene apenas dados necessários\n- Configure tempo de expiração\n- Use HTTPS sempre	2025-01-29 20:23:12.514	be65eda0-268a-44eb-b81b-bb91268f5281	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.514
82779baf-2faa-41d1-a1b4-b9d713ac6fa4	Hashing de Senhas com Bcrypt	Implementando hash seguro de senhas usando bcrypt	\nconst bcrypt = require('bcryptjs');\nconst SALT_ROUNDS = 10;\n\nClasse de serviço para usuários\nclass UserService {\nHash de senha para novo usuário\nasync createUser(userData) {\ntry {\nGera hash da senha\nconst hashedPassword = await bcrypt.hash(\nuserData.password,\nSALT_ROUNDS\n);\n\nCria usuário com senha hasheada\nconst user = await User.create({\n...userData,\npassword: hashedPassword\n});\n\nreturn user;\n} catch (error) {\nthrow new Error('Erro ao criar usuário');\n}\n}\n\nVerificação de senha\nasync verifyPassword(password, hashedPassword) {\nreturn await bcrypt.compare(password, hashedPassword);\n}\n\nAtualização de senha\nasync updatePassword(userId, oldPassword, newPassword) {\nconst user = await User.findById(userId);\nif (!user) {\nthrow new Error('Usuário não encontrado');\n}\n\nVerifica senha atual\nconst isValid = await this.verifyPassword(\noldPassword,\nuser.password\n);\n\nif (!isValid) {\nthrow new Error('Senha atual incorreta');\n}\n\nGera hash da nova senha\nconst hashedPassword = await bcrypt.hash(\nnewPassword,\nSALT_ROUNDS\n);\n\nAtualiza senha\nuser.password = hashedPassword;\nawait user.save();\n\nreturn true;\n}\n\nReset de senha\nasync resetPassword(email) {\nconst user = await User.findOne({ email });\nif (!user) {\nthrow new Error('Email não encontrado');\n}\n\nGera senha temporária\nconst tempPassword = Math.random().toString(36).slice(-8);\nconst hashedPassword = await bcrypt.hash(\ntempPassword,\nSALT_ROUNDS\n);\n\nuser.password = hashedPassword;\nawait user.save();\n\nAqui enviaria email com senha temporária\nreturn tempPassword;\n}\n}	\n- Algoritmo específico para senhas\n- Salt automático contra rainbow tables\n- Função lenta (propositalmente)\n- Seguro contra ataques de força bruta\n\n- Salt rounds definem complexidade\n- Hash único para cada senha\n- Processo assíncrono\n- Verificação segura\n\n- Nunca armazene senhas em texto puro\n- Use salt rounds apropriados\n- Implemente política de senhas\n- Ofereça reset seguro\n- Evite senhas padrão	2025-01-29 20:23:12.519	bdf95b4c-fadd-4831-bdb2-e584c074f095	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.519
b7b2df42-7eb3-4482-a502-6376365b6d1d	CORS (Cross-Origin Resource Sharing)	Configurando CORS para segurança de APIs	\nconst cors = require('cors');\nconst express = require('express');\nconst app = express();\n\nConfiguração básica\napp.use(cors());\n\nConfiguração personalizada\nconst corsOptions = {\norigin: ['http://localhost:3000', 'https://meuapp.com'],\nmethods: ['GET', 'POST', 'PUT', 'DELETE'],\nallowedHeaders: ['Content-Type', 'Authorization'],\nexposedHeaders: ['X-Total-Count'],\ncredentials: true,\nmaxAge: 3600\n};\n\napp.use(cors(corsOptions));\n\nConfiguração por rota\napp.get('/api/public', cors(), (req, res) => {\nres.json({ message: 'Acesso público' });\n});\n\nCORS dinâmico\nconst dynamicCors = {\norigin: function (origin, callback) {\nconst allowedOrigins = ['http://localhost:3000'];\nif (!origin || allowedOrigins.includes(origin)) {\ncallback(null, true);\n} else {\ncallback(new Error('Origem não permitida pelo CORS'));\n}\n},\ncredentials: true\n};\n\napp.use(cors(dynamicCors));\n\nPreflight personalizado\napp.options('/api/special', cors(corsOptions));\n\nTratando erros de CORS\napp.use((err, req, res, next) => {\nif (err.message.includes('CORS')) {\nres.status(403).json({\nerror: 'Acesso não permitido para esta origem'\n});\n} else {\nnext(err);\n}\n});	\n- Mecanismo de segurança do navegador\n- Controla acessos entre origens\n- Previne requisições maliciosas\n- Essencial para APIs públicas\n\n- origin: Origens permitidas\n- methods: Métodos HTTP\n- headers: Headers permitidos\n- credentials: Cookies e auth\n- preflight: OPTIONS automático\n\n- APIs públicas\n- Desenvolvimento local\n- Múltiplos frontends\n- Microsserviços\n- APIs com autenticação	2025-01-29 20:23:12.521	3ccd446a-692f-4391-9f41-e53921636a5e	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.521
030b2d92-532a-49b1-bec9-4213a3be61e5	Helmet e Headers de Segurança	Protegendo aplicações Express com Helmet	\nconst helmet = require('helmet');\nconst express = require('express');\nconst app = express();\n\nConfiguração básica\napp.use(helmet());\n\nConfiguração personalizada\napp.use(helmet({\ncontentSecurityPolicy: {\ndirectives: {\ndefaultSrc: ["'self'"],\nscriptSrc: ["'self'", "'unsafe-inline'"],\nstyleSrc: ["'self'", "'unsafe-inline'"],\nimgSrc: ["'self'", "data:", "https:"],\nconnectSrc: ["'self'", "https://api.exemplo.com"]\n}\n},\ncrossOriginEmbedderPolicy: true,\ncrossOriginOpenerPolicy: true,\ncrossOriginResourcePolicy: { policy: "cross-origin" },\ndnsPrefetchControl: { allow: false },\nframeguard: { action: "deny" },\nhidePoweredBy: true,\nhsts: {\nmaxAge: 31536000,\nincludeSubDomains: true,\npreload: true\n},\nieNoOpen: true,\nnoSniff: true,\nreferrerPolicy: { policy: "strict-origin-when-cross-origin" },\nxssFilter: true\n}));\n\nHeaders personalizados\napp.use((req, res, next) => {\nres.setHeader('Permissions-Policy',\n'geolocation=(), camera=(), microphone=()');\nnext();\n});\n\nConfiguração para SPA\nconst SPA_CONFIG = helmet({\ncontentSecurityPolicy: {\ndirectives: {\ndefaultSrc: ["'self'"],\nscriptSrc: ["'self'", "'unsafe-inline'"],\nstyleSrc: ["'self'", "'unsafe-inline'"],\nimgSrc: ["'self'", "data:", "https:"],\nconnectSrc: ["'self'", "https://api.exemplo.com"],\nfontSrc: ["'self'", "https://fonts.gstatic.com"],\nobjectSrc: ["'none'"],\nmediaSrc: ["'self'"],\nframeSrc: ["'none'"],\n}\n}\n});\n\napp.use(SPA_CONFIG);	\n- Conjuntos de middlewares de segurança\n- Configura headers HTTP de proteção\n- Previne ataques comuns\n- Boas práticas por padrão\n\n- Content-Security-Policy: Controla recursos\n- CORS headers: Controle de origem\n- HSTS: Força HTTPS\n- XSS Protection: Previne XSS\n- Frame Options: Previne clickjacking\n\n- XSS (Cross-Site Scripting)\n- Clickjacking\n- MIME-type sniffing\n- Cross-site injections\n- Ataques de navegador	2025-01-29 20:23:12.525	99ecf636-8ae5-4f7b-95f1-f149599e4813	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.525
62a746bf-758e-4697-8789-5b602a9f1a2c	Validação de Dados	Implementando validação de dados com Joi e express-validator	\nUsando Joi\nconst Joi = require('joi');\n\nSchema de validação com Joi\nconst userSchema = Joi.object({\nname: Joi.string()\n.min(3)\n.max(100)\n.required()\n.messages({\n'string.min': 'Nome deve ter no mínimo 3 caracteres',\n'string.max': 'Nome deve ter no máximo 100 caracteres',\n'any.required': 'Nome é obrigatório'\n}),\n\nemail: Joi.string()\n.email()\n.required()\n.messages({\n'string.email': 'Email inválido',\n'any.required': 'Email é obrigatório'\n}),\n\npassword: Joi.string()\n.pattern(/^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*])/)\n.min(8)\n.required()\n.messages({\n'string.pattern.base': 'Senha deve conter maiúscula, minúscula, número e caractere especial',\n'string.min': 'Senha deve ter no mínimo 8 caracteres'\n}),\n\nage: Joi.number()\n.integer()\n.min(18)\n.messages({\n'number.min': 'Idade mínima é 18 anos'\n})\n});\n\nMiddleware de validação com Joi\nconst validateUser = async (req, res, next) => {\ntry {\nawait userSchema.validateAsync(req.body, { abortEarly: false });\nnext();\n} catch (error) {\nconst errors = error.details.map(err => ({\nfield: err.path[0],\nmessage: err.message\n}));\nres.status(400).json({ errors });\n}\n};\n\nUsando express-validator\nconst { body, validationResult } = require('express-validator');\n\nRegras de validação\nconst validateUserRules = [\nbody('name')\n.trim()\n.isLength({ min: 3, max: 100 })\n.withMessage('Nome deve ter entre 3 e 100 caracteres'),\n\nbody('email')\n.trim()\n.isEmail()\n.normalizeEmail()\n.withMessage('Email inválido'),\n\nbody('password')\n.isLength({ min: 8 })\n.matches(/^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*])/)\n.withMessage('Senha deve atender aos requisitos mínimos'),\n\nbody('age')\n.optional()\n.isInt({ min: 18 })\n.withMessage('Idade mínima é 18 anos'),\n\nValidação customizada\nbody('email').custom(async (email) => {\nconst existingUser = await User.findOne({ email });\nif (existingUser) {\nthrow new Error('Email já cadastrado');\n}\n})\n];\n\nMiddleware de verificação de erros\nconst checkValidationResult = (req, res, next) => {\nconst errors = validationResult(req);\nif (!errors.isEmpty()) {\nreturn res.status(400).json({ errors: errors.array() });\n}\nnext();\n};\n\nExemplo de uso em rota\napp.post('/users',\nvalidateUserRules,\ncheckValidationResult,\nasync (req, res) => {\ntry {\nconst user = await User.create(req.body);\nres.status(201).json(user);\n} catch (error) {\nres.status(500).json({ error: 'Erro ao criar usuário' });\n}\n});\n\nValidação de Query Parameters\nconst validateSearchParams = [\nquery('page')\n.optional()\n.isInt({ min: 1 })\n.withMessage('Página deve ser um número maior que 0'),\n\nquery('limit')\n.optional()\n.isInt({ min: 1, max: 100 })\n.withMessage('Limite deve ser entre 1 e 100'),\n\nquery('sort')\n.optional()\n.isIn(['asc', 'desc'])\n.withMessage('Ordenação deve ser asc ou desc')\n];	\n- Garante integridade dos dados\n- Previne dados maliciosos\n- Melhora experiência do usuário\n- Reduz erros no banco de dados\n\n- Schema-based validation\n- Mensagens customizáveis\n- Validações complexas\n- Conversão de tipos automática\n\n- Middleware de validação\n- Sanitização de dados\n- Validações assíncronas\n- Validações customizadas\n\n- Valide dados na entrada\n- Use sanitização\n- Personalize mensagens de erro\n- Considere validações assíncronas\n- Trate campos opcionais	2025-01-29 20:23:12.527	6f8d148f-8ce7-4788-a934-0b3291a408ab	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.527
65b71da8-f580-4c25-bfbe-9c2fb026ff94	Testes com Jest	Implementando testes unitários e de integração com Jest	\nuserService.js\nconst UserService = {\nasync createUser(data) {\nconst user = await User.create(data);\nreturn user;\n},\n\nasync findUserById(id) {\nreturn await User.findById(id);\n}\n};\n\nuserService.test.js\ndescribe('UserService', () => {\nConfiguração antes dos testes\nbeforeAll(async () => {\nawait mongoose.connect(process.env.MONGO_URL);\n});\n\nLimpeza após cada teste\nafterEach(async () => {\nawait User.delet eMany({});\n});\n\nTeste unitário\ntest('deve criar um novo usuário', async () => {\nconst userData = {\nname: 'Test User',\nemail: 'test@example.com'\n};\n\nconst user = await UserService.createUser(userData);\n\nexpect(user).toHaveProperty('_id');\nexpect(user.name).toBe(userData.name);\nexpect(user.email).toBe(userData.email);\n});\n\nTeste com mock\ntest('deve lançar erro quando email já existe', async () => {\njest.spyOn(User, 'findOne').mockResolvedValue({ email: 'test@example.com' });\n\nawait expect(\nUserService.createUser({ email: 'test@example.com' })\n).rejects.toThrow('Email já existe');\n});\n\nTeste com matcher customizado\nexpect.extend({\ntoBeValidUser(received) {\nconst pass = received.name && received.email;\nreturn {\npass,\nmessage: () => 'Usuário deve ter nome e email'\n};\n}\n});\n\nTeste assíncrono com matcher customizado\ntest('deve retornar usuário válido', async () => {\nconst user = await UserService.findUserById(1);\nexpect(user).toBeValidUser();\n});\n});\n\nTestando controllers\ndescribe('UserController', () => {\nlet req, res, next;\n\nbeforeEach(() => {\nreq = {\nbody: {},\nparams: {}\n};\nres = {\njson: jest.fn(),\nstatus: jest.fn().mockReturnThis()\n};\nnext = jest.fn();\n});\n\ntest('deve criar usuário com sucesso', async () => {\nreq.body = {\nname: 'Test User',\nemail: 'test@example.com'\n};\n\nawait UserController.create(req, res, next);\n\nexpect(res.status).toHaveBeenCalledWith(201);\nexpect(res.json).toHaveBeenCalledWith(\nexpect.objectContaining({\nname: req.body.name,\nemail: req.body.email\n})\n);\n});\n});	\nJest:\n- Framework de teste completo\n- Fácil configuração\n- Mocking built-in\n- Cobertura de código\n- Assertions expressivas\n\nTipos de Testes:\n- Unitários: Funções isoladas\n- Integração: Múltiplos componentes\n- Mock: Simulação de dependências\n- Matchers: Validações específicas\n\nBoas Práticas:\n- Use beforeAll/afterAll\n- Limpe dados entre testes\n- Isole testes unitários\n- Mock dependências externas\n- Teste casos de erro	2025-01-29 20:23:12.534	f490822f-fce7-49ab-9270-776df5a905fe	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.534
b68c5d4c-239d-4b53-a052-e7138b57139d	Testes de API com Supertest	Testando endpoints HTTP com Supertest	\nconst request = require('supertest');\nconst app = require('../app');\nconst mongoose = require('mongoose');\n\ndescribe('API Tests', () => {\nbeforeAll(async () => {\nawait mongoose.connect(process.env.TEST_DB_URL);\n});\n\nafterAll(async () => {\nawait mongoose.connection.close();\n});\n\nTeste GET endpoint\ndescribe('GET /api/users', () => {\ntest('deve retornar lista de usuários', async () => {\nconst res = await request(app)\n.get('/api/users')\n.expect('Content-Type', /json/)\n.expect(200);\n\nexpect(Array.isArray(res.body)).toBeTruthy();\nexpect(res.body.length).toBeGreaterThanOrEqual(0);\n});\n\ntest('deve suportar paginação', async () => {\nconst res = await request(app)\n.get('/api/users')\n.query({ page: 1, limit: 10 })\n.expect(200);\n\nexpect(res.body.users).toHaveLength(10);\nexpect(res.body).toHaveProperty('totalPages');\n});\n});\n\nTeste POST endpoint\ndescribe('POST /api/users', () => {\ntest('deve criar novo usuário', async () => {\nconst userData = {\nname: 'Test User',\nemail: 'test@example.com',\npassword: 'password123'\n};\n\nconst res = await request(app)\n.post('/api/users')\n.send(userData)\n.expect(201);\n\nexpect(res.body).toMatchObject({\nname: userData.name,\nemail: userData.email\n});\n});\n\ntest('deve validar dados obrigatórios', async () => {\nconst res = await request(app)\n.post('/api/users')\n.send({})\n.expect(400);\n\nexpect(res.body.errors).toBeDefined();\n});\n});\n\nTeste com autenticação\ndescribe('Rotas autenticadas', () => {\nlet token;\n\nbeforeAll(async () => {\nLogin para obter token\nconst res = await request(app)\n.post('/api/login')\n.send({\nemail: 'test@example.com',\npassword: 'password123'\n});\n\ntoken = res.body.token;\n});\n\ntest('deve acessar rota protegida', async () => {\nawait request(app)\n.get('/api/profile')\n.set('Authorization', `Bearer ${token}`)\n.expect(200);\n});\n\ntest('deve rejeitar token inválido', async () => {\nawait request(app)\n.get('/api/profile')\n.set('Authorization', 'Bearer invalid')\n.expect(401);\n});\n});\n});	\nSupertest:\n- Testes de endpoints HTTP\n- Integração com Express\n- Assertions HTTP\n- Suporte a cookies/headers\n- Validação de respostas\n\nCenários de Teste:\n- CRUD operations\n- Autenticação/Autorização\n- Validação de dados\n- Paginação/Filtros\n- Uploads/Downloads\n\nEstrutura de Testes:\n- Organização por rotas\n- Setup/Teardown\n- Dados de teste\n- Verificação de respostas\n- Status codes corretos	2025-01-29 20:23:12.536	4ff4b639-5cf9-44af-9489-e9467b223a28	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.536
80a8a1d2-4abc-4778-a5ec-6146facb2462	Debugging em Node.js	Técnicas e ferramentas para debug em Node.js	\nDebug com console\nconsole.log('Dado:', data);\nconsole.error('Erro:', error);\nconsole.warn('Aviso:', warning);\nconsole.table(arrayData);\nconsole.time('operacao');\ncódigo...\nconsole.timeEnd('operacao');\n\nDebug com inspector\nExecute: node --inspect app.js\ndebugger;\nasync function processData(data) {\ndebugger;  Ponto de parada\nconst result = await someOperation(data);\nreturn result;\n}\n\nDebug com Debug module\nconst debug = require('debug')('app:server');\nconst debugDb = require('debug')('app:db');\n\ndebug('Servidor iniciado na porta %d', 3000);\ndebugDb('Conectado ao banco de dados');\n\nError handling avançado\nclass AppError extends Error {\nconst ructor(message, statusCode) {\nsuper(message);\nthis.statusCode = statusCode;\nthis.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';\nthis.isOperational = true;\n\nError.captureStackTrace(this, this.const ructor);\n}\n}\n\nMiddleware de erro global\napp.use((err, req, res, next) => {\nerr.statusCode = err.statusCode || 500;\nerr.status = err.status || 'error';\n\nif (process.env.NODE_ENV === 'development') {\nres.status(err.statusCode).json({\nstatus: err.status,\nerror: err,\nmessage: err.message,\nstack: err.stack\n});\n} else {\nres.status(err.statusCode).json({\nstatus: err.status,\nmessage: err.isOperational ? err.message : 'Erro interno'\n});\n}\n});\n\nPerformance profiling\nconst { PerformanceObserver, performance } = require('perf_hooks');\n\nconst obs = new PerformanceObserver((items) => {\nitems.getEntries().forEach((entry) => {\ndebug(`${entry.name}: ${entry.duration}ms`);\n});\n});\nobs.observe({ entryTypes: ['measure'] });\n\nperformance.mark('A');\ncódigo para medir\nperformance.mark('B');\nperformance.measure('Operação', 'A', 'B');	\nTécnicas de Debug:\n- Console methods\n- Node Inspector\n- Debug module\n- Error handling\n- Performance profiling\n\nFerramentas:\n- Chrome DevTools\n- VS Code Debugger\n- Postman/Insomnia\n- Morgan (HTTP logging)\n- Debug npm package\n\nBoas Práticas:\n- Use debug ao invés de console\n- Estruture logs por módulos\n- Capture stack traces\n- Diferencie ambientes\n- Monitore performance	2025-01-29 20:23:12.538	06d29db9-1137-4460-86a3-af9615458481	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.538
bac3e31d-3b74-48cf-960a-51e2d6ce1e6b	Logging com Winston	Implementando logs estruturados com Winston	\nconst winston = require('winston');\nconst { format } = winston;\n\nConfiguração do logger\nconst logger = winston.createLogger({\nlevel: process.env.LOG_LEVEL || 'info',\nformat: format.combine(\nformat.timestamp({\nformat: 'YYYY-MM-DD HH:mm:ss'\n}),\nformat.errors({ stack: true }),\nformat.splat(),\nformat.json()\n),\ndefaultMeta: { service: 'api' },\ntransports: [\nArquivo de erro\nnew winston.transports.File({\nfilename: 'logs/error.log',\nlevel: 'error',\nmaxsize: 5242880, 5MB\nmaxFiles: 5\n}),\nTodos os logs\nnew winston.transports.File({\nfilename: 'logs/combined.log'\n})\n]\n});\n\nLogs em desenvolvimento\nif (process.env.NODE_ENV !== 'production') {\nlogger.add(new winston.transports.Console({\nformat: format.combine(\nformat.colorize(),\nformat.simple()\n)\n}));\n}\n\nExemplos de uso\nlogger.info('Servidor iniciado', {\nport: 3000,\nenv: process.env.NODE_ENV\n});\n\nlogger.error('Erro na conexão', {\nerror: err.message,\nstack: err.stack\n});\n\nlogger.warn('Recurso depreciado', {\nresource: 'oldEndpoint',\nsuggestion: 'Use newEndpoint'\n});\n\nMiddleware de logging\napp.use((req, res, next) => {\nlogger.info('Requisição recebida', {\nmethod: req.method,\nurl: req.url,\nip: req.ip,\nuserAgent: req.get('user-agent')\n});\nnext();\n});\n\nLog de erros\nprocess.on('uncaughtException', (err) => {\nlogger.error('Erro não tratado', {\nerror: err.message,\nstack: err.stack\n});\nprocess.exit(1);\n});\n\nLogs personalizados\nconst requestLogger = winston.createLogger({\ntransports: [\nnew winston.transports.File({\nfilename: 'logs/requests.log',\nformat: format.combine(\nformat.timestamp(),\nformat.json()\n)\n})\n]\n});	\n- Logger multi-transport\n- Níveis de log customizáveis\n- Formatos flexíveis\n- Rotação de arquivos\n- Múltiplos destinos\n\n- error: Erros críticos\n- warn: Avisos importantes\n- info: Informações gerais\n- debug: Debug detalhado\n- silly: Dados verbosos\n\n- Formato dos logs\n- Destino (arquivo/console)\n- Rotação de arquivos\n- Metadata adicional\n- Colorização em dev\n\n- Estruture logs em JSON\n- Use diferentes transportes\n- Configure por ambiente\n- Inclua metadata útil\n- Mantenha rotação de logs	2025-01-29 20:23:12.54	ab3df249-6150-4b72-88b6-cd5b771b62cc	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.54
3c16be39-20b1-403f-995d-c015879aacd2	Cluster e PM2	Escalando aplicações Node.js com Cluster e PM2	\nUsando módulo Cluster nativo\nconst cluster = require('cluster');\nconst numCPUs = require('os').cpus().length;\nconst express = require('express');\n\nif (cluster.isPrimary) {\nProcesso principal\nconsole.log(`Master ${process.pid} iniciando`);\n\nFork workers\nfor (let i = 0; i < numCPUs; i++) {\ncluster.fork();\n}\n\ncluster.on('exit', (worker, code, signal) => {\nconsole.log(`Worker ${worker.process.pid} morreu`);\nReinicia worker morto\ncluster.fork();\n});\n} else {\nProcessos worker\nconst app = express();\n\napp.get('/', (req, res) => {\nres.send(`Worker ${process.pid} respondendo`);\n});\n\napp.listen(3000);\nconsole.log(`Worker ${process.pid} iniciado`);\n}\n\nConfiguração PM2 (ecosystem.config.js)\nmodule.exports = {\napps: [{\nname: "app",\nscript: "./app.js",\ninstances: "max",\nexec_mode: "cluster",\nwatch: true,\nenv: {\nNODE_ENV: "development",\n},\nenv_production: {\nNODE_ENV: "production",\n},\nmax_memory_restart: "1G",\nerror_file: "logs/error.log",\nout_file: "logs/out.log",\nmerge_logs: true,\nlog_date_format: "YYYY-MM-DD HH:mm:ss Z",\n\nMonitoramento\nmonitor: true,\nmax_restarts: 10,\nmin_uptime: "10s",\n\nGraceful shutdown\nkill_timeout: 3000,\nwait_ready: true,\n}]\n}	\n- Aproveita múltiplos CPUs\n- Distribui carga entre workers\n- Aumenta disponibilidade\n- Reinicia processos mortos\n\n- Gerenciador de processos\n- Balanceamento de carga\n- Monitoramento em tempo real\n- Logs centralizados\n- Deploy zero-downtime\n\n- Melhor performance\n- Alta disponibilidade\n- Recuperação automática\n- Monitoramento fácil\n- Gestão simplificada	2025-01-29 20:23:12.549	8a81f6cb-f1cb-4d97-b35a-04601381d8dc	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.549
9b1c3370-8c4d-45e0-99ee-2db6abc0fc6e	Containerização com Docker	Containerizando aplicações Node.js com Docker	\nDockerfile\nFROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package*.json ./\n\nRUN npm ci --only=production\n\nCOPY . .\n\nEXPOSE 3000\n\nCMD ["npm", "start"]\n\ndocker-compose.yml\nversion: '3.8'\n\nservices:\napp:\nbuild: .\nports:\n- "3000:3000"\nenvironment:\n- NODE_ENV=production\n- MONGO_URI=mongodb://mongo:27017/app\ndepends_on:\n- mongo\nvolumes:\n- ./logs:/app/logs\nnetworks:\n- app-network\ndeploy:\nreplicas: 2\nrestart_policy:\ncondition: on-failure\nmax_attempts: 3\nhealthcheck:\ntest: ["CMD", "curl", "-f", "http://localhost:3000/health"]\ninterval: 30s\ntimeout: 10s\nretries: 3\n\nmongo:\nimage: mongo:latest\nvolumes:\n- mongo-data:/data/db\nnetworks:\n- app-network\n\nvolumes:\nmongo-data:\n\nnetworks:\napp-network:\ndriver: bridge\n\n.dockerignore\nnode_modules\nnpm-debug.log\nDockerfile\n.dockerignore\n.git\n.gitignore\nREADME.md\n.env\n*.log\nlogs/\n\nScript de build e deploy\ndocker build -t minhaapp:latest .\ndocker-compose up -d --scale app=3	\n- Containers isolados\n- Ambiente consistente\n- Fácil escalabilidade\n- Deploy simplificado\n- Gerenciamento de recursos\n\n- Imagens leves (alpine)\n- Multi-stage builds\n- Cache de camadas\n- Configuração via env\n- Health checks\n\n- Múltiplos serviços\n- Redes isoladas\n- Volumes persistentes\n- Escalabilidade\n- Dependências	2025-01-29 20:23:12.551	dc91d3c3-264e-4ab8-bfc2-a90827d988fd	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.551
31fd2ab6-3a72-401d-95e8-ff9b31854938	Estratégias de Cache	Implementando diferentes níveis de cache	\nconst Redis = require('ioredis');\nconst redis = new Redis();\nconst mcache = require('memory-cache');\n\nCache em memória\nfunction cacheMiddleware(duration) {\nreturn (req, res, next) => {\nconst key = 'cache:' + req.originalUrl;\nconst cachedResponse = mcache.get(key);\n\nif (cachedResponse) {\nreturn res.send(cachedResponse);\n}\n\nres.sendResponse = res.send;\nres.send = (body) => {\nmcache.put(key, body, duration * 1000);\nres.sendResponse(body);\n};\nnext();\n};\n}\n\nCache Redis\nasync function cacheData(key, data, ttl = 3600) {\nawait redis.setex(key, ttl, JSON.stringify(data));\n}\n\nasync function getCachedData(key) {\nconst data = await redis.get(key);\nreturn data ? JSON.parse(data) : null;\n}\n\nExemplo de uso\napp.get('/users', cacheMiddleware(300), async (req, res) => {\ntry {\nconst users = await User.find();\nres.json(users);\n} catch (error) {\nres.status(500).json({ error: 'Erro ao buscar usuários' });\n}\n});\n\nCache em camadas\nasync function getUser(id) {\nVerifica cache em memória\nconst memCache = mcache.get(`user:${id}`);\nif (memCache) return memCache;\n\nVerifica Redis\nconst redisCache = await getCachedData(`user:${id}`);\nif (redisCache) {\nAtualiza cache em memória\nmcache.put(`user:${id}`, redisCache, 60 * 1000);\nreturn redisCache;\n}\n\nBusca no banco\nconst user = await User.findById(id);\nif (user) {\nAtualiza ambos os caches\nmcache.put(`user:${id}`, user, 60 * 1000);\nawait cacheData(`user:${id}`, user, 3600);\n}\n\nreturn user;\n}\n\nCache condicional (ETags)\napp.get('/api/data', async (req, res) => {\nconst data = await getData();\nconst etag = generateETag(data);\n\nif (req.header('If-None-Match') === etag) {\nreturn res.status(304).send();\n}\n\nres.setHeader('ETag', etag);\nres.json(data);\n});	\n- Memória (mais rápido)\n- Redis (distribuído)\n- HTTP (cliente)\n- CDN (edge)\n\n- Cache em camadas\n- TTL variável\n- Cache condicional\n- Cache invalidation\n- Cache warming\n\n- Consistência vs Performance\n- Memória vs Persistência\n- Invalidação estratégica\n- Monitoramento\n- Fallbacks	2025-01-29 20:23:12.574	ce3a14c6-f1e5-4441-a730-1d112d8ffca3	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.574
ba57c2f2-ad0d-4c7a-b614-52058f7cdfc3	WebSockets	Comunicação bidirecional em tempo real com WebSocket	\nconst WebSocket = require('ws');\nconst server = new WebSocket.Server({ port: 8080 });\n\nGerenciando conexões\nconst clients = new Map();\n\nserver.on('connection', (ws, req) => {\nconst id = Math.random().toString(36).substring(7);\nconst metadata = { id };\n\nclients.set(ws, metadata);\n\nEnviando mensagem de boas-vindas\nws.send(JSON.stringify({\ntype: 'welcome',\nmessage: `Bem-vindo! Seu ID é ${id}`\n}));\n\nRecebendo mensagens\nws.on('message', (messageData) => {\nconst message = JSON.parse(messageData);\n\nswitch (message.type) {\ncase 'chat':\nbroadcast({\ntype: 'chat',\nuserId: metadata.id,\nmessage: message.content\n});\nbreak;\n\ncase 'typing':\nbroadcast({\ntype: 'typing',\nuserId: metadata.id\n}, ws); Excluir remetente\nbreak;\n}\n});\n\nTratando desconexão\nws.on('close', () => {\nclients.delet e(ws);\nbroadcast({\ntype: 'userLeft',\nuserId: metadata.id\n});\n});\n});\n\nFunção de broadcast\nfunction broadcast(message, exclude) {\nconst data = JSON.stringify(message);\n[...clients.keys()].forEach((client) => {\nif (client !== exclude && client.readyState === WebSocket.OPEN) {\nclient.send(data);\n}\n});\n}\n\nExemplo de cliente\nconst clientExample = `\nconst ws = new WebSocket('ws://localhost:8080');\n\nws.onopen = () => {\nconsole.log('Conectado ao servidor');\n};\n\nws.onmessage = (event) => {\nconst data = JSON.parse(event.data);\nswitch (data.type) {\ncase 'welcome':\nconsole.log(data.message);\nbreak;\ncase 'chat':\ndisplayMessage(data);\nbreak;\ncase 'typing':\nshowTypingIndicator(data.userId);\nbreak;\n}\n};\n\nws.onclose = () => {\nconsole.log('Desconectado');\n};\n\nEnviando mensagens\nfunction sendMessage(content) {\nws.send(JSON.stringify({\ntype: 'chat',\ncontent\n}));\n}\n\nfunction sendTyping() {\nws.send(JSON.stringify({\ntype: 'typing'\n}));\n}`	\nWebSocket:\n- Comunicação full-duplex\n- Conexão persistente\n- Baixa latência\n- Ideal para tempo real\n- Suporte a broadcast\n\n- Chat em tempo real\n- Jogos online\n- Dashboards ao vivo\n- Notificações push\n- Colaboração em tempo real\n\n- Gerenciamento de conexões\n- Reconexão automática\n- Heartbeat\n- Escalabilidade\n- Fallback para polling	2025-01-29 20:23:12.595	b2cde2dd-800b-4f38-8880-efebdb0055dc	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.595
615df543-6d9f-42e0-b24d-4924534646ee	CI/CD (Integração e Entrega Contínua)	Configurando pipeline de CI/CD com GitHub Actions	\n# .github/workflows/main.yml\nname: Node.js CI/CD\n\non:\npush:\nbranches: [ main ]\npull_request:\nbranches: [ main ]\n\njobs:\ntest:\nruns-on: ubuntu-latest\n\nservices:\nmongodb:\nimage: mongo:latest\nports:\n- 27017:27017\nredis:\nimage: redis:latest\nports:\n- 6379:6379\n\nsteps:\n- uses: actions/checkout@v3\n\n- name: Setup Node.js\nuses: actions/setup-node@v3\nwith:\nnode-version: '18'\ncache: 'npm'\n\n- name: Install dependencies\nrun: npm ci\n\n- name: Run linter\nrun: npm run lint\n\n- name: Run tests with coverage\nrun: npm run test:coverage\n\n- name: Upload coverage reports\nuses: codecov/codecov-action@v3\n\nbuild:\nneeds: test\nruns-on: ubuntu-latest\n\nsteps:\n- uses: actions/checkout@v3\n\n- name: Build Docker image\nrun: docker build -t myapp:{{ github.sha }} .\n\n- name: Login to Docker Hub\nuses: docker/login-action@v2\nwith:\nusername: {{ secrets.DOCKER_USERNAME }}\npassword: {{ secrets.DOCKER_PASSWORD }}\n\n- name: Push Docker image\nrun: |\ndocker tag myapp:{{ github.sha }} myorg/myapp:latest\ndocker push myorg/myapp:latest\n\ndeploy-staging:\nneeds: build\nruns-on: ubuntu-latest\nenvironment: staging\n\nsteps:\n- name: Deploy to staging\nuses: digitalocean/action-doctl@v2\nwith:\ntoken: {{ secrets.DIGITALOCEAN_TOKEN }}\n\n- run: doctl kubernetes cluster kubeconfig save {{ secrets.CLUSTER_NAME }}\n\n- name: Update deployment\nrun: |\nkubectl set image deployment/myapp-staging myapp=myorg/myapp:latest\nkubectl rollout status deployment/myapp-staging\n\ndeploy-production:\nneeds: deploy-staging\nruns-on: ubuntu-latest\nenvironment: production\n\nsteps:\n- name: Deploy to production\nif: github.ref == 'refs/heads/main'\nuses: digitalocean/action-doctl@v2\nwith:\ntoken: {{ secrets.DIGITALOCEAN_TOKEN }}\n\n- run: doctl kubernetes cluster kubeconfig save {{ secrets.CLUSTER_NAME }}\n\n- name: Update deployment\nrun: |\nkubectl set image deployment/myapp-production myapp=myorg/myapp:latest\nkubectl rollout status deployment/myapp-production\n\n# scripts/deploy.sh\n#!/bin/bash\nset -e\n\necho "Iniciando deploy..."\n\n# Variáveis de ambiente\nexport NODE_ENV=production\nexport $(cat .env.production | xargs)\n\n# Backup do banco\necho "Realizando backup..."\nmongodump --uri $MONGO_URI --archive=backup.gz --gzip\n\n# Deploy\necho "Atualizando aplicação..."\npm2 deploy ecosystem.config.js production\n\n# Migrations\necho "Executando migrations..."\nnpm run migrate:up\n\necho "Deploy concluído com sucesso!"	\n- Integração Contínua (CI)\n* Testes automatizados\n* Análise de código\n* Build do projeto\n* Relatórios de cobertura\n\n- Entrega Contínua (CD)\n* Build de imagem Docker\n* Deploy automático\n* Ambientes separados\n* Rollback automático\n\n- Lint e testes\n- Build e empacotamento\n- Deploy em staging\n- Testes de integração\n- Deploy em produção\n\n- Secrets seguras\n- Ambientes isolados\n- Rollback plan\n- Monitoramento\n- Notificações	2025-01-29 20:23:12.577	4243b64e-b6c1-469e-9313-50aa68ca0771	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.577
74ed9baa-d031-44e6-aa12-34d92d5d3377	Monitoramento	Monitoramento de aplicação Node.js em produção	\nMonitoramento básico com Express\nconst responseTime = require('response-time');\nconst Prometheus = require('prom-client');\n\nMétricas Prometheus\nconst collectDefaultMetrics = Prometheus.collectDefaultMetrics;\ncollectDefaultMetrics({ timeout: 5000 });\n\nContadores personalizados\nconst httpRequestsTotal = new Prometheus.Counter({\nname: 'http_requests_total',\nhelp: 'Total de requisições HTTP',\nlabelNames: ['method', 'route', 'status']\n});\n\nconst httpRequestDuration = new Prometheus.Histogram({\nname: 'http_request_duration_seconds',\nhelp: 'Duração das requisições HTTP',\nlabelNames: ['method', 'route', 'status']\n});\n\nMiddleware de métricas\napp.use(responseTime((req, res, time) => {\nhttpRequestsTotal.inc({\nmethod: req.method,\nroute: req.route?.path || req.path,\nstatus: res.statusCode\n});\n\nhttpRequestDuration.observe(\n{\nmethod: req.method,\nroute: req.route?.path || req.path,\nstatus: res.statusCode\n},\ntime / 1000\n);\n}));\n\nEndpoint de métricas\napp.get('/metrics', async (req, res) => {\nres.set('Content-Type', Prometheus.register.contentType);\nconst metrics = await Prometheus.register.metrics();\nres.send(metrics);\n});\n\nHealth check\napp.get('/health', async (req, res) => {\ntry {\nVerifica conexão com banco\nawait mongoose.connection.db.admin().ping();\n\nVerifica Redis\nawait redis.ping();\n\nres.json({\nstatus: 'healthy',\nuptime: process.uptime(),\ntimestamp: Date.now(),\nmemory: process.memoryUsage()\n});\n} catch (error) {\nres.status(503).json({\nstatus: 'unhealthy',\nerror: error.message\n});\n}\n});\n\nMonitoramento de eventos\nprocess.on('uncaughtException', (error) => {\nconsole.error('Erro não tratado:', error);\nNotifica serviço de monitoramento\nnotifyError(error);\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\nconsole.error('Promise não tratada:', reason);\nNotifica serviço de monitoramento\nnotifyError(reason);\n});\n\nMétricas de memória\nsetInterval(() => {\nconst used = process.memoryUsage();\nconsole.log({\nrss: `${Math.round(used.rss / 1024 / 1024)}MB`,\nheapTotal: `${Math.round(used.heapTotal / 1024 / 1024)}MB`,\nheapUsed: `${Math.round(used.heapUsed / 1024 / 1024)}MB`,\nexternal: `${Math.round(used.external / 1024 / 1024)}MB`\n});\n}, 30000);	\n- Uso de recursos (CPU, memória)\n- Latência de requisições\n- Taxa de erros\n- Throughput\n- Health status\n\n- Prometheus/Grafana\n- New Relic\n- Datadog\n- PM2 Monitoring\n- Elasticsearch\n\n- Performance\n- Disponibilidade\n- Erros e exceções\n- Recursos do sistema\n- Métricas de negócio	2025-01-29 20:23:12.58	a50c16ae-628a-4c77-beca-4002025e078d	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.58
481e90c2-016d-4e3d-aa39-fa4493a13ee1	Event Emitter	Trabalhando com eventos personalizados em Node.js	\nconst EventEmitter = require('events');\n\nCriando emissor de eventos personalizado\nclass OrderEmitter extends EventEmitter {}\n\nconst orderEvents = new OrderEmitter();\n\nOuvindo eventos\norderEvents.on('orderCreated', (order) => {\nconsole.log('Novo pedido criado:', order.id);\nEnviar email de confirmação\n});\n\norderEvents.on('orderPaid', (order) => {\nconsole.log('Pagamento confirmado:', order.id);\nIniciar processo de envio\n});\n\norderEvents.on('orderShipped', (order) => {\nconsole.log('Pedido enviado:', order.id);\nNotificar cliente\n});\n\nOuvindo uma única vez\norderEvents.once('specialEvent', (data) => {\nconsole.log('Este listener só executa uma vez');\n});\n\nEmissor com erro\norderEvents.on('error', (error) => {\nconsole.error('Erro no processamento:', error);\n});\n\nExemplo de uso\nasync function processOrder(orderData) {\ntry {\nCriar pedido\nconst order = await Order.create(orderData);\norderEvents.emit('orderCreated', order);\n\nProcessar pagamento\nawait processPayment(order);\norderEvents.emit('orderPaid', order);\n\nEnviar pedido\nawait shipOrder(order);\norderEvents.emit('orderShipped', order);\n} catch (error) {\norderEvents.emit('error', error);\n}\n}	\n- Sistema de eventos assíncronos\n- Padrão Observer\n- Comunicação desacoplada\n- Múltiplos listeners\n- Tratamento de erros\n\n- Notificações\n- Logging\n- Webhooks\n- Processamento async\n- Fluxos complexos	2025-01-29 20:23:12.59	b7021958-084f-425f-bcf4-ba3a29304a1c	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.59
9eb4e9f4-5827-4e82-952b-08fd15b4f4e4	Worker Threads	Processamento paralelo com Worker Threads	\nconst { Worker, isMainThread, parentPort, workerData } = require('worker_threads');\n\nif (isMainThread) {\nCódigo do thread principal\nfunction runWorker(data) {\nreturn new Promise((resolve, reject) => {\nconst worker = new Worker(__filename, {\nworkerData: data\n});\n\nworker.on('message', resolve);\nworker.on('error', reject);\nworker.on('exit', (code) => {\nif (code !== 0) {\nreject(new Error(`Worker parou com código ${code}`));\n}\n});\n});\n}\n\nPool de Workers\nclass WorkerPool {\nconst ructor(numWorkers, workerScript) {\nthis.workers = [];\nthis.activeWorkers = 0;\nthis.tasks = [];\n\nfor (let i = 0; i < numWorkers; i++) {\nthis.workers.push(new Worker(workerScript));\n}\n}\n\nrunTask(data) {\nreturn new Promise((resolve, reject) => {\nconst task = { data, resolve, reject };\n\nif (this.activeWorkers < this.workers.length) {\nthis.runWorkerTask(task);\n} else {\nthis.tasks.push(task);\n}\n});\n}\n\nrunWorkerTask(task) {\nconst worker = this.workers[this.activeWorkers++];\n\nworker.postMessage(task.data);\n\nworker.once('message', (result) => {\ntask.resolve(result);\nthis.activeWorkers--;\n\nif (this.tasks.length > 0) {\nthis.runWorkerTask(this.tasks.shift());\n}\n});\n\nworker.once('error', task.reject);\n}\n}\n\nUso do pool\nconst pool = new WorkerPool(4, './worker.js');\n\nExemplo de uso\nasync function processArray() {\nconst tasks = [1, 2, 3, 4, 5];\nconst results = await Promise.all(\ntasks.map(task => pool.runTask(task))\n);\nconsole.log('Resultados:', results);\n}\n\n} else {\nCódigo do worker\nparentPort.on('message', (data) => {\nProcessamento intensivo\nconst result = heavyComputation(data);\nparentPort.postMessage(result);\n});\n\nfunction heavyComputation(data) {\nSimulação de processamento pesado\nlet result = 0;\nfor (let i = 0; i < 1000000; i++) {\nresult += Math.sqrt(data * i);\n}\nreturn result;\n}\n}	\n- Processamento paralelo real\n- Compartilhamento de memória\n- Ideal para CPU intensivo\n- Pool de workers\n- Comunicação bidirecional\n\n- Cálculos complexos\n- Processamento de imagens\n- Parse de arquivos grandes\n- Machine Learning\n- Criptografia	2025-01-29 20:23:12.593	d262a5e0-79c2-41f0-9556-7b2e51efcbfe	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.593
19e7ae79-c446-486b-9e1f-a65ee68d10ed	Filtros de Grupo (HAVING)	Filtrando grupos com a cláusula HAVING	\n-- Filtro básico com HAVING\nSELECT cidade, COUNT(*) as total_usuarios\nFROM usuarios\nGROUP BY cidade\nHAVING COUNT(*) > 100;\n-- retorno: cidades com mais de 100 usuários\n\n-- Comparando com média\nSELECT departamento, AVG(salario) as media\nFROM funcionarios\nGROUP BY departamento\nHAVING AVG(salario) > 5000;\n-- retorno: departamentos com média salarial > 5000\n\n-- Múltiplas condições\nSELECT categoria, SUM(vendas) as total\nFROM produtos\nGROUP BY categoria\nHAVING SUM(vendas) > 1000\nAND COUNT(*) >= 5;\n-- retorno: categorias com vendas > 1000 e 5+ produtos\n\n-- Combinando WHERE e HAVING\nSELECT marca, COUNT(*) as total\nFROM produtos\nWHERE preco > 100\nGROUP BY marca\nHAVING COUNT(*) > 10;\n-- retorno: marcas com mais de 10 produtos caros	\nHAVING:\n- Filtra grupos (não registros)\n- Usado após GROUP BY\n- Trabalha com agregações\n- Diferente do WHERE\n- Pode usar funções agregadas\n- Executa após agrupamento	2025-01-29 20:23:12.636	f8e386d7-84fd-4774-91b5-f70af74c42c7	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.636
a49e426c-9861-4ccd-b89b-12b753e38137	GraphQL	Implementando API GraphQL com Apollo Server	\nconst { ApolloServer, gql } = require('apollo-server-express');\nconst express = require('express');\n\nSchema GraphQL\nconst typeDefs = gql`\ntype User {\nid: ID!\nname: String!\nemail: String!\nposts: [Post!]\n}\n\ntype Post {\nid: ID!\ntitle: String!\ncontent: String!\nauthor: User!\ncomments: [Comment!]\n}\n\ntype Comment {\nid: ID!\ncontent: String!\nauthor: User!\npost: Post!\n}\n\ntype Query {\nusers: [User!]!\nuser(id: ID!): User\nposts: [Post!]!\npost(id: ID!): Post\n}\n\ntype Mutation {\ncreateUser(name: String!, email: String!): User!\ncreatePost(title: String!, content: String!, authorId: ID!): Post!\ncreateComment(content: String!, authorId: ID!, postId: ID!): Comment!\n}\n\ntype Subscription {\nnewPost: Post!\nnewComment(postId: ID!): Comment!\n}\n`;\n\nResolvers\nconst resolvers = {\nQuery: {\nusers: async () => await User.find(),\nuser: async (_, { id }) => await User.findById(id),\nposts: async () => await Post.find(),\npost: async (_, { id }) => await Post.findById(id)\n},\n\nUser: {\nposts: async (parent) => await Post.find({ authorId: parent.id })\n},\n\nPost: {\nauthor: async (parent) => await User.findById(parent.authorId),\ncomments: async (parent) => await Comment.find({ postId: parent.id })\n},\n\nMutation: {\ncreateUser: async (_, { name, email }) => {\nconst user = new User({ name, email });\nawait user.save();\nreturn user;\n},\n\ncreatePost: async (_, { title, content, authorId }) => {\nconst post = new Post({ title, content, authorId });\nawait post.save();\npubsub.publish('NEW_POST', { newPost: post });\nreturn post;\n}\n},\n\nSubscription: {\nnewPost: {\nsubscribe: () => pubsub.asyncIterator(['NEW_POST'])\n},\nnewComment: {\nsubscribe: (_, { postId }) =>\npubsub.asyncIterator([`NEW_COMMENT.${postId}`])\n}\n}\n};\n\nConfiguração do Apollo Server\nasync function startApolloServer() {\nconst app = express();\n\nconst server = new ApolloServer({\ntypeDefs,\nresolvers,\ncontext: async ({ req }) => {\nContexto com auth\nconst token = req.headers.authorization || '';\nconst user = await getUserFromToken(token);\nreturn { user };\n},\nformatError: (error) => {\nFormatação de erros\nconsole.error(error);\nreturn new Error('Erro interno');\n}\n});\n\nawait server.start();\nserver.applyMiddleware({ app });\n\nreturn app;\n}	\n- Query language para APIs\n- Requisições precisas\n- Resolução eficiente\n- Schema tipado\n- Introspection\n\n- Types: Define estrutura\n- Queries: Consultas\n- Mutations: Modificações\n- Subscriptions: Tempo real\n- Resolvers: Implementação\n\n- Evita over/under fetching\n- Documentação automática\n- Tipagem forte\n- Performance otimizada\n- Flexibilidade para clientes	2025-01-29 20:23:12.598	3db3cd8a-0624-426a-b2a3-a58393e48910	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.598
3c51a344-e35b-4784-95b0-dd6707586660	Microserviços	Implementando arquitetura de microserviços com Node.js	\nService Registry com Eureka\nconst Eureka = require('eureka-js-client').Eureka;\n\nconst client = new Eureka({\ninstance: {\napp: 'user-service',\nhostName: 'localhost',\nipAddr: '127.0.0.1',\nport: 3000,\nstatusPageUrl: 'http://localhost:3000/info',\nhealthCheckUrl: 'http://localhost:3000/health'\n},\neureka: {\nhost: 'localhost',\nport: 8761,\nservicePath: '/eureka/apps/'\n}\n});\n\nAPI Gateway\nconst gateway = require('fast-gateway');\n\nconst server = gateway({\nroutes: [{\nprefix: '/users',\ntarget: 'http://localhost:3001'\n}, {\nprefix: '/orders',\ntarget: 'http://localhost:3002'\n}]\n});\n\nComunicação entre serviços com RabbitMQ\nconst amqp = require('amqplib');\n\nasync function setupMessageQueue() {\nconst connection = await amqp.connect('amqp://localhost');\nconst channel = await connection.createChannel();\n\nSetup das filas\nawait channel.assertQueue('order_created');\nawait channel.assertQueue('payment_processed');\n\nreturn channel;\n}\n\nServiço de Pedidos\nclass OrderService {\nasync createOrder(orderData) {\nconst order = await Order.create(orderData);\n\nPublica evento\nchannel.sendToQueue(\n'order_created',\nBuffer.from(JSON.stringify(order))\n);\n\nreturn order;\n}\n\nConsumidor de eventos\nasync setupConsumers() {\nchannel.consume('payment_processed', async (data) => {\nconst payment = JSON.parse(data.content);\nawait this.updateOrderStatus(payment.orderId, 'paid');\nchannel.ack(data);\n});\n}\n}\n\nCircuit Breaker\nconst CircuitBreaker = require('opossum');\n\nconst breaker = new CircuitBreaker(async function() {\nconst response = await axios.get('http://payment-service/status');\nreturn response.data;\n}, {\ntimeout: 3000,\nerrorThresholdPercentage: 50,\nresetTimeout: 30000\n});\n\nbreaker.fallback(() => ({ status: 'unavailable' }));\n\nDescoberta de Serviço\nasync function callUserService(userId) {\nconst instances = await serviceRegistry.getInstances('user-service');\nconst instance = instances[Math.floor(Math.random() * instances.length)];\nreturn axios.get(`http://${instance.host}:${instance.port}/users/${userId}`);\n}\n\nHealth Check\napp.get('/health', async (req, res) => {\nconst health = {\nstatus: 'UP',\ntimestamp: new Date(),\nservice: 'order-service',\ndependencies: {\ndatabase: await checkDatabase(),\nmessageQueue: await checkMessageQueue(),\npaymentService: await breaker.fire()\n}\n};\n\nconst isHealthy = Object.values(health.dependencies)\n.every(dep => dep.status === 'UP');\n\nres.status(isHealthy ? 200 : 503).json(health);\n});\n\nTracing distribuído\nconst opentelemetry = require('@opentelemetry/api');\nconst { NodeTracerProvider } = require('@opentelemetry/node');\nconst { JaegerExporter } = require('@opentelemetry/exporter-jaeger');\n\nconst provider = new NodeTracerProvider();\nconst exporter = new JaegerExporter();\nprovider.addSpanProcessor(new SimpleSpanProcessor(exporter));\nprovider.register();\n\nconst tracer = opentelemetry.trace.getTracer('order-service');	\n- Serviços independentes\n- Comunicação via API/mensagens\n- Banco de dados próprio\n- Escalabilidade independente\n- Deploy isolado\n\n- API Gateway\n- Service Registry\n- Message Broker\n- Circuit Breaker\n- Tracing distribuído\n\n- Event Sourcing\n- CQRS\n- Saga Pattern\n- Bulkhead\n- Service Mesh\n\n- Resiliência\n- Service Discovery\n- Load Balancing\n- Monitoramento\n- Distributed Tracing	2025-01-29 20:23:12.601	2a18ceed-f849-4b6a-a43d-195eb502e6a0	6ae0814b-a033-483b-91f2-dc1996076c37	2025-01-29 20:23:12.601
f661c64b-a5ce-4473-90b0-79008ee9f089	SELECT Básico	Consultas básicas com SELECT em SQL	\n-- Selecionar todas as colunas\nSELECT * FROM usuarios;\n-- retorno: todas as colunas e registros da tabela usuarios\n\n-- Selecionar colunas específicas\nSELECT nome, email FROM usuarios;\n-- retorno: apenas nome e email dos usuários\n\n-- Selecionar com alias (apelido)\nSELECT\nnome AS nome_usuario,\nemail AS email_contato\nFROM usuarios;\n-- retorno: colunas renomeadas com alias\n\n-- Selecionar com expressões\nSELECT\nnome,\npreco,\npreco * 0.9 AS preco_com_desconto\nFROM produtos;\n-- retorno: nome, preço e preço com 10% de desconto\n\n-- Concatenar colunas\nSELECT\nnome || ' - ' || email AS info_usuario\nFROM usuarios;\n-- retorno: "João - joao@email.com"\n\n-- Limitar resultados\nSELECT * FROM produtos\nLIMIT 10;\n-- retorno: primeiros 10 registros	\nSELECT:\n- Recupera dados de tabelas\n- Pode selecionar todas (*) ou algumas colunas\n- Permite renomear colunas (alias)\n- Suporta expressões matemáticas\n- Pode concatenar valores\n- Limita quantidade de registros	2025-01-29 20:23:12.628	9e3eff48-edfa-4048-b29d-9e1fb6ddc9dd	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.628
d1218795-555f-4570-b9e5-4f7deb03a626	Ordenação (ORDER BY)	Ordenando resultados com ORDER BY	\n-- Ordem crescente (padrão)\nSELECT * FROM produtos\nORDER BY preco;\n-- retorno: produtos ordenados por preço (menor para maior)\n\n-- Ordem decrescente\nSELECT * FROM usuarios\nORDER BY idade DESC;\n-- retorno: usuários ordenados por idade (maior para menor)\n\n-- Múltiplas colunas\nSELECT * FROM pedidos\nORDER BY data DESC, valor ASC;\n-- retorno: pedidos por data decrescente e valor crescente\n\n-- Ordenar por expressão\nSELECT nome, preco, quantidade\nFROM produtos\nORDER BY preco * quantidade DESC;\n-- retorno: ordenado pelo valor total (preço * quantidade)\n\n-- Ordenar com NULLS\nSELECT * FROM usuarios\nORDER BY email NULLS LAST;\n-- retorno: emails nulos aparecem por último\n\n-- Ordenar por posição da coluna\nSELECT nome, idade, cidade\nFROM usuarios\nORDER BY 2 DESC;  -- ordena pela segunda coluna (idade)\n-- retorno: ordenado pela idade decrescente	\nORDER BY:\n- Define ordem dos resultados\n- ASC (crescente) é padrão\n- DESC para ordem decrescente\n- Aceita múltiplas colunas\n- Pode ordenar por expressões\n- Controla posição de NULL	2025-01-29 20:23:12.632	83d3f1fb-f3a9-4055-a68c-dfe52b89fc6c	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.632
564b1865-2172-43e6-bc25-ff74850d8866	Agrupamento (GROUP BY)	Agrupando resultados com GROUP BY	\n-- Agrupamento simples\nSELECT cidade, COUNT(*) as total\nFROM usuarios\nGROUP BY cidade;\n-- retorno: quantidade de usuários por cidade\n\n-- Múltiplas colunas\nSELECT categoria, marca, COUNT(*)\nFROM produtos\nGROUP BY categoria, marca;\n-- retorno: quantidade de produtos por categoria e marca\n\n-- Com função de agregação\nSELECT departamento,\nAVG(salario) as media_salario,\nMAX(salario) as maior_salario,\nMIN(salario) as menor_salario\nFROM funcionarios\nGROUP BY departamento;\n-- retorno: estatísticas salariais por departamento\n\n-- Com filtro antes do agrupamento\nSELECT categoria,\nSUM(valor) as total_vendas\nFROM vendas\nWHERE data >= '2024-01-01'\nGROUP BY categoria;\n-- retorno: total de vendas por categoria em 2024	\nGROUP BY:\n- Agrupa registros similares\n- Usado com funções de agregação\n- COUNT, SUM, AVG, MAX, MIN\n- WHERE filtra antes do grupo\n- HAVING filtra após o grupo\n- Múltiplas colunas possíveis	2025-01-29 20:23:12.634	796cd0ee-5ddc-40d4-8f07-5c171dc7396b	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.634
bd2db904-4f51-45e0-8529-f40b043145af	Valores Únicos (DISTINCT)	Selecionando valores únicos com DISTINCT	\n-- DISTINCT simples\nSELECT DISTINCT cidade\nFROM usuarios;\n-- retorno: lista de cidades sem repetição\n\n-- Múltiplas colunas\nSELECT DISTINCT marca, categoria\nFROM produtos;\n-- retorno: combinações únicas de marca/categoria\n\n-- Com ordenação\nSELECT DISTINCT idade\nFROM usuarios\nORDER BY idade DESC;\n-- retorno: idades únicas em ordem decrescente\n\n-- Em funções agregadas\nSELECT COUNT(DISTINCT cidade) as total_cidades\nFROM usuarios;\n-- retorno: número de cidades diferentes\n\n-- Combinando com WHERE\nSELECT DISTINCT categoria\nFROM produtos\nWHERE preco > 1000;\n-- retorno: categorias de produtos caros	\nDISTINCT:\n- Remove duplicatas\n- Pode usar várias colunas\n- Afeta todas as colunas\n- Útil em agregações\n- Impacta performance\n- Considera NULL como valor	2025-01-29 20:23:12.639	c326f5d1-db33-4d7f-b86a-ef4971375a15	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.639
769d6c44-838b-4138-955a-a601b3d14e55	Merge de Dados (MERGE/UPSERT)	Inserindo ou atualizando registros condicionalmente	\n-- MERGE básico (sintaxe var ia por SGBD)\nMERGE INTO produtos p\nUSING produtos_temp t\nON (p.id = t.id)\nWHEN MATCHED THEN\nUPDATE SET\np.preco = t.preco,\np.nome = t.nome\nWHEN NOT MATCHED THEN\nINSERT (id, nome, preco)\nVALUES (t.id, t.nome, t.preco);\n-- retorno: registros atualizados/inseridos\n\n-- INSERT ... ON DUPLICATE KEY (MySQL)\nINSERT INTO produtos (id, nome, preco)\nVALUES (1, 'Produto', 99.90)\nON DUPLICATE KEY UPDATE\nnome = VALUES(nome),\npreco = VALUES(preco);\n-- retorno: insere ou atualiza\n\n-- UPSERT (PostgreSQL)\nINSERT INTO produtos (id, nome, preco)\nVALUES (1, 'Produto', 99.90)\nON CONFLICT (id) DO UPDATE\nSET nome = EXCLUDED.nome,\npreco = EXCLUDED.preco;\n-- retorno: insere ou atualiza	\nMERGE/UPSERT:\n- Combina INSERT e UPDATE\n- Evita duplicatas\n- Atualiza existentes\n- Insere novos\n- Sintaxe varia por SGBD\n- Atomicidade garantida	2025-01-29 20:23:12.654	7ba3f181-de06-4823-a84a-b2a54c0faa76	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.654
9083ec93-f47a-4778-a0ba-cabd434e681b	Limpeza de Tabela (TRUNCATE)	Removendo todos os registros de uma tabela	\n-- TRUNCATE básico\nTRUNCATE TABLE logs;\n-- retorno: remove todos os registros\n\n-- TRUNCATE com RESTART IDENTITY\nTRUNCATE TABLE pedidos\nRESTART IDENTITY;\n-- retorno: limpa e reseta sequência\n\n-- TRUNCATE múltiplas tabelas\nTRUNCATE TABLE\ntabela1,\ntabela2,\ntabela3;\n-- retorno: limpa várias tabelas\n\n-- TRUNCATE com CASCADE\nTRUNCATE TABLE usuarios CASCADE;\n-- retorno: limpa tabela e dependentes	\nTRUNCATE:\n- Mais rápido que DELETE\n- Remove todos registros\n- Reseta sequências\n- Não dispara triggers\n- Não pode usar WHERE\n- Não pode desfazer	2025-01-29 20:23:12.657	afe7acf3-6860-4f3b-b1cc-8f1da1cec362	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.657
62cf2139-b879-4e63-af58-36b67949426e	INNER JOIN	Combinando registros com correspondência em ambas as tabelas	\n-- INNER JOIN básico\nSELECT pedidos.id, clientes.nome\nFROM pedidos\nINNER JOIN clientes\nON pedidos.cliente_id = clientes.id;\n-- retorno: pedidos com informações dos clientes\n\n-- Múltiplos JOINS\nSELECT\npedidos.id,\nclientes.nome,\nprodutos.descricao\nFROM pedidos\nINNER JOIN clientes\nON pedidos.cliente_id = clientes.id\nINNER JOIN produtos\nON pedidos.produto_id = produtos.id;\n-- retorno: pedidos com cliente e produto\n\n-- Com alias para tabelas\nSELECT\np.data,\nc.nome as cliente,\nv.nome as vendedor\nFROM pedidos p\nINNER JOIN clientes c\nON p.cliente_id = c.id\nINNER JOIN vendedores v\nON p.vendedor_id = v.id;\n-- retorno: data do pedido, nome do cliente e vendedor	\nINNER JOIN:\n- Retorna apenas correspondências\n- Exige chave de ligação\n- Pode usar múltiplos joins\n- Aceita alias para tabelas\n- Comum em relacionamentos\n- Elimina registros sem par	2025-01-29 20:23:12.666	2ca7497e-66ec-48ce-a531-4432e7e388ec	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.666
6cdabe9d-9a7b-444c-b750-3416dbaa27a9	LEFT JOIN	Retorna todos os registros da tabela da esquerda	\n-- LEFT JOIN básico\nSELECT clientes.nome, pedidos.id\nFROM clientes\nLEFT JOIN pedidos\nON clientes.id = pedidos.cliente_id;\n-- retorno: todos clientes, mesmo sem pedidos\n\n-- Com filtro após JOIN\nSELECT\nc.nome,\nCOUNT(p.id) as total_pedidos\nFROM clientes c\nLEFT JOIN pedidos p\nON c.id = p.cliente_id\nWHERE p.data >= '2024-01-01'\nGROUP BY c.nome;\n-- retorno: contagem de pedidos por cliente em 2024\n\n-- Múltiplos LEFT JOINS\nSELECT\nc.nome,\np.id as pedido,\ne.status as entrega\nFROM clientes c\nLEFT JOIN pedidos p\nON c.id = p.cliente_id\nLEFT JOIN entregas e\nON p.id = e.pedido_id;\n-- retorno: clientes, pedidos e status de entrega	\nLEFT JOIN:\n- Mantém todos registros da esquerda\n- Traz NULL para não correspondentes\n- Útil para encontrar ausências\n- Ordem das tabelas importa\n- Pode combinar com WHERE\n- Comum em relatórios	2025-01-29 20:23:12.669	7d4044e5-a35b-4345-862d-08f25b615764	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.669
fb7d6858-11dd-4f2e-9047-e58ae5b47a1a	RIGHT JOIN	Retorna todos os registros da tabela da direita	\n-- RIGHT JOIN básico\nSELECT pedidos.id, vendedores.nome\nFROM pedidos\nRIGHT JOIN vendedores\nON pedidos.vendedor_id = vendedores.id;\n-- retorno: todos vendedores, mesmo sem pedidos\n\n-- Com condições adicionais\nSELECT\np.id as pedido,\nv.nome as vendedor,\nv.departamento\nFROM pedidos p\nRIGHT JOIN vendedores v\nON p.vendedor_id = v.id\nWHERE v.departamento = 'Comercial';\n-- retorno: vendedores do comercial e seus pedidos\n\n-- Verificando dados ausentes\nSELECT\np.id,\nv.nome\nFROM pedidos p\nRIGHT JOIN vendedores v\nON p.vendedor_id = v.id\nWHERE p.id IS NULL;\n-- retorno: vendedores sem pedidos	\nRIGHT JOIN:\n- Mantém todos registros da direita\n- Oposto do LEFT JOIN\n- Menos comum que LEFT JOIN\n- Pode ser reescrito como LEFT\n- Útil em análises específicas\n- Traz NULL para não correspondentes	2025-01-29 20:23:12.672	b95ed5aa-eec9-4a55-9920-4dcdd1dc2707	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.672
c624ebf3-63db-48f4-9976-202d94525386	FULL JOIN	Retorna todos os registros de ambas as tabelas	\n-- FULL JOIN básico\nSELECT\nclientes.nome,\npedidos.id\nFROM clientes\nFULL JOIN pedidos\nON clientes.id = pedidos.cliente_id;\n-- retorno: todos clientes e todos pedidos\n\n-- Encontrando registros sem correspondência\nSELECT\nc.nome as cliente,\np.id as pedido\nFROM clientes c\nFULL JOIN pedidos p\nON c.id = p.cliente_id\nWHERE c.id IS NULL OR p.id IS NULL;\n-- retorno: clientes sem pedidos e pedidos sem cliente\n\n-- Com múltiplas tabelas\nSELECT\nc.nome,\np.id as pedido,\ne.status\nFROM clientes c\nFULL JOIN pedidos p\nON c.id = p.cliente_id\nFULL JOIN entregas e\nON p.id = e.pedido_id;\n-- retorno: todas as relações possíveis	\nFULL JOIN:\n- Combina LEFT e RIGHT JOIN\n- Retorna todos os registros\n- Útil para validação de dados\n- Identifica inconsistências\n- Menos comum em produção\n- Pode impactar performance	2025-01-29 20:23:12.674	8af89e92-9840-49d8-875a-500d91ebe26f	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.674
bfe57823-02a7-4373-8f5f-4e3c7aa6c9fb	SELF JOIN	Juntando uma tabela com ela mesma	\n-- SELF JOIN básico\nSELECT\ne1.nome as funcionario,\ne2.nome as supervisor\nFROM funcionarios e1\nLEFT JOIN funcionarios e2\nON e1.supervisor_id = e2.id;\n-- retorno: funcionários e seus supervisores\n\n-- Encontrando hierarquia\nSELECT\ne1.nome as funcionario,\ne2.nome as gerente,\ne3.nome as diretor\nFROM funcionarios e1\nLEFT JOIN funcionarios e2\nON e1.gerente_id = e2.id\nLEFT JOIN funcionarios e3\nON e2.gerente_id = e3.id;\n-- retorno: hierarquia complet a\n\n-- Comparando registros da mesma tabela\nSELECT\np1.nome as produto1,\np2.nome as produto2\nFROM produtos p1\nINNER JOIN produtos p2\nON p1.categoria = p2.categoria\nWHERE p1.id < p2.id;\n-- retorno: pares de produtos da mesma categoria	\nSELF JOIN:\n- Junta tabela com ela mesma\n- Usa alias diferentes\n- Comum em hierarquias\n- Útil para comparações\n- Requer aliases claros\n- Bom para estruturas em árvore	2025-01-29 20:23:12.676	a7d71c38-12e8-4347-b480-bde533723f6e	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.676
4ba11cf9-3a57-4ccb-816c-9f53486ed339	Enums em TypeScript	Conjuntos de constantes nomeadas	Enum Numérico\nenum DiaDaSemana {\nDOMINGO,     0\nSEGUNDA,     1\nTERCA,       2\nQUARTA,      3\nQUINTA,      4\nSEXTA,       5\nSABADO      6\n}\nlet dia: DiaDaSemana = DiaDaSemana.SEGUNDA;\n\nretorno: 1\n\nEnum com valores string\nenum Status {\nATIVO = "ATIVO",\nINATIVO = "INATIVO"\n}\nlet statusAtual: Status = Status.ATIVO;\n\nretorno: "ATIVO"	Enums são úteis para representar conjuntos fixos de valores:\n\n- Valores são atribuídos automaticamente começando do 0\n- Cada membro recebe um número sequencial\n- Pode ser referenciado pelo nome ou número\n\n- Valores precisam ser explicitamente atribuídos\n- Mais seguros para serialização\n- Mais fáceis de depurar	2025-01-29 20:23:12.803	8b95de9d-a682-4f9a-b862-43e46be4dac7	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.803
b1fc6f27-c324-46e3-a8dd-f26e6d9d9bff	Funções de Agregação	Funções para cálculos e agregações de dados	\n-- COUNT - Contagem\nSELECT COUNT(*) FROM usuarios;\n-- retorno: total de registros\n\nSELECT COUNT(DISTINCT cidade) FROM usuarios;\n-- retorno: número de cidades diferentes\n\n-- SUM - Soma\nSELECT SUM(valor) FROM vendas;\n-- retorno: valor total das vendas\n\nSELECT produto_id, SUM(quantidade) as total\nFROM vendas\nGROUP BY produto_id;\n-- retorno: quantidade vendida por produto\n\n-- AVG - Média\nSELECT AVG(preco) FROM produtos;\n-- retorno: preço médio dos produtos\n\nSELECT categoria, AVG(preco) as media\nFROM produtos\nGROUP BY categoria;\n-- retorno: preço médio por categoria\n\n-- MAX/MIN - Valor máximo/mínimo\nSELECT\nMAX(preco) as mais_caro,\nMIN(preco) as mais_barato\nFROM produtos;\n-- retorno: produto mais caro e mais barato	\nFunções Agregação:\n- COUNT: Conta registros\n- SUM: Soma valores\n- AVG: Calcula média\n- MAX: Valor máximo\n- MIN: Valor mínimo\n- GROUP BY: Agrupa resultados	2025-01-29 20:23:12.687	28a5df67-c0dd-4441-8e28-f099d9c0526d	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.687
6c984e5a-6ea8-4c85-ba09-4968983f3e71	Funções de String	Manipulando e formatando strings	\n-- CONCAT - Concatenação\nSELECT CONCAT(nome, ' ', sobrenome) FROM usuarios;\n-- retorno: 'João Silva'\n\n-- UPPER/LOWER - Maiúsculo/Minúsculo\nSELECT\nUPPER(nome) as maiusculo,\nLOWER(email) as minusculo\nFROM usuarios;\n-- retorno: 'JOÃO', 'joao@email.com'\n\n-- SUBSTRING - Parte da string\nSELECT SUBSTRING(descricao, 1, 100) FROM produtos;\n-- retorno: primeiros 100 caracteres\n\n-- LENGTH - Tamanho da string\nSELECT nome, LENGTH(nome) as tamanho\nFROM usuarios;\n-- retorno: nome e quantidade de caracteres\n\n-- TRIM - Remove espaços\nSELECT TRIM(' texto com espaços ');\n-- retorno: 'texto com espaços'\n\n-- REPLACE - Substitui texto\nSELECT REPLACE(descricao, 'antigo', 'novo')\nFROM produtos;\n-- retorno: texto com substituição	\nFunções String:\n- CONCAT: Une strings\n- UPPER/LOWER: Muda caso\n- SUBSTRING: Extrai parte\n- LENGTH: Conta caracteres\n- TRIM: Remove espaços\n- REPLACE: Substitui texto	2025-01-29 20:23:12.69	9ff5af17-adcf-47b3-9baa-8d0d236fb9d1	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.69
d0760489-657e-4df5-9a45-e23a09ddd6f4	Funções de Data	Manipulando datas e horários	\n-- Data e hora atual\nSELECT\nCURRENT_DATE,     -- data atual\nCURRENT_TIME,     -- hora atual\nCURRENT_TIMESTAMP -- data e hora atual\n-- retorno: '2024-01-15', '14:30:00', '2024-01-15 14:30:00'\n\n-- Extrair partes da data\nSELECT\nEXTRACT(YEAR FROM data) as ano,\nEXTRACT(MONTH FROM data) as mes,\nEXTRACT(DAY FROM data) as dia\nFROM pedidos;\n-- retorno: 2024, 1, 15\n\n-- Adicionar/Subtrair intervalos\nSELECT\ndata,\ndata + INTERVAL '1 day' as amanha,\ndata - INTERVAL '1 month' as mes_anterior\nFROM pedidos;\n-- retorno: datas calculadas\n\n-- Diferença entre datas\nSELECT\ndata_inicio,\ndata_fim,\ndata_fim - data_inicio as dias\nFROM projetos;\n-- retorno: diferença em dias\n\n-- Formatar data\nSELECT TO_CHAR(data, 'DD/MM/YYYY')\nFROM pedidos;\n-- retorno: '15/01/2024'	\nFunções Data:\n- CURRENT_DATE: Data atual\n- EXTRACT: Extrai componentes\n- INTERVAL: Calcula períodos\n- Diferença entre datas\n- Formatação de datas\n- Timezone	2025-01-29 20:23:12.691	63263686-8b7c-4e87-b5c9-75605adbef3d	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.691
164820f3-42ae-406b-861d-980fdb73cd84	Funções Numéricas	Operações e formatações numéricas	\n-- Arredondamento\nSELECT\nROUND(valor, 2),      -- 2 decimais\nCEIL(valor),          -- próximo inteiro\nFLOOR(valor),         -- inteiro anterior\nTRUNC(valor, 2)       -- trunca 2 decimais\nFROM vendas;\n-- retorno: valores formatados\n\n-- Operações matemáticas\nSELECT\nABS(valor),           -- valor absoluto\nPOWER(numero, 2),     -- potência\nSQRT(numero),         -- raiz quadrada\nMOD(numero, 2)        -- resto divisão\nFROM calculos;\n-- retorno: resultados calculados\n\n-- Formatação\nSELECT\nTO_CHAR(valor, '999G999D99'),\nTO_CHAR(valor, 'FM999999.00')\nFROM financeiro;\n-- retorno: valores formatados\n\n-- Conversões\nSELECT\nCAST(texto AS numeric),\nvalor::integer\nFROM dados;\n-- retorno: valores convertidos	\nFunções Numéricas:\n- ROUND: Arredonda valor\n- CEIL/FLOOR: Próximo/anterior\n- ABS: Valor absoluto\n- POWER: Potência\n- Formatação numérica\n- Conversões	2025-01-29 20:23:12.694	40371d54-bbfa-4910-8c3d-c40fca5efb42	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.694
0885912e-012c-4095-9f4e-4198e1dafa07	Funções Condicionais	Lógica condicional em consultas	\n-- CASE simples\nSELECT\nnome,\nCASE status\nWHEN 'A' THEN 'Ativo'\nWHEN 'I' THEN 'Inativo'\nELSE 'Desconhecido'\nEND as status_desc\nFROM usuarios;\n-- retorno: status descritivo\n\n-- CASE com condições\nSELECT\nnome,\nCASE\nWHEN idade < 18 THEN 'Menor'\nWHEN idade < 60 THEN 'Adulto'\nELSE 'Idoso'\nEND as faixa_etaria\nFROM usuarios;\n-- retorno: classificação por idade\n\n-- COALESCE - Primeiro não nulo\nSELECT\nCOALESCE(apelido, nome) as nome_exibicao,\nCOALESCE(telefone2, telefone1) as contato\nFROM usuarios;\n-- retorno: primeiro valor não nulo\n\n-- NULLIF - Retorna nulo se igual\nSELECT\nNULLIF(valor1, valor2) as resultado\nFROM comparacoes;\n-- retorno: nulo se valores iguais\n\n-- NVL/IFNULL - Valor alternativo\nSELECT\nNVL(comissao, 0) as comissao,\nIFNULL(desconto, 0) as desconto\nFROM vendas;\n-- retorno: 0 se nulo	\nFunções Condicionais:\n- CASE: Lógica condicional\n- COALESCE: Primeiro não nulo\n- NULLIF: Compara valores\n- NVL/IFNULL: Valor default\n- Controle de fluxo\n- Tratamento de nulos	2025-01-29 20:23:12.696	d417f33c-7e02-4fed-bc2c-a4c2641b3acf	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.696
f0192190-2d92-4bf8-84de-fcd3dd57589e	Subqueries	Consultas aninhadas em SQL	\n-- Subquery no SELECT\nSELECT\nnome,\n(SELECT COUNT(*) FROM pedidos\nWHERE pedidos.cliente_id = clientes.id) as total_pedidos\nFROM clientes;\n-- retorno: clientes com total de pedidos\n\n-- Subquery no WHERE\nSELECT * FROM produtos\nWHERE preco > (\nSELECT AVG(preco) FROM produtos\n);\n-- retorno: produtos acima da média de preço\n\n-- Subquery com IN\nSELECT * FROM clientes\nWHERE id IN (\nSELECT cliente_id\nFROM pedidos\nWHERE valor > 1000\n);\n-- retorno: clientes com pedidos grandes\n\n-- Subquery correlacionada\nSELECT * FROM pedidos p\nWHERE valor > (\nSELECT AVG(valor) FROM pedidos\nWHERE cliente_id = p.cliente_id\n);\n-- retorno: pedidos acima da média do cliente\n\n-- Subquery no FROM\nSELECT dept_name, avg_salary\nFROM (\nSELECT\ndepartamento,\nAVG(salario) as avg_salary\nFROM funcionarios\nGROUP BY departamento\n) as dept_stats;\n-- retorno: estatísticas por departamento	\nSubqueries:\n- Query dentro de outra\n- Pode usar no SELECT\n- Pode usar no WHERE\n- Pode ser correlacionada\n- Retorna valor ou lista\n- Melhora legibilidade	2025-01-29 20:23:12.706	116dea62-456f-4bf3-9d02-c412eb19dcaa	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.706
2172944d-a3f1-44b4-863a-abf8311593ac	Views	Criando e usando views em SQL	\n-- Criando view simples\nCREATE VIEW vw_clientes_ativos AS\nSELECT * FROM clientes\nWHERE status = 'ativo';\n-- retorno: view criada\n\n-- View com joins\nCREATE VIEW vw_pedidos_complet os AS\nSELECT\np.id,\nc.nome as cliente,\np.data,\np.valor\nFROM pedidos p\nJOIN clientes c ON p.cliente_id = c.id;\n-- retorno: view com dados de pedidos\n\n-- View materializada\nCREATE MATERIALIZED VIEW vw_vendas_mensais AS\nSELECT\nDATE_TRUNC('month', data) as mes,\nSUM(valor) as total\nFROM vendas\nGROUP BY DATE_TRUNC('month', data);\n-- retorno: view materializada criada\n\n-- Atualizando view materializada\nREFRESH MATERIALIZED VIEW vw_vendas_mensais;\n-- retorno: view atualizada\n\n-- Usando view\nSELECT * FROM vw_clientes_ativos\nWHERE cidade = 'São Paulo';\n-- retorno: clientes ativos de SP	\nViews:\n- Consulta salva\n- Simplifica queries\n- Reutiliza código\n- Controla acesso\n- Pode ser materializada\n- Atualiza automaticamente	2025-01-29 20:23:12.708	33b2bc3f-0007-44aa-bc00-cd212702e669	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.708
6e1563bb-22ca-478d-9200-1c8c8ce3d2fb	Common Table Expressions	Usando CTEs para consultas temporárias	\n-- CTE básica\nWITH vendas_por_mes AS (\nSELECT\nDATE_TRUNC('month', data) as mes,\nSUM(valor) as total\nFROM vendas\nGROUP BY DATE_TRUNC('month', data)\n)\nSELECT * FROM vendas_por_mes\nORDER BY mes;\n-- retorno: totais mensais\n\n-- CTE múltipla\nWITH\nclientes_vip AS (\nSELECT * FROM clientes\nWHERE tipo = 'VIP'\n),\npedidos_vip AS (\nSELECT p.* FROM pedidos p\nJOIN clientes_vip c ON p.cliente_id = c.id\n)\nSELECT * FROM pedidos_vip;\n-- retorno: pedidos de clientes VIP\n\n-- CTE recursiva\nWITH RECURSIVE subordinados AS (\n-- caso base\nSELECT id, nome, gerente_id\nFROM funcionarios\nWHERE gerente_id = 1\n\nUNION ALL\n\n-- parte recursiva\nSELECT f.id, f.nome, f.gerente_id\nFROM funcionarios f\nJOIN subordinados s ON f.gerente_id = s.id\n)\nSELECT * FROM subordinados;\n-- retorno: hierarquia de funcionários	\nCTEs:\n- Consulta temporária\n- Melhora organização\n- Permite recursão\n- Reutiliza subconsultas\n- Mais legível que subquery\n- Escopo limitado	2025-01-29 20:23:12.711	41c6e9ec-e74f-46a3-bbfd-952ff912870a	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.711
48f413fb-e785-402b-9bd4-730a15d9b043	Tabelas Temporárias	Criando e usando tabelas temporárias	\n-- Tabela temporária\nCREATE TEMPORARY TABLE temp_resultados (\nid serial,\nvalor numeric,\ndata timestamp\n);\n-- retorno: tabela temp criada\n\n-- Inserindo dados\nINSERT INTO temp_resultados\nSELECT id, valor, data\nFROM vendas\nWHERE data >= CURRENT_DATE - INTERVAL '30 days';\n-- retorno: dados inseridos\n\n-- Usando tabela temporária\nSELECT\nDATE_TRUNC('day', data) as dia,\nSUM(valor) as total\nFROM temp_resultados\nGROUP BY dia;\n-- retorno: totais diários\n\n-- Tabela temporária com estrutura existente\nCREATE TEMPORARY TABLE temp_vendas_filtradas\nAS SELECT * FROM vendas WHERE valor > 1000;\n-- retorno: tabela criada com dados\n\n-- Limpando tabela temporária\nDROP TABLE temp_resultados;\n-- retorno: tabela removida	\nTabelas Temporárias:\n- Dura apenas na sessão\n- Performance melhor\n- Índices próprios\n- Escopo limitado\n- Sem conflito de nomes\n- Auto-limpeza	2025-01-29 20:23:12.713	b9b878a9-44cd-4196-ac0d-94513d7be599	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.713
530a6756-714c-474b-804e-ba424393156f	CREATE TABLE	Criando tabelas e definindo estrutura	\n-- Criação básica de tabela\nCREATE TABLE usuarios (\nid SERIAL PRIMARY KEY,\nnome VARCHAR(100) NOT NULL,\nemail VARCHAR(100) UNIQUE,\nsenha VARCHAR(255) NOT NULL,\ncriado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n-- retorno: tabela criada\n\n-- Tabela com múltiplas chaves\nCREATE TABLE pedidos (\nid SERIAL PRIMARY KEY,\ncodigo VARCHAR(50) UNIQUE,\ncliente_id INTEGER NOT NULL,\nvalor DECIMAL(10,2) NOT NULL,\nstatus VARCHAR(20) DEFAULT 'pendente',\ndata_pedido TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\nFOREIGN KEY (cliente_id) REFERENCES usuarios(id)\n);\n-- retorno: tabela criada com foreign key\n\n-- Tabela com check const raint\nCREATE TABLE produtos (\nid SERIAL PRIMARY KEY,\nnome VARCHAR(100) NOT NULL,\npreco DECIMAL(10,2) NOT NULL,\nestoque INTEGER NOT NULL,\ncategoria VARCHAR(50),\nCONSTRAINT preco_positivo CHECK (preco > 0),\nCONSTRAINT estoque_valido CHECK (estoque >= 0)\n);\n-- retorno: tabela criada com checks\n\n-- Tabela com composite key\nCREATE TABLE item_pedido (\npedido_id INTEGER,\nproduto_id INTEGER,\nquantidade INTEGER NOT NULL,\npreco_unitario DECIMAL(10,2) NOT NULL,\nPRIMARY KEY (pedido_id, produto_id),\nFOREIGN KEY (pedido_id) REFERENCES pedidos(id),\nFOREIGN KEY (produto_id) REFERENCES produtos(id)\n);\n-- retorno: tabela criada com chave composta	\nCREATE TABLE:\n- Define estrutura\n- Tipos de dados\n- Constraints\n- Valores default\n- Chaves primárias/estrangeiras\n- Regras de validação	2025-01-29 20:23:12.724	a2dd8c92-95e1-49cc-bf95-9a7e4ff809c3	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.724
a1af7ee1-7156-41f4-91a7-67234b28da9d	ALTER TABLE	Modificando estrutura de tabelas existentes	\n-- Adicionar coluna\nALTER TABLE usuarios\nADD COLUMN telefone VARCHAR(20);\n-- retorno: coluna adicionada\n\n-- Remover coluna\nALTER TABLE usuarios\nDROP COLUMN telefone;\n-- retorno: coluna removida\n\n-- Modificar tipo de coluna\nALTER TABLE produtos\nALTER COLUMN preco TYPE NUMERIC(12,2);\n-- retorno: tipo modificado\n\n-- Adicionar const raint\nALTER TABLE usuarios\nADD CONSTRAINT email_unique\nUNIQUE (email);\n-- retorno: const raint adicionada\n\n-- Remover const raint\nALTER TABLE usuarios\nDROP CONSTRAINT email_unique;\n-- retorno: const raint removida\n\n-- Renomear tabela\nALTER TABLE usuarios\nRENAME TO clientes;\n-- retorno: tabela renomeada\n\n-- Adicionar foreign key\nALTER TABLE pedidos\nADD CONSTRAINT fk_cliente\nFOREIGN KEY (cliente_id)\nREFERENCES clientes(id);\n-- retorno: foreign key adicionada	\nALTER TABLE:\n- Modifica estrutura\n- Adiciona/remove colunas\n- Altera tipos\n- Adiciona/remove constraints\n- Renomeia objetos\n- Mantém dados existentes	2025-01-29 20:23:12.726	9d92f2da-158b-4570-996e-995c4e2d812b	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.726
5831427b-17f9-4d8d-962a-390b9b35caae	Constraints	Definindo regras e restrições em tabelas	\n-- Primary Key\nALTER TABLE usuarios\nADD CONSTRAINT pk_usuarios\nPRIMARY KEY (id);\n-- retorno: primary key adicionada\n\n-- Foreign Key\nALTER TABLE pedidos\nADD CONSTRAINT fk_usuario\nFOREIGN KEY (usuario_id)\nREFERENCES usuarios(id)\nON DELETE CASCADE\nON UPDATE CASCADE;\n-- retorno: foreign key adicionada\n\n-- Unique Constraint\nALTER TABLE usuarios\nADD CONSTRAINT uq_email\nUNIQUE (email);\n-- retorno: unique const raint adicionada\n\n-- Check Constraint\nALTER TABLE produtos\nADD CONSTRAINT ck_preco\nCHECK (preco >= 0);\n-- retorno: check const raint adicionada\n\n-- Not Null Constraint\nALTER TABLE usuarios\nALTER COLUMN nome\nSET NOT NULL;\n-- retorno: not null adicionado\n\n-- Default Value\nALTER TABLE pedidos\nALTER COLUMN status\nSET DEFAULT 'pendente';\n-- retorno: valor default definido	\nConstraints:\n- Primary Key (PK)\n- Foreign Key (FK)\n- Unique\n- Check\n- Not Null\n- Default Values\n- Garante integridade	2025-01-29 20:23:12.728	53f030d9-a3dd-4bd6-a59c-a7eed25f5708	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.728
67a2fb37-2e4b-4fd4-be2c-87cd58d901f1	Índices	Criando e gerenciando índices para otimização	\n-- Índice simples\nCREATE INDEX idx_usuarios_email\nON usuarios(email);\n-- retorno: índice criado\n\n-- Índice único\nCREATE UNIQUE INDEX idx_produtos_codigo\nON produtos(codigo);\n-- retorno: índice único criado\n\n-- Índice composto\nCREATE INDEX idx_pedidos_data_status\nON pedidos(data_pedido, status);\n-- retorno: índice composto criado\n\n-- Índice parcial\nCREATE INDEX idx_produtos_ativos\nON produtos(nome)\nWHERE status = 'ativo';\n-- retorno: índice parcial criado\n\n-- Remover índice\nDROP INDEX idx_usuarios_email;\n-- retorno: índice removido\n\n-- Recriar índice\nREINDEX TABLE usuarios;\n-- retorno: índices recriados	\nÍndices:\n- Acelera consultas\n- Tipos diversos\n- Único ou não\n- Simples/composto\n- Parcial/total\n- Impacta performance	2025-01-29 20:23:12.731	bff96aaa-907a-4409-9ae5-4e8e5bc6b7f9	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.731
dcc8a596-343c-4e1e-b6f5-908cdf308522	Sequences	Gerando valores sequenciais automaticamente	\n-- Criar sequence\nCREATE SEQUENCE seq_usuarios\nSTART WITH 1\nINCREMENT BY 1\nNO MINVALUE\nNO MAXVALUE\nCACHE 1;\n-- retorno: sequence criada\n\n-- Usar sequence\nCREATE TABLE usuarios (\nid INTEGER PRIMARY KEY\nDEFAULT NEXTVAL('seq_usuarios'),\nnome VARCHAR(100)\n);\n-- retorno: tabela criada com sequence\n\n-- Próximo valor\nSELECT NEXTVAL('seq_usuarios');\n-- retorno: próximo número\n\n-- Valor atual\nSELECT CURRVAL('seq_usuarios');\n-- retorno: valor atual\n\n-- Reiniciar sequence\nALTER SEQUENCE seq_usuarios\nRESTART WITH 1;\n-- retorno: sequence reiniciada\n\n-- Modificar sequence\nALTER SEQUENCE seq_usuarios\nINCREMENT BY 10\nMAXVALUE 1000\nCYCLE;\n-- retorno: sequence modificada	\nSequences:\n- Gera valores únicos\n- Autoincremento\n- Independente de tabela\n- Cache de valores\n- Pode ser cíclica\n- Performance melhor	2025-01-29 20:23:12.733	e2378a42-f008-4495-a367-feb1616dc610	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.733
8fc5113c-094d-4009-b19f-a792150ed725	Transações	Controlando transações em SQL	\n-- Iniciar transação\nBEGIN;\n-- ou\nBEGIN TRANSACTION;\n-- retorno: transação iniciada\n\n-- Exemplo de transação\nBEGIN;\n-- Atualiza saldo do pagador\nUPDATE contas\nSET saldo = saldo - 100\nWHERE id = 1;\n\n-- Atualiza saldo do recebedor\nUPDATE contas\nSET saldo = saldo + 100\nWHERE id = 2;\n\n-- Se tudo ok, confirma\nCOMMIT;\n-- retorno: transação concluída\n\n-- Transação com verificação\nBEGIN;\nUPDATE produtos\nSET estoque = estoque - 10\nWHERE id = 1;\n\n-- Verifica se tem estoque suficiente\nIF NOT EXISTS (\nSELECT 1 FROM produtos\nWHERE id = 1 AND estoque >= 0\n) THEN\nROLLBACK;\nELSE\nCOMMIT;\nEND IF;\n-- retorno: transação com verificação	\nTransações:\n- Garante atomicidade\n- Tudo ou nada\n- Consistência dos dados\n- Isolamento\n- Durabilidade\n- Pode ser revertida	2025-01-29 20:23:12.741	e23b42fc-45d8-46c9-a525-16fb65ac6f9f	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.741
73640b60-1994-44ba-9190-810b24ce683f	COMMIT e ROLLBACK	Confirmando ou revertendo transações	\n-- Commit básico\nBEGIN;\nINSERT INTO pedidos (produto_id, quantidade)\nVALUES (1, 5);\n\nUPDATE produtos\nSET estoque = estoque - 5\nWHERE id = 1;\nCOMMIT;\n-- retorno: mudanças salvas\n\n-- Rollback manual\nBEGIN;\nDELETE FROM produtos\nWHERE id = 1;\n\n-- Ops, melhor não delet ar\nROLLBACK;\n-- retorno: mudanças descartadas\n\n-- Commit com tratamento de erro\nBEGIN;\nSAVEPOINT antes_operacao;\n\nBEGIN\n-- Tenta operação\nUPDATE contas\nSET saldo = saldo - 100\nWHERE id = 1;\n\n-- Se erro, reverte ao savepoint\nEXCEPTION WHEN OTHERS THEN\nROLLBACK TO antes_operacao;\nEND;\nCOMMIT;\n-- retorno: transação segura	\nCOMMIT/ROLLBACK:\n- COMMIT salva mudanças\n- ROLLBACK reverte\n- Mantém consistência\n- Trata erros\n- Protege dados\n- Define pontos de retorno	2025-01-29 20:23:12.743	55a90d18-3fa1-4e60-a99e-da37af4e5066	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.743
7e77691f-6aae-49a8-95cb-eaad9eec9c2c	SAVEPOINT	Criando pontos de salvamento em transações	\n-- Savepoint básico\nBEGIN;\nINSERT INTO usuarios (nome)\nVALUES ('João');\n\nSAVEPOINT ponto1;\n\nUPDATE usuarios\nSET email = 'joao@email.com'\nWHERE nome = 'João';\n\n-- Volta ao ponto1 se necessário\nROLLBACK TO ponto1;\n\nCOMMIT;\n-- retorno: transação com savepoint\n\n-- Múltiplos savepoints\nBEGIN;\nSAVEPOINT inicio;\n\nUPDATE produtos\nSET preco = preco * 1.1;\n\nSAVEPOINT aumento_preco;\n\nUPDATE produtos\nSET estoque = estoque - 10;\n\n-- Problema no estoque\nROLLBACK TO aumento_preco;\n\n-- Continua com preços atualizados\nCOMMIT;\n-- retorno: transação parcial\n\n-- Removendo savepoint\nBEGIN;\nSAVEPOINT ponto1;\n-- operações...\nRELEASE SAVEPOINT ponto1;\nCOMMIT;\n-- retorno: savepoint removido	\nSAVEPOINT:\n- Ponto de restauração\n- Rollback parcial\n- Múltiplos pontos\n- Pode ser liberado\n- Controle granular\n- Flexibilidade	2025-01-29 20:23:12.746	338d2899-a50d-4752-a6ed-97d3dec86ab2	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.746
23515dbd-7861-4537-a06d-70657f6d20df	Níveis de Isolamento	Configurando níveis de isolamento de transações	\n-- Read Uncommitted\nBEGIN;\nSET TRANSACTION ISOLATION LEVEL\nREAD UNCOMMITTED;\n\nSELECT * FROM produtos;\nCOMMIT;\n-- retorno: pode ler dados não commitados\n\n-- Read Committed\nBEGIN;\nSET TRANSACTION ISOLATION LEVEL\nREAD COMMITTED;\n\nSELECT * FROM produtos;\nCOMMIT;\n-- retorno: lê apenas dados commitados\n\n-- Repeatable Read\nBEGIN;\nSET TRANSACTION ISOLATION LEVEL\nREPEATABLE READ;\n\nSELECT * FROM produtos;\n-- mesma leitura garantida\nSELECT * FROM produtos;\nCOMMIT;\n-- retorno: leituras consistentes\n\n-- Serializable\nBEGIN;\nSET TRANSACTION ISOLATION LEVEL\nSERIALIZABLE;\n\nSELECT * FROM produtos\nWHERE estoque > 0\nFOR UPDATE;\n\nUPDATE produtos\nSET estoque = estoque - 1\nWHERE id = 1;\nCOMMIT;\n-- retorno: máximo isolamento	\nNíveis Isolamento:\n- Read Uncommitted\n- Read Committed\n- Repeatable Read\n- Serializable\n- Controla concorrência\n- Trade-off performance	2025-01-29 20:23:12.748	b2d16466-5636-43fb-8032-1e72fa5de9b4	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.748
42b37454-3b0e-4165-9810-78846087b7f3	EXPLAIN PLAN	Analisando plano de execução de queries	\n-- EXPLAIN básico\nEXPLAIN SELECT * FROM usuarios\nWHERE email = 'teste@email.com';\n-- retorno: plano de execução simples\n\n-- EXPLAIN ANALYZE\nEXPLAIN ANALYZE\nSELECT u.nome, COUNT(p.id) as total_pedidos\nFROM usuarios u\nLEFT JOIN pedidos p ON u.id = p.usuario_id\nGROUP BY u.nome;\n-- retorno: plano com tempos de execução\n\n-- EXPLAIN com formato JSON\nEXPLAIN (FORMAT JSON)\nSELECT * FROM produtos\nWHERE preco > 100\nORDER BY nome;\n-- retorno: plano em formato JSON\n\n-- EXPLAIN ANALYZE VERBOSE\nEXPLAIN (ANALYZE, VERBOSE)\nSELECT p.*, c.nome as categoria\nFROM produtos p\nJOIN categorias c ON p.categoria_id = c.id\nWHERE p.preco > 100\nAND c.ativo = true;\n-- retorno: plano detalhado com estatísticas	\nEXPLAIN:\n- Mostra plano execução\n- Identifica problemas\n- Analisa performance\n- Sugere melhorias\n- Auxilia otimização\n- Mede custos	2025-01-29 20:23:12.756	ae94349a-7249-4f44-a2bb-dfdd2942ac95	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.756
68bf0cfa-42ab-4e22-968f-8d9535f58b08	Estratégias de Indexação	Otimizando consultas com índices	\n-- Índice para WHERE comum\nCREATE INDEX idx_usuarios_email\nON usuarios(email)\nWHERE status = 'ativo';\n-- retorno: índice para filtragem\n\n-- Índice para JOIN\nCREATE INDEX idx_pedidos_usuario\nON pedidos(usuario_id);\n-- retorno: índice para junção\n\n-- Índice composto para ORDER BY\nCREATE INDEX idx_produtos_cat_preco\nON produtos(categoria_id, preco DESC);\n-- retorno: índice para ordenação\n\n-- Índice parcial\nCREATE INDEX idx_pedidos_status\nON pedidos(status)\nWHERE status IN ('pendente', 'processando');\n-- retorno: índice para subset\n\n-- Índice com INCLUDE\nCREATE INDEX idx_produtos_busca\nON produtos(nome)\nINCLUDE (preco, estoque);\n-- retorno: índice com colunas extras\n\n-- Análise de uso de índices\nSELECT\nschemaname || '.' || tablename as tabela,\nindexname,\nidx_scan as numero_scans,\nidx_tup_read as linhas_lidas\nFROM pg_stat_user_indexes;\n-- retorno: estatísticas de uso	\nEstratégias Índices:\n- Escolha colunas certas\n- Evite índices demais\n- Use índices compostos\n- Monitore utilização\n- Mantenha atualizados\n- Analise impacto	2025-01-29 20:23:12.758	d95d937c-8e2c-4f7c-a736-35f371bbcb9f	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.758
53d0212c-5afd-4242-9b31-648a254ee3fe	Particionamento	Dividindo tabelas grandes em partições	\n-- Tabela particionada por range\nCREATE TABLE vendas (\nid SERIAL,\ndata DATE,\nvalor DECIMAL(10,2)\n) PARTITION BY RANGE (data);\n-- retorno: tabela particionada criada\n\n-- Criar partições\nCREATE TABLE vendas_2023\nPARTITION OF vendas\nFOR VALUES FROM ('2023-01-01')\nTO ('2024-01-01');\n\nCREATE TABLE vendas_2024\nPARTITION OF vendas\nFOR VALUES FROM ('2024-01-01')\nTO ('2025-01-01');\n-- retorno: partições criadas\n\n-- Tabela particionada por lista\nCREATE TABLE produtos (\nid SERIAL,\ncategoria TEXT,\nnome TEXT\n) PARTITION BY LIST (categoria);\n\nCREATE TABLE produtos_elet ronicos\nPARTITION OF produtos\nFOR VALUES IN ('elet ronicos');\n\nCREATE TABLE produtos_moveis\nPARTITION OF produtos\nFOR VALUES IN ('moveis');\n-- retorno: partições por categoria	\nParticionamento:\n- Divide tabelas grandes\n- Melhora performance\n- Facilita manutenção\n- Vários critérios\n- Acesso mais rápido\n- Backup parcial	2025-01-29 20:23:12.76	47c4e380-717d-464e-afad-1d881075c8a7	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.76
413d52a6-e188-4fd0-ac84-39b53f32d4ef	Otimização de Queries	Técnicas para otimizar consultas SQL	\n-- Evite SELECT *\nSELECT id, nome, email\nFROM usuarios\nWHERE status = 'ativo';\n-- retorno: apenas colunas necessárias\n\n-- Use EXISTS vs IN\nSELECT * FROM pedidos p\nWHERE EXISTS (\nSELECT 1\nFROM usuarios u\nWHERE u.id = p.usuario_id\nAND u.status = 'ativo'\n);\n-- retorno: mais eficiente que IN\n\n-- Evite funções em WHERE\nSELECT * FROM usuarios\nWHERE DATE_TRUNC('month', data_criacao) =\nDATE_TRUNC('month', CURRENT_DATE);\n-- melhor usar:\nSELECT * FROM usuarios\nWHERE data_criacao >= '2024-01-01'\nAND data_criacao < '2024-02-01';\n-- retorno: permite uso de índice\n\n-- Use UNION ALL vs UNION\nSELECT * FROM vendas_2023\nUNION ALL\nSELECT * FROM vendas_2024;\n-- retorno: sem remoção de duplicatas\n\n-- Limite resultados\nSELECT * FROM produtos\nORDER BY preco DESC\nLIMIT 10;\n-- retorno: top 10 mais caros	\nOtimizações:\n- Selecione menos dados\n- Use índices corretamente\n- Evite funções em WHERE\n- Prefira UNION ALL\n- Limite resultados\n- Monitore performance	2025-01-29 20:23:12.762	67b7a55f-ec11-4401-9c3e-ca5e72e6e2f1	71dd44bc-8b1c-44a9-976d-adcf257249e1	2025-01-29 20:23:12.762
fffca562-646b-4394-a7a4-94630e123fc1	Tipos Primitivos em TypeScript	Os tipos básicos fundamentais do TypeScript	Tipos primitivos\nlet texto: string = "Olá";\n\nretorno: "Olá"\n\nlet numero: number = 42;\n\nretorno: 42\n\nlet decimal: number = 3.14;\n\nretorno: 3.14\n\nlet booleano: boolean = true;\n\nretorno: true\n\nlet nulo: null = null;\n\nretorno: null\n\nlet indefinido: undefined = undefined;\n\nretorno: undefined\n\nlet simbolo: symbol = Symbol("sym");\n\nretorno: Symbol(sym)\n\nlet bigInt: bigint = 100n;\n\nretorno: 100n	Os tipos primitivos são os blocos fundamentais de construção em TypeScript:\n\nstring - Representa textos e caracteres, pode usar aspas simples ou duplas\n\nnumber - Representa números, tanto inteiros quanto decimais\n\nboolean - Representa valores verdadeiro (true) ou falso (false)\n\nnull - Representa um valor nulo intencional\n\nundefined - Representa uma variável que não foi atribuída\n\nsymbol - Representa um identificador único e imutável\n\nbigint - Representa números inteiros muito grandes	2025-01-29 20:23:12.795	0718109b-56e7-49e3-93e8-124d79b3abce	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.795
013d054a-5975-458a-83d9-7fa082aff0b2	Operadores do TypeScript	Operadores e expressões específicos ou comumente usados em TypeScript	Operadores de tipo\nlet valor: unknown;\nlet texto = valor as string;\n\nretorno: valor convertido para string\n\nlet numero = <number>valor;\n\nretorno: valor convertido para number\n\nOperador de coalescência nula (??)\nlet nome: string | null = null;\nlet nomeExibicao = nome ?? "Anônimo";\n\nretorno: "Anônimo"\n\nOperador de encadeamento opcional (?.)\ninterface Usuario {\nendereco?: {\nrua?: string;\n};\n}\n\nlet usuario: Usuario = {};\nlet rua = usuario?.endereco?.rua;\n\nretorno: undefined\n\nOperadores de verificação de tipo\nlet tipo = typeof valor;\n\nretorno: "string", "number", etc.\n\nfunction isString(x: any): x is string {\nreturn typeof x === "string";\n}\n\nretorno: true/false\n\nOperador keyof\ninterface Pessoa {\nnome: string;\nidade: number;\n}\n\ntype ChavesPessoa = keyof Pessoa;\n\nretorno: "nome" | "idade"\n\nfunction getProp(obj: Pessoa, key: keyof Pessoa) {\nreturn obj[key];\n}\n\nOperador in\ninterface Animal {\nnome: string;\n}\n\ninterface Cachorro extends Animal {\nlatir: () => void;\n}\n\nfunction isDog(animal: Animal): animal is Cachorro {\nreturn 'latir' in animal;\n}\n\nretorno: true/false\n\nOperadores de união e interseção\ntype StringOuNumero = string | number;\nunião de tipos\n\ntype ObjetoComNome = { nome: string };\ntype ObjetoComIdade = { idade: number };\ntype Pessoa = ObjetoComNome & ObjetoComIdade;\ninterseção de tipos\n\nOperador satisfies\ntype RGB = [number, number, number];\nconst cor = [255, 128, 0] satisfies RGB;\nverifica se o valor corresponde ao tipo\n\nOperador instanceof com type guards\nclass Erro1 extends Error {}\nclass Erro2 extends Error {}\n\nfunction trataErro(erro: Error) {\nif (erro instanceof Erro1) {\nTypeScript sabe que é Erro1\n}\n}	Operadores de tipo\n\nas - Operador de asserção de tipo, usado para converter tipos\n\n<tipo> - Sintaxe alternativa para asserção de tipo (não usar em JSX)\n\n\nOperador de coalescência nula\n\n?? - Fornece valor padrão quando null/undefined, específico para esses valores\n\n\nOperador de encadeamento opcional\n\n?. - Acesso seguro a propriedades, específico do TypeScript/JavaScript moderno\n\n\nOperadores de verificação de tipo\n\ntypeof - Verifica o tipo em tempo de execução\n\nis - Cria type guard personalizado, recurso do TypeScript\n\n\nOperador keyof\n\nkeyof - Obtém as chaves de um tipo como union type\n\nÚtil para trabalhar com tipos de forma genérica\n\n\nOperador in\n\nin - Verifica se propriedade existe em objeto\n\nÚtil para type narrowing em TypeScript\n\n\nOperadores de união e interseção\n\n| - Cria um tipo que pode ser um OU outro\n\n& - Combina múltiplos tipos em um só\n\n\nOperador satisfies\n\nsatisfies - Verifica se um valor corresponde a um tipo\n\nMantém a inferência literal de tipo\n\n\ninstanceof com type guards\n\nCombina instanceof com type guards do TypeScript\n\nPermite narrowing de tipos em verificações de instância	2025-01-29 20:23:12.797	ddf307af-5274-4b2e-a4e7-b41de1fb3a07	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.797
742a1262-23d0-4247-84a2-960a0693fe27	Tipos Compostos em TypeScript	Arrays, tuplas e unions em TypeScript	Arrays\nlet array: number[] = [1, 2, 3];\n\nretorno: [1, 2, 3]\n\nTuplas\nlet tupla: [string, number] = ["idade", 25];\n\nretorno: ["idade", 25]\n\nUnion Types\nlet union: string | number = "texto";\n\nretorno: "texto"\nunion = 42;\n\nretorno: 42\n\nAny (usar com moderação)\nlet qualquerCoisa: any = 4;\n\nretorno: 4\nqualquerCoisa = "mudei o tipo";\n\nretorno: "mudei o tipo"	Os tipos compostos permitem criar estruturas mais complexas:\n\nArrays - Lista ordenada de elementos do mesmo tipo, definido como tipo[] ou Array<tipo>\n\nTuplas - Array com número fixo de elementos, cada um podendo ter um tipo diferente\n\nUnion Types - Permite que uma variável aceite mais de um tipo, definido com |\n\nAny - Permite qualquer tipo, desativa a verificação de tipo (deve ser evitado quando possível)	2025-01-29 20:23:12.799	da015f85-1129-44e5-a924-67879be74f43	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.799
03bcff78-a39a-40cc-9a12-56c6a63723ed	Type Assertions em TypeScript	Formas de afirmar o tipo de uma variável	Usando 'as'\nlet valor: any = "uma string";\nlet tamanho: number = (valor as string).length;\n\nretorno: 10\n\nUsando sintaxe angular\nlet comprimento: number = (<string>valor).length;\n\nretorno: 10\n\nType assertion em objetos\nlet usuario: any = {\nnome: "João",\nidade: 25\n};\n\nlet idade = (usuario as { idade: number }).idade;\n\nretorno: 25	Type assertions são formas de dizer ao TypeScript que você sabe mais sobre o tipo de uma variável do que ele:\n\n- Sintaxe mais clara e preferida\n- Funciona em todos os contextos, incluindo .tsx\n\n- Sintaxe antiga\n- Não funciona em arquivos .tsx\n- Ainda suportada mas não recomendada\n\nUse type assertions com cuidado, pois elas podem contornar a segurança de tipos do TypeScript	2025-01-29 20:23:12.806	2f984c20-bf08-44e3-a2d8-4afa82bb7a7c	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.806
6d3f719d-6c96-42b2-8c39-5c1d91b13d3a	Tipos Literais em TypeScript	Tipos que representam valores específicos	Literal types\nlet alinhamento: "left" | "right" | "center" = "left";\n\nretorno: "left"\n\ntype Opcoes = "sim" | "não" | "talvez";\nlet resposta: Opcoes = "sim";\n\nretorno: "sim"\n\nCombinando com outros tipos\ntype Resultado = number | "erro" | "pendente";\nlet status: Resultado = "pendente";\n\nretorno: "pendente"\nstatus = 42;\n\nretorno: 42	Tipos literais permitem especificar exatamente quais valores são aceitos:\n\n- Podem ser strings, números ou booleanos\n- Restringem uma variável a valores específicos\n- Úteis para configurações e estados\n\n- Combina múltiplos valores possíveis\n- Pode ser combinado com outros tipos\n- Oferece autocompletar no IDE	2025-01-29 20:23:12.808	07c2696d-2a82-4e2c-9c19-4d647f4bb2d5	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.808
48fd6b81-f738-43d4-87ec-be76114b548d	Tipos de Objeto em TypeScript	Diferentes formas de tipar objetos	Objeto genérico\nlet config: object = { tema: "dark", fonte: 12 };\n\nretorno: { tema: "dark", fonte: 12 }\n\nRecord\nlet dados: Record<string, number> = {\nidade: 25,\nano: 2024\n};\n\nretorno: { idade: 25, ano: 2024 }\n\nObject literal type\nlet usuario: {\nnome: string;\nidade: number;\nativo?: boolean;\n} = {\nnome: "Maria",\nidade: 30\n};\n\nretorno: { nome: "Maria", idade: 30 }	TypeScript oferece várias formas de tipar objetos:\n\n- Tipo genérico para qualquer valor não primitivo\n- Menos específico e seguro\n\n- Define um objeto com chaves e valores de tipos específicos\n- Útil para objetos com estrutura uniforme\n\n- Define a estrutura exata do objeto\n- Pode incluir propriedades opcionais\n- Mais específico e seguro	2025-01-29 20:23:12.81	c8f484c0-8842-46ed-b0a8-b71f9b5664d0	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.81
175a99c3-11e2-4ca2-9243-48928cdf824a	Interseção e União de Tipos	Combinando tipos com interseção (&) e união (|) em TypeScript	União de Tipos (|)\ntype StringOuNumero = string | number;\nlet valor: StringOuNumero = "texto";\nvalor = 42; válido também\n\nUnion com múltiplos tipos\ntype Resultado = string | number | boolean;\nlet resultado: Resultado = "sucesso";\nresultado = 200;    válido\nresultado = true;   válido\n\nUnion em funções\nfunction processarValor(valor: number | string) {\nif (typeof valor === "string") {\nreturn valor.toUpperCase();\n}\nreturn valor * 2;\n}\n\nInterseção de Tipos (&)\ntype Nome = { nome: string };\ntype Idade = { idade: number };\ntype Pessoa = Nome & Idade;\n\nconst pessoa: Pessoa = {\nnome: "João",\nidade: 25\n}; precisa ter ambas propriedades\n\nExemplo mais complexo de interseção\ntype Endereco = {\nrua: string;\nnumero: number;\ncidade: string;\n};\n\ntype Contato = {\nemail: string;\ntelefone: string;\n};\n\ntype Cliente = Pessoa & Endereco & Contato;\n\nconst cliente: Cliente = {\nnome: "Maria",\nidade: 30,\nrua: "Rua Principal",\nnumero: 123,\ncidade: "São Paulo",\nemail: "maria@email.com",\ntelefone: "(11) 99999-9999"\n};\n\nUnion com tipos literais\ntype Status = "ativo" | "inativo" | "pendente";\nlet statusAtual: Status = "ativo";\nstatusAtual = "outro"; erro!\n\nUsando com interfaces\ninterface Carro {\nmodelo: string;\nano: number;\n}\n\ninterface Elet rico {\nbateria: number;\n}\n\ntype CarroElet rico = Carro & Eletrico;\n\nconst tesla: CarroElet rico = {\nmodelo: "Model S",\nano: 2023,\nbateria: 100\n};	Interseção e União de tipos são recursos poderosos do TypeScript para combinar tipos\nde diferentes formas. União (|) permite que um valor seja de um dos tipos especificados,\nenquanto Interseção (&) requer que o valor tenha todos os tipos combinados.\n\nElementos principais:\n- União (|): Permite múltiplos tipos possíveis\n- Interseção (&): Combina múltiplos tipos\n- Type Guards: Verifica tipo em unions\n- Tipos Literais: Valores específicos\n- Interfaces: Podem ser combinadas\n- Type Narrowing: Reduz tipo em unions	2025-01-29 20:23:12.812	439ec8bd-991e-4e69-8031-fbff5396f5d8	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.812
273d2391-2f50-41aa-b699-dd634fb707ea	Modificadores de Acesso	Controle de visibilidade de propriedades e métodos em classes TypeScript	Exemplo de classe com modificadores de acesso\nclass Pessoa {\npublic nome: string; Pode ser acessado de qualquer lugar\nprivate idade: number; Somente acessível dentro da própria classe\nprotected cpf: string; Acessível dentro da classe e subclasses\n\nconst ructor(nome: string, idade: number, cpf: string) {\nthis.nome = nome;\nthis.idade = idade;\nthis.cpf = cpf;\n}\n\npublic apresentar(): string {\nreturn `Olá, meu nome é ${this.nome}.`;\n}\n\nprivate calcularAnoNascimento(): number {\nreturn new Date().getFullYear() - this.idade;\n}\n\nprotected exibirCpf(): string {\nreturn `CPF: ${this.cpf}`;\n}\n}\n\nClasse que herda de Pessoa\nclass Funcionario extends Pessoa {\nprivate cargo: string;\n\nconst ructor(nome: string, idade: number, cpf: string, cargo: string) {\nsuper(nome, idade, cpf);\nthis.cargo = cargo;\n}\n\npublic detalhes(): string {\nreturn `${this.apresentar()} Eu trabalho como ${this.cargo}.`;\n}\n\npublic mostrarCpf(): string {\nreturn this.exibirCpf(); Permitido pois exibirCpf() é protected\n}\n}\n\nconst funcionario = new Funcionario("Carlos", 30, "123.456.789-00", "Desenvolvedor");\n\nconsole.log(funcionario.nome); Válido: public\nconsole.log(funcionario.apresentar()); Válido: public\nconsole.log(funcionario.idade); Erro: private\nconsole.log(funcionario.cpf); Erro: protected\nconsole.log(funcionario.detalhes()); Válido\nconsole.log(funcionario.mostrarCpf()); Válido\n	No TypeScript, os Modificadores de Acesso controlam a visibilidade de propriedades e métodos dentro de uma classe:\n\n- public: Acessível de qualquer lugar.\n- private: Acessível apenas dentro da própria classe.\n- protected: Acessível dentro da classe e em subclasses.\n\n🔹 Uso do private\n- Protege dados sensíveis, evitando acesso externo direto.\n- Exemplo: private idade, método calcularAnoNascimento().\n\n🔹 Uso do protected\n- Permite que subclasses acessem propriedades/métodos da classe pai.\n- Exemplo: protected cpf, método exibirCpf().\n\n🔹 Uso do public\n- Permite acesso irrestrito de qualquer parte do código.\n- Exemplo: public nome, método apresentar().\n\n⚠️ Importante:\n- private impede o acesso até mesmo em classes filhas.\n- protected permite acesso em herança, mas não diretamente fora da classe.\n- public não tem restrições e deve ser usado quando necessário.\n\n💡 Boas práticas:\n- Use private para encapsular dados e evitar alterações indevidas.\n- Use protected quando precisar expor algo apenas para heranças.\n- Use public para métodos que precisam ser acessíveis externamente.	2025-01-29 20:23:12.815	92d0ac64-1a35-496c-865c-8fb7b42495e9	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.815
b9f3857e-7cc3-4b9c-aaba-805c7a66d60d	Arrays e Métodos	Manipulação de arrays em TypeScript	Declaração e inicialização\nlet numeros: number[] = [1, 2, 3, 4, 5];\n\nretorno: [1, 2, 3, 4, 5]\n\nlet frutas: Array<string> = ["maçã", "banana", "laranja"];\n\nretorno: ["maçã", "banana", "laranja"]\n\nMétodos de adição e remoção\nfrutas.push("uva");\n\nretorno: 4 (novo tamanho do array)\nfrutas agora é: ["maçã", "banana", "laranja", "uva"]\n\nlet ultima = frutas.pop();\n\nretorno: "uva"\nfrutas agora é: ["maçã", "banana", "laranja"]\n\nfrutas.unshift("morango");\n\nretorno: 4 (novo tamanho do array)\nfrutas agora é: ["morango", "maçã", "banana", "laranja"]\n\nlet primeira = frutas.shift();\n\nretorno: "morango"\nfrutas agora é: ["maçã", "banana", "laranja"]\n\nfrutas.splice(1, 2, "pera");\n\nretorno: ["banana", "laranja"] (elementos removidos)\nfrutas agora é: ["maçã", "pera"]\n\nMétodos de transformação\nlet dobrados = numeros.map((n: number): number => n * 2);\n\nretorno: [2, 4, 6, 8, 10]\n\nlet pares = numeros.filter((n: number): boolean => n % 2 === 0);\n\nretorno: [2, 4]\n\nlet soma = numeros.reduce((acc: number, n: number): number => acc + n, 0);\n\nretorno: 15\n\nMétodos de busca\nlet indice = frutas.indexOf("banana");\n\nretorno: 1 (ou -1 se não encontrar)\n\nlet temMaca = frutas.includes("maçã");\n\nretorno: true\n\nlet encontrado = numeros.find((n: number): boolean => n > 3);\n\nretorno: 4 (ou undefined se não encontrar)\n\nlet algumMaior3 = numeros.some((n: number): boolean => n > 3);\n\nretorno: true\n\nlet todosMaior0 = numeros.every((n: number): boolean => n > 0);\n\nretorno: true\n\nOrdenação e outras operações\nlet ordenados = [...numeros].sort((a: number, b: number): number => a - b);\n\nretorno: [1, 2, 3, 4, 5]\n\nlet parte = numeros.slice(1, 3);\n\nretorno: [2, 3]\n\nlet juntado = numeros.join(", ");\n\nretorno: "1, 2, 3, 4, 5"\n\nType-safe iteração\nnumeros.forEach((n: number, i: number): void => {\nconsole.log(`Número ${n} no índice ${i}`);\n});\nnão tem retorno, apenas exibe no console\n\nMap com type inference\nlet stringNumeros = numeros.map(n => n.toString());\n\nretorno: ["1", "2", "3", "4", "5"]\n\nFilter com union types\nlet itens: (string | number)[] = ["a", 1, "b", 2];\nlet apenasStrings = itens.filter((item): item is string =>\ntypeof item === "string"\n);\n\nretorno: ["a", "b"]	Declaração e inicialização\n\nnumber[] - Tipo de array mais comum em TypeScript\n\nArray<string> - Sintaxe alternativa usando generics\n\n\nMétodos de adição e remoção\n\n.push() - Adiciona ao final e retorna novo tamanho\n\n.pop() - Remove do final e retorna elemento removido\n\n.unshift() - Adiciona no início e retorna novo tamanho\n\n.shift() - Remove do início e retorna elemento removido\n\n.splice() - Remove/adiciona elementos e retorna removidos\n\n\nMétodos de transformação\n\n.map() - Transforma elementos mantendo type safety\n\n.filter() - Filtra elementos preservando o tipo\n\n.reduce() - Reduz array a um valor com tipo especificado\n\n\nMétodos de busca\n\n.indexOf() - Retorna índice com type narrowing\n\n.includes() - Verifica existência com type checking\n\n.find() - Encontra elemento com type inference\n\n.some() - Verifica condição com type checking\n\n.every() - Verifica condição para todos elementos\n\n\nOrdenação e outras operações\n\n.sort() - Ordena com comparador tipado\n\n.slice() - Extrai subarray mantendo o tipo\n\n.join() - Converte para string com separador\n\n\nType-safe iteração\n\n.forEach() - Iteração com tipos verificados\n\nType inference - TypeScript infere tipos automaticamente\n\nType guard - Narrowing de tipos em filtragens	2025-01-29 20:23:12.825	f4646f73-3e87-46c9-b136-795c32ada04c	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.825
50df93cb-1ca0-47cd-97c0-0ef3e816a1d2	Objetos e Métodos	Trabalhando com objetos em TypeScript	Interface e inicialização\ninterface Pessoa {\nnome: string;\nidade: number;\nemail?: string;  Propriedade opcional\n}\n\nconst pessoa: Pessoa = {\nnome: "Maria",\nidade: 30\n};\n\nretorno: { nome: "Maria", idade: 30 }\n\nMétodos do Object\nconst chaves = Object.keys(pessoa);\n\nretorno: ["nome", "idade"]\n\nconst valores = Object.values(pessoa);\n\nretorno: ["Maria", 30]\n\nconst entradas = Object.entries(pessoa);\n\nretorno: [["nome", "Maria"], ["idade", 30]]\n\nconst temPropriedade = Object.hasOwn(pessoa, "nome");\n\nretorno: true\n\nAcessando e modificando\npessoa.nome = "Ana";\n\nretorno: "Ana"\npessoa agora é: { nome: "Ana", idade: 30 }\n\npessoa["idade"] = 31;\n\nretorno: 31\npessoa agora é: { nome: "Ana", idade: 31 }\n\ndelet e pessoa.email;\n\nretorno: true\n\nSpread e Rest com type safety\nconst pessoaComplet a: Pessoa = {\n...pessoa,\nemail: "ana@email.com"\n};\n\nretorno: { nome: "Ana", idade: 31, email: "ana@email.com" }\n\nconst { nome, ...resto }: Pessoa = pessoaComplet a;\nretorno para nome: "Ana"\nretorno para resto: { idade: 31, email: "ana@email.com" }\n\nObject.freeze com types\ninterface PessoaReadOnly {\nreadonly nome: string;\nreadonly idade: number;\n}\n\nconst pessoaImutavel: Readonly<Pessoa> = Object.freeze(pessoa);\nTentativa de modificação gerará erro de compilação\npessoaImutavel.nome = "João"; Erro\n\nGetters e Setters tipados\ninterface Conta {\nsaldo: number;\nreadonly saldoFormatado: string;\ndeposito(valor: number): void;\n}\n\nconst conta: Conta = {\nsaldo: 0,\nget saldoFormatado(): string {\nreturn `R$ ${this.saldo.toFixed(2)}`;\n},\ndeposito(valor: number): void {\nthis.saldo += valor;\n}\n};\nuso:\nconta.deposito(100);\nretorno do saldoFormatado: "R$ 100.00"\n\nType Guards com objetos\ninterface Carro {\ntipo: "carro";\nportas: number;\n}\n\ninterface Moto {\ntipo: "moto";\ncilindradas: number;\n}\n\ntype Veiculo = Carro | Moto;\n\nfunction ehCarro(veiculo: Veiculo): veiculo is Carro {\nreturn veiculo.tipo === "carro";\n}\n\nconst veiculo: Veiculo = { tipo: "carro", portas: 4 };\nif (ehCarro(veiculo)) {\nTypeScript sabe que é um Carro aqui\nconsole.log(veiculo.portas);\n}\nretorno do console.log: 4\n\nIndex Signatures\ninterface DicionarioNumeros {\n[key: string]: number;\n}\n\nconst dicionario: DicionarioNumeros = {\n"um": 1,\n"dois": 2\n};\n\nretorno: { "um": 1, "dois": 2 }\n\nKeyof com objetos\ntype ChavesPessoa = keyof Pessoa;\nretorno do tipo: "nome" | "idade" | "email"\n\nfunction getProp<T>(obj: T, key: keyof T): T[keyof T] {\nreturn obj[key];\n}\nconst nomePessoa = getProp(pessoa, "nome");\n\nretorno: "Ana"	Interface e inicialização\n\ninterface - Define o contrato do objeto com tipos\n\n?: - Marca propriedades como opcionais\n\n\nMétodos do Object\n\nObject.keys() - Retorna array de chaves com type safety\n\nObject.values() - Retorna array de valores tipados\n\nObject.entries() - Retorna array de pares chave-valor tipados\n\nObject.hasOwn() - Verifica propriedade com type checking\n\n\nAcessando e modificando\n\nNotação ponto - Acesso type-safe a propriedades\n\nNotação colchetes - Acesso dinâmico com verificação de tipos\n\ndelete - Remove propriedades opcionais\n\n\nSpread e Rest com type safety\n\n... spread - Copia propriedades mantendo tipos\n\n... rest - Coleta propriedades restantes com tipos\n\n\nObject.freeze com types\n\nReadonly<T> - Torna todas as propriedades readonly\n\nObject.freeze - Impede modificações em runtime\n\n\nGetters e Setters tipados\n\nget - Define propriedade computada com tipo de retorno\n\nset - Define setter com verificação de tipo do parâmetro\n\n\nType Guards com objetos\n\nis - Define type guard personalizado\n\nNarrowing - Refina tipos em condicionais\n\n\nIndex Signatures\n\n[key: string] - Define tipos para propriedades dinâmicas\n\nPermite adicionar propriedades mantendo type safety\n\n\nKeyof com objetos\n\nkeyof - Obtém union type das chaves\n\nPermite acesso genérico type-safe a propriedades	2025-01-29 20:23:12.827	10294186-6492-4324-b037-893cd62636b9	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.827
8f1aad11-127e-41ac-9eb6-df5c76de495c	Strings e Métodos	Manipulação de strings em TypeScript	Criação de strings\nlet aspasSimples: string = 'texto simples';\n\nretorno: "texto simples"\n\nlet aspasDuplas: string = "texto com aspas";\n\nretorno: "texto com aspas"\n\nlet var iavel: string = "mundo";\nlet template: string = `Olá ${var iavel}`;\n\nretorno: "Olá mundo"\n\nMétodos de busca\nlet texto: string = "TypeScript é incrível";\n\nlet tamanho: number = texto.length;\n\nretorno: 21\n\nlet posicao: number = texto.indexOf("é");\n\nretorno: 11\n\nlet ultimaPosicao: number = texto.lastIndexOf("i");\n\nretorno: 19\n\nlet inclui: boolean = texto.includes("Script");\n\nretorno: true\n\nlet comeca: boolean = texto.startsWith("Type");\n\nretorno: true\n\nlet termina: boolean = texto.endsWith("vel");\n\nretorno: true\n\nlet buscaRegex: number = texto.search(/é/);\n\nretorno: 11\n\nlet match: RegExpMatchArray | null = texto.match(/[A-Z]/g);\n\nretorno: ["T", "S"]\n\nMétodos de transformação\nlet maiusculas: string = texto.toUpperCase();\n\nretorno: "TYPESCRIPT É INCRÍVEL"\n\nlet minusculas: string = texto.toLowerCase();\n\nretorno: "typescript é incrível"\n\nlet textoComEspacos: string = "  texto com espaços  ";\nlet semEspacos: string = textoComEspacos.trim();\n\nretorno: "texto com espaços"\n\nlet semEspacosInicio: string = textoComEspacos.trimStart();\n\nretorno: "texto com espaços  "\n\nlet semEspacosFim: string = textoComEspacos.trimEnd();\n\nretorno: "  texto com espaços"\n\nlet substituido: string = texto.replace("incrível", "fantástico");\n\nretorno: "TypeScript é fantástico"\n\nlet substituicaoGlobal: string = "ana banana".replace(/ana/g, "ada");\n\nretorno: "ada bada"\n\nlet partes: string[] = texto.split(" ");\n\nretorno: ["TypeScript", "é", "incrível"]\n\nExtração de substrings\nlet sub1: string = texto.substring(0, 4);\n\nretorno: "Type"\n\nlet sub2: string = texto.slice(4, 10);\n\nretorno: "Script"\n\nlet sub3: string = texto.slice(-9);\n\nretorno: "incrível"\n\nlet caractere: string = texto.charAt(0);\n\nretorno: "T"\n\nlet codigo: number = texto.charCodeAt(0);\n\nretorno: 84\n\nTemplate literals tipados\ntype Saudacao = `Olá ${string}`;\nlet saudacao: Saudacao = `Olá João`;\n\nretorno: "Olá João"\nlet invalido: Saudacao = `Tchau João`; Erro!\n\nTemplate literal com union types\ntype Tamanho = 'pequeno' | 'médio' | 'grande';\ntype Cor = 'vermelho' | 'azul' | 'verde';\ntype Produto = `${Tamanho}-${Cor}`;\nlet produto: Produto = 'pequeno-vermelho';\n\nretorno: "pequeno-vermelho"\n\nPadronização de strings\nlet preenchido: string = "123".padStart(5, "0");\n\nretorno: "00123"\n\nlet preenchidoFim: string = "123".padEnd(5, "0");\n\nretorno: "12300"\n\nlet repetido: string = "abc".repeat(3);\n\nretorno: "abcabcabc"	Criação de strings\n\nstring - Tipo básico para textos em TypeScript\n\nTemplate literals - Permitem interpolação tipada\n\nUnion types com strings literais - Restringem valores possíveis\n\n\nMétodos de busca\n\n.length - Propriedade que retorna o tamanho da string\n\n.indexOf() - Retorna a posição ou -1 com type checking\n\n.lastIndexOf() - Busca da direita para esquerda com type safety\n\n.includes() - Retorna boolean com type checking\n\n.startsWith() - Verifica início com type safety\n\n.endsWith() - Verifica final com type safety\n\n.search() - Busca com regex e retorna number\n\n.match() - Retorna array tipado ou null com regex\n\n\nMétodos de transformação\n\n.toUpperCase() - Converte para maiúsculas mantendo tipo\n\n.toLowerCase() - Converte para minúsculas mantendo tipo\n\n.trim() - Remove espaços com retorno tipado\n\n.trimStart() - Remove espaços do início\n\n.trimEnd() - Remove espaços do fim\n\n.replace() - Substitui com type checking\n\n.split() - Converte para array tipado\n\n\nExtração de substrings\n\n.substring() - Extrai parte da string com type safety\n\n.slice() - Suporta índices negativos com type checking\n\n.charAt() - Retorna caractere com tipo string\n\n.charCodeAt() - Retorna código numérico tipado\n\n\nTemplate literals tipados\n\nType literals - Definem padrões exatos para strings\n\nUnion com template - Combinam múltiplos padrões tipados\n\n\nPadronização de strings\n\n.padStart() - Preenche início mantendo tipo string\n\n.padEnd() - Preenche final mantendo tipo string\n\n.repeat() - Repete string com verificação de tipo	2025-01-29 20:23:12.829	f63798d4-03f5-4fcf-9812-2e1742bb39ec	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.829
7f19fea5-3059-49d5-b1f0-d21ae03b3835	Introdução a Generics	Uso de Generics para tornar funções e classes mais flexíveis	Função genérica que retorna qualquer tipo de valor\nfunction identidade<T>(valor: T): T {\nreturn valor;\n}\nconsole.log(identidade<string>("Olá TypeScript")); saída: Olá TypeScript\nconsole.log(identidade<number>(42)); saída: 42\n\nClasse genérica\nclass Caixa<T> {\nprivate conteudo: T;\n\nconst ructor(valor: T) {\nthis.conteudo = valor;\n}\n\nobterConteudo(): T {\nreturn this.conteudo;\n}\n}\n\nconst caixaNumeros = new Caixa<number>(100);\nconsole.log(caixaNumeros.obterConteudo()); saída: 100\n\nconst caixaTexto = new Caixa<string>("Texto aqui");\nconsole.log(caixaTexto.obterConteudo()); saída: Texto aqui	Generics permitem a criação de código reutilizável e flexível ao trabalhar com diferentes tipos.\nIsso evita duplicação de código ao tornar funções e classes mais dinâmicas.\n\nA função identidade<T> aceita qualquer tipo como entrada e retorna o mesmo tipo.\nJá a classe Caixa<T> pode armazenar qualquer tipo de dado, garantindo que a manipulação seja feita de forma segura.	2025-01-29 20:23:12.835	bd2b5e27-8fca-4338-92ba-931fd73221f5	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.835
82f70b6e-f23d-46b1-8867-74ed6dddab40	Estruturas condicionais	Estruturas condicionais de fluxo em TypeScript	If...else com Type Guard\nlet valor: string | number = "42";\n\nif (typeof valor === "string") {\nconsole.log(valor.toUpperCase());\n\nretorno: "42"\n} else {\nconsole.log(valor.toFixed(2));\n\nretorno: não executa este bloco\n}\n\nSwitch com Type Safety\ntype Status = "pendente" | "aprovado" | "rejeitado";\nconst status: Status = "aprovado";\n\nswitch (status) {\ncase "pendente":\nconsole.log("Em análise");\n\nretorno: não executa\nbreak;\ncase "aprovado":\nconsole.log("Tudo certo!");\n\nretorno: "Tudo certo!"\nbreak;\ncase "rejeitado":\nconsole.log("Não aprovado");\n\nretorno: não executa\nbreak;\ndefault:\nO TypeScript sabe que nunca chegará aqui\nconst _nunca: never = status;\nbreak;\n}\n\nOperador ternário com Type Inference\nconst idade: number = 20;\nconst mensagem: string = idade >= 18\n? "Pode dirigir"\n: "Não pode dirigir";\n\nretorno: "Pode dirigir"\n\nEncadeamento opcional\ninterface Usuario {\nendereco?: {\nrua?: string;\nnumero?: number;\n};\n}\n\nconst usuario: Usuario = {};\nconst rua = usuario?.endereco?.rua;\n\nretorno: undefined\n\nNullish Coalescing\nconst nome: string | null = null;\nconst nomeExibicao = nome ?? "Anônimo";\n\nretorno: "Anônimo"\n\nType Narrowing com if\nfunction processaValor(valor: string | number) {\nif (typeof valor === "string") {\nreturn valor.toUpperCase();\nretorno se string: versão maiúscula da string\n} else {\nreturn valor.toFixed(2);\nretorno se number: número formatado com 2 decimais\n}\n}\n\nType Guards personalizados\ninterface Carro {\ntipo: "carro";\nportas: number;\n}\n\ninterface Moto {\ntipo: "moto";\ncilindradas: number;\n}\n\ntype Veiculo = Carro | Moto;\n\nfunction ehCarro(veiculo: Veiculo): veiculo is Carro {\nreturn veiculo.tipo === "carro";\n}\n\nconst veiculo: Veiculo = { tipo: "carro", portas: 4 };\nif (ehCarro(veiculo)) {\nconsole.log(veiculo.portas);\n\nretorno: 4\n}\n\nPattern Matching com TypeScript\ntype Resultado<T> =\n| { sucesso: true; valor: T }\n| { sucesso: false; erro: string };\n\nfunction processaResultado<T>(resultado: Resultado<T>): T | null {\nif (resultado.sucesso) {\nreturn resultado.valor;\nretorno se sucesso: valor do tipo T\n} else {\nconsole.error(resultado.erro);\nreturn null;\nretorno se erro: null\n}\n}	If...else com Type Guard\n\ntypeof - Verifica tipo em runtime com type narrowing\n\nType Guard - Ajuda TypeScript a entender o tipo em cada bloco\n\n\nSwitch com Type Safety\n\nType Literals - Restringe valores possíveis para o switch\n\nNever - Garante que todos os casos foram cobertos\n\n\nOperador ternário com Type Inference\n\nType Inference - TypeScript infere tipo do resultado\n\nÚtil para lógica condicional simples com tipos\n\n\nEncadeamento opcional\n\n?. - Acesso seguro a propriedades possivelmente undefined\n\nEvita erros de runtime com null/undefined\n\n\nNullish Coalescing\n\n?? - Fornece valor padrão apenas para null/undefined\n\nDiferente do || que age em todos os falsy values\n\n\nType Narrowing com if\n\nNarrowing - Restringe tipos em blocos condicionais\n\nTypeScript entende o tipo em cada bloco\n\n\nType Guards personalizados\n\nis - Cria predicado de tipo personalizado\n\nPermite type narrowing customizado\n\n\nPattern Matching com TypeScript\n\nUnion Types - Define possíveis estados/resultados\n\nDiscriminated Unions - Usa propriedade para distinguir tipos	2025-01-29 20:23:12.843	bb8e7085-a62b-4257-831e-b223e3bb350f	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.843
d1f941a1-2e6a-48c0-88b0-66014fa17823	Loops e Iterações	Diferentes formas de iteração em TypeScript	For tradicional com type safety\nfor (let i: number = 0; i < 5; i++) {\nconsole.log(i);\n}\nretorno no console: 0, 1, 2, 3, 4\n\nFor...of com arrays tipados\nconst numeros: number[] = [1, 2, 3, 4];\nfor (const num of numeros) {\nconsole.log(num);\n}\nretorno no console: 1, 2, 3, 4\n\nFor...in com objetos tipados\ninterface Pessoa {\nnome: string;\nidade: number;\n}\n\nconst pessoa: Pessoa = { nome: "João", idade: 25 };\nfor (const key in pessoa) {\nconsole.log(`${key}: ${pessoa[key as keyof Pessoa]}`);\n}\nretorno no console:\n"nome: João"\n"idade: 25"\n\nWhile com type narrowing\nlet contador: number | null = 10;\nwhile (contador !== null && contador > 0) {\nconsole.log(contador);\ncontador--;\n}\nretorno no console: 10, 9, 8, 7, 6, 5, 4, 3, 2, 1\n\nDo...while com type checking\nlet tentativas: number = 0;\ndo {\nconsole.log(`Tentativa ${tentativas + 1}`);\ntentativas++;\n} while (tentativas < 3);\nretorno no console:\n"Tentativa 1"\n"Tentativa 2"\n"Tentativa 3"\n\nForEach com tipos\nconst frutas: string[] = ["maçã", "banana", "laranja"];\nfrutas.forEach((fruta: string, index: number) => {\nconsole.log(`${index}: ${fruta}`);\n});\nretorno no console:\n"0: maçã"\n"1: banana"\n"2: laranja"\n\nIterador personalizado\nfunction* numeroGenerator(): Generator<number> {\nyield 1;\nyield 2;\nyield 3;\n}\n\nfor (const num of numeroGenerator()) {\nconsole.log(num);\n}\nretorno no console: 1, 2, 3\n\nIterator com interface tipada\ninterface Iterator<T> {\nnext(): { value: T; done: boolean };\n}\n\nclass NumberRange implements Iterator<number> {\nprivate current: number = 0;\nconst ructor(private max: number) {}\n\nnext(): { value: number; done: boolean } {\nif (this.current < this.max) {\nreturn { value: this.current++, done: false };\n}\nreturn { value: this.current, done: true };\n}\n}\n\nconst range = new NumberRange(3);\nlet result = range.next();\nwhile (!result.done) {\nconsole.log(result.value);\nresult = range.next();\n}\nretorno no console: 0, 1, 2\n\nMap com type safety\nconst mapNumeros = new Map<string, number>();\nmapNumeros.set("um", 1);\nmapNumeros.set("dois", 2);\n\nfor (const [chave, valor] of mapNumeros) {\nconsole.log(`${chave}: ${valor}`);\n}\nretorno no console:\n"um: 1"\n"dois: 2"	For tradicional com type safety\n\nVariável de controle tipada como number\n\nGarante type checking em incrementos/condições\n\n\nFor...of com arrays tipados\n\nIteração segura sobre arrays tipados\n\nTypeScript infere o tipo do elemento automaticamente\n\n\nFor...in com objetos tipados\n\nkeyof - Garante type safety ao acessar propriedades\n\nNecessário assertion de tipo para chaves\n\n\nWhile com type narrowing\n\nNarrowing em condições de loop\n\nType guard para null/undefined\n\n\nDo...while com type checking\n\nExecuta pelo menos uma vez\n\nMantém type safety na condição\n\n\nForEach com tipos\n\nArrow function com parâmetros tipados\n\nIndex opcional com tipo number\n\n\nIterador personalizado\n\nGenerator tipado com Generator<T>\n\nyield - Retorna valores com tipo específico\n\n\nIterator com interface tipada\n\nInterface Iterator do TypeScript\n\nImplementação type-safe de iteradores\n\n\nMap com type safety\n\nMap tipado com generics\n\nDestructuring mantém tipos das chaves e valores	2025-01-29 20:23:12.846	d46131b6-3857-4572-9e8d-3ed132bce81d	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.846
a0a654e0-78fe-470b-a847-e9619fb2d485	Map e Set	Map e Set em TypeScript	Criando um Map e adicionando valores\nconst usuarios = new Map<number, string>();\nusuarios.set(1, "Alice");\nusuarios.set(2, "Bob");\n\nObtendo um valor\nconsole.log(usuarios.get(1)); saída: Alice\n\nVerificando se uma chave existe\nconsole.log(usuarios.has(2)); saída: true\n\nIterando sobre um Map\nusuarios.forEach((nome, id) => {\nconsole.log(`ID: ${id}, Nome: ${nome}`);\n});\n\nCriando um Set e adicionando valores únicos\nconst numeros = new Set([1, 2, 3, 3, 4, 5]);\nconsole.log(numeros); saída: Set { 1, 2, 3, 4, 5 }\n\nAdicionando e removendo elementos\nnumeros.add(6);\nnumeros.delet e(2);\n\nconsole.log(numeros); saída: Set { 1, 3, 4, 5, 6 }	O Map é uma estrutura de dados que armazena pares chave-valor, permitindo acesso eficiente aos elementos.\nDiferente de um objeto, as chaves podem ser de qualquer tipo.\n\nO Set é uma coleção de valores únicos, útil quando não queremos elementos duplicados.\nAmbas as estruturas são usadas para manipulação de dados em TypeScript e JavaScript, sendo úteis para buscas rápidas e remoção de duplicatas.	2025-01-29 20:23:12.832	8cd766e2-caa5-4289-a92f-0b91e085e760	5d9f153f-110c-44de-a4c7-c7020debf158	2025-02-11 15:22:40.206
3c44474e-0b27-4d1d-b0a8-b04fa812fc1d	Condicionais type guards	Diferentes tipos de condicionais e type guards em TypeScript	Type Guards básicos\nfunction processaValor(valor: string | number) {\nif (typeof valor === "string") {\nreturn valor.toUpperCase();\n\nretorno: string em maiúsculas\n} else {\nreturn valor.toFixed(2);\n\nretorno: número com 2 casas decimais\n}\n}\n\ninstanceof Type Guard\nclass Erro1 extends Error {}\nclass Erro2 extends Error {}\n\nfunction trataErro(erro: Error) {\nif (erro instanceof Erro1) {\nconsole.log("Tratando erro tipo 1");\nretorno no console: "Tratando erro tipo 1"\n} else if (erro instanceof Erro2) {\nconsole.log("Tratando erro tipo 2");\nretorno no console: "Tratando erro tipo 2"\n}\n}\n\nin operator Type Guard\ninterface Peixe {\nnadar: () => void;\n}\ninterface Passaro {\nvoar: () => void;\n}\n\nfunction mover(animal: Peixe | Passaro) {\nif ("nadar" in animal) {\nanimal.nadar();\n\nretorno: executa método nadar\n} else {\nanimal.voar();\n\nretorno: executa método voar\n}\n}\n\nUser-Defined Type Guards\ninterface Carro {\ntipo: "carro";\nrodas: number;\n}\n\ninterface Moto {\ntipo: "moto";\ncilindradas: number;\n}\n\nfunction ehCarro(veiculo: Carro | Moto): veiculo is Carro {\nreturn veiculo.tipo === "carro";\n}\n\nconst veiculo1: Carro = { tipo: "carro", rodas: 4 };\nif (ehCarro(veiculo1)) {\nconsole.log(veiculo1.rodas);\n\nretorno: 4\n}\n\nDiscriminated Unions\ntype Resposta =\n| { tipo: "sucesso"; dados: string }\n| { tipo: "erro"; mensagem: string };\n\nfunction processaResposta(resposta: Resposta) {\nif (resposta.tipo === "sucesso") {\nreturn resposta.dados;\n\nretorno: string dos dados\n} else {\nthrow new Error(resposta.mensagem);\n\nretorno: lança erro com mensagem\n}\n}\n\nConditional Types\ntype EhString<T> = T extends string ? true : false;\ntype Resultado1 = EhString<"texto">;  true\ntype Resultado2 = EhString<number>;   false\n\nType Guards com Generics\nfunction isArray<T>(valor: T | T[]): valor is T[] {\nreturn Array.isArray(valor);\n}\n\nfunction processaItem<T>(item: T | T[]) {\nif (isArray(item)) {\nreturn item.length;\n\nretorno: tamanho do array\n} else {\nreturn item;\n\nretorno: item individual\n}\n}\n\nType Guards com Union Types\ntype StringOuNumero = string | number;\n\nfunction ehString(valor: StringOuNumero): valor is string {\nreturn typeof valor === "string";\n}\n\nfunction processaValorUnion(valor: StringOuNumero) {\nif (ehString(valor)) {\nreturn valor.toUpperCase();\n\nretorno: string em maiúsculas\n} else {\nreturn valor.toFixed(2);\n\nretorno: número formatado\n}\n}	Type Guards básicos\n\ntypeof - Verifica tipo primitivo em runtime\n\nType narrowing automático em blocos condicionais\n\n\ninstanceof Type Guard\n\ninstanceof - Verifica se objeto é instância de classe\n\nÚtil para tratamento de erros tipados\n\n\nin operator Type Guard\n\nin - Verifica existência de propriedade\n\nÚtil para discriminar entre interfaces\n\n\nUser-Defined Type Guards\n\nis - Cria type guard personalizado\n\nPermite type narrowing customizado\n\n\nDiscriminated Unions\n\nUnião discriminada - Usa propriedade comum para distinguir tipos\n\nPattern matching type-safe\n\n\nConditional Types\n\nextends - Define tipos condicionalmente\n\nÚtil para tipos genéricos avançados\n\n\nType Guards com Generics\n\nType Guards genéricos - Funcionam com qualquer tipo\n\nMantém type safety com tipos genéricos\n\n\nType Guards com Union Types\n\nUnion Types - Combina múltiplos tipos\n\nCustom Type Guards para unions	2025-01-29 20:23:12.849	4a0ec35a-04b5-4353-8505-d8c630c89cac	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.849
71e2f2c9-bcb8-4a23-a719-35d4737588eb	Funções Básicas	Declaração e uso de funções básicas em TypeScript	Função com tipos\nfunction soma(a: number, b: number): number {\nreturn a + b;\n}\nconst resultadoSoma = soma(5, 3);\n\nretorno: 8\n\nParâmetros opcionais\nfunction saudacao(nome: string, titulo?: string): string {\nif (titulo) {\nreturn `${titulo} ${nome}`;\n}\nreturn `Olá ${nome}`;\n}\nconst saudacao1 = saudacao("João");\nconst saudacao2 = saudacao("João", "Sr.");\nretorno saudacao1: "Olá João"\nretorno saudacao2: "Sr. João"\n\nParâmetros padrão\nfunction criarArray(tamanho: number = 3): number[] {\nreturn new Array(tamanho).fill(0);\n}\nconst array1 = criarArray();\nconst array2 = criarArray(5);\nretorno array1: [0, 0, 0]\nretorno array2: [0, 0, 0, 0, 0]\n\nRest parameters\nfunction somarTodos(...numeros: number[]): number {\nreturn numeros.reduce((total, n) => total + n, 0);\n}\nconst soma1 = somarTodos(1, 2, 3);\nconst soma2 = somarTodos(1, 2, 3, 4, 5);\nretorno soma1: 6\nretorno soma2: 15\n\nFunção com objeto como parâmetro\ninterface OpcoesUsuario {\nnome: string;\nidade: number;\nemail?: string;\n}\n\nfunction criarUsuario(opcoes: OpcoesUsuario): string {\nconst { nome, idade, email = 'não informado' } = opcoes;\nreturn `Usuário: ${nome}, Idade: ${idade}, Email: ${email}`;\n}\nconst usuario = criarUsuario({ nome: "Maria", idade: 25 });\n\nretorno: "Usuário: Maria, Idade: 25, Email: não informado"\n\nFunction overloads\nfunction processarValor(x: number): number;\nfunction processarValor(x: string): string;\nfunction processarValor(x: number | string): number | string {\nif (typeof x === "number") {\nreturn x * 2;\n}\nreturn x.toUpperCase();\n}\nconst proc1 = processarValor(10);\nconst proc2 = processarValor("hello");\nretorno proc1: 20\nretorno proc2: "HELLO"\n\nTipos de função\ntype OperacaoMatematica = (a: number, b: number) => number;\n\nconst multiplicar: OperacaoMatematica = (a, b) => a * b;\nconst dividir: OperacaoMatematica = (a, b) => a / b;\nretorno multiplicar(4, 2): 8\nretorno dividir(10, 2): 5\n\nGeneric function s\nfunction primeiro<T>(array: T[]): T | undefined {\nreturn array[0];\n}\nconst primeiroNumero = primeiro([1, 2, 3]);\nconst primeiraString = primeiro(["a", "b", "c"]);\nretorno primeiroNumero: 1\nretorno primeiraString: "a"\n\nFunções assíncronas tipadas\nasync function buscarDados<T>(url: string): Promise<T> {\nconst response = await fetch(url);\nreturn response.json();\n}\n\nretorno: Promise<T>\n\nFunções com callbacks tipados\nfunction executarComCallback(\nfn: (valor: string) => void,\nvalor: string\n): void {\nfn(valor);\n}\nexecutarComCallback((msg) => console.log(msg), "Olá");\nretorno no console: "Olá"	Função com tipos\n\nParâmetros tipados - Define tipos dos argumentos\n\nTipo de retorno - Especifica tipo do valor retornado\n\n\nParâmetros opcionais\n\n? - Marca parâmetro como opcional\n\nLógica condicional baseada em parâmetros opcionais\n\n\nParâmetros padrão\n\n= - Define valor padrão para parâmetro\n\nUsado quando argumento não é fornecido\n\n\nRest parameters\n\n...numeros - Agrupa múltiplos argumentos em array\n\nPermite número variável de argumentos tipados\n\n\nFunção com objeto como parâmetro\n\ninterface - Define estrutura do objeto parâmetro\n\nDestructuring com valores padrão\n\n\nFunction overloads\n\nMúltiplas assinaturas - Define diferentes formas de chamar\n\nType Guard - Diferencia comportamento por tipo\n\n\nTipos de função\n\ntype - Define tipo para função\n\nArrow function com tipo específico\n\n\nGeneric functions\n\n<T> - Tipo genérico para reuso com diferentes tipos\n\nFlexibilidade com type safety\n\n\nFunções assíncronas tipadas\n\nasync/await com tipos - Promessas tipadas\n\nGeneric para tipo do resultado\n\n\nFunções com callbacks tipados\n\nCallbacks tipados - Define tipo do argumento e retorno\n\nFunções como parâmetros com type safety	2025-01-29 20:23:12.861	75b6094c-7b96-4b04-9534-9578dd486935	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.861
73c9fe7e-9036-4165-a5f7-303ca7321a6a	Arrow Functions	Arrow functions e suas características em TypeScript	Arrow function básica\nconst soma = (a: number, b: number): number => a + b;\nconst resultado = soma(5, 3);\n\nretorno: 8\n\nCom bloco de código\nconst multiplicar = (a: number, b: number): number => {\nconst resultado = a * b;\nreturn resultado;\n};\nconst resultadoMult = multiplicar(4, 2);\n\nretorno: 8\n\nComo callback em array\nconst numeros: number[] = [1, 2, 3, 4, 5];\nconst dobrados = numeros.map((n: number): number => n * 2);\nconst pares = numeros.filter((n: number): boolean => n % 2 === 0);\nretorno dobrados: [2, 4, 6, 8, 10]\nretorno pares: [2, 4]\n\nCom tipos genéricos\nconst primeiro = <T>(arr: T[]): T | undefined => arr[0];\nconst primeiroNum = primeiro([1, 2, 3]);\nconst primeiraStr = primeiro(["a", "b", "c"]);\nretorno primeiroNum: 1\nretorno primeiraStr: "a"\n\nComo método de objeto\ninterface Calculadora {\nsoma: (a: number, b: number) => number;\nmultiplica: (a: number, b: number) => number;\n}\n\nconst calc: Calculadora = {\nsoma: (a, b) => a + b,\nmultiplica: (a, b) => a * b\n};\nconst resultadoSoma = calc.soma(2, 3);\nconst resultadoMult2 = calc.multiplica(2, 3);\nretorno resultadoSoma: 5\nretorno resultadoMult2: 6\n\nCom parâmetros default\nconst saudacao = (nome: string = "Visitante"): string =>\n`Olá ${nome}`;\nconst msg1 = saudacao();\nconst msg2 = saudacao("João");\nretorno msg1: "Olá Visitante"\nretorno msg2: "Olá João"\n\nCom destructuring\ninterface Pessoa {\nnome: string;\nidade: number;\n}\n\nconst apresentar = ({ nome, idade }: Pessoa): string =>\n`${nome} tem ${idade} anos`;\nconst pessoa = { nome: "Ana", idade: 25 };\nconst apresentacao = apresentar(pessoa);\n\nretorno: "Ana tem 25 anos"\n\nHigher-order function\nconst criarMultiplicador = (fator: number):\n((x: number) => number) => {\nreturn (x: number): number => x * fator;\n};\n\nconst duplicar = criarMultiplicador(2);\nconst triplicar = criarMultiplicador(3);\nconst resultadoDup = duplicar(4);\nconst resultadoTrip = triplicar(4);\nretorno resultadoDup: 8\nretorno resultadoTrip: 12\n\nCom Promises\nconst fetchData = async <T>(url: string): Promise<T> => {\nconst response = await fetch(url);\nreturn response.json();\n};\n\nretorno: Promise<T>\n\nCom type guards\nconst isString = (valor: unknown): valor is string =>\ntypeof valor === "string";\n\nconst processarValor = (valor: unknown): string => {\nif (isString(valor)) {\nreturn valor.toUpperCase();\n}\nreturn "não é string";\n};\nconst resultado1 = processarValor("teste");\nconst resultado2 = processarValor(123);\nretorno resultado1: "TESTE"\nretorno resultado2: "não é string"	Arrow function básica\n\nSintaxe concisa para funções simples\n\nRetorno implícito sem bloco de código\n\n\nCom bloco de código\n\n{} - Permite múltiplas instruções\n\nreturn explícito necessário\n\n\nComo callback em array\n\nIdeal para métodos de array\n\nType inference nos callbacks\n\n\nCom tipos genéricos\n\n<T> - Permite reutilização com diferentes tipos\n\nInferência de tipo automática\n\n\nComo método de objeto\n\ninterface define tipo das funções\n\nSintaxe concisa em objetos\n\n\nCom parâmetros default\n\nValores padrão para parâmetros opcionais\n\nType safety mantida\n\n\nCom destructuring\n\nDestructuring tipado de objetos\n\nAcesso direto a propriedades\n\n\nHigher-order function\n\nFunção que retorna função\n\nClosure com type safety\n\n\nCom Promises\n\nasync/await em arrow functions\n\nGenerics para tipo do resultado\n\n\nCom type guards\n\nPredicados de tipo em arrow functions\n\nNarrowing de tipos	2025-01-29 20:23:12.864	af1fb4d2-e190-4187-9860-f78fc7777a9a	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.864
bdafde0c-1de6-4199-866f-ffb49a337284	Funções Recursivas	Implementação de funções recursivas em TypeScript	Fatorial recursivo\nfunction fatorial(n: number): number {\nif (n <= 1) return 1;\nreturn n * fatorial(n - 1);\n}\nconst fat5 = fatorial(5);\n\nretorno: 120 (5 * 4 * 3 * 2 * 1)\n\nFibonacci recursivo\nfunction fibonacci(n: number): number {\nif (n <= 1) return n;\nreturn fibonacci(n - 1) + fibonacci(n - 2);\n}\nconst fib6 = fibonacci(6);\n\nretorno: 8 (sequência: 0, 1, 1, 2, 3, 5, 8)\n\nSoma de array recursiva\nfunction somaArray(arr: number[]): number {\nif (arr.length === 0) return 0;\nreturn arr[0] + somaArray(arr.slice(1));\n}\nconst soma = somaArray([1, 2, 3, 4, 5]);\n\nretorno: 15\n\nBusca binária recursiva\nfunction buscaBinaria(\narr: number[],\nalvo: number,\ninicio: number = 0,\nfim: number = arr.length - 1\n): number {\nif (inicio > fim) return -1;\n\nconst meio = Math.floor((inicio + fim) / 2);\nif (arr[meio] === alvo) return meio;\n\nif (arr[meio] > alvo) {\nreturn buscaBinaria(arr, alvo, inicio, meio - 1);\n} else {\nreturn buscaBinaria(arr, alvo, meio + 1, fim);\n}\n}\nconst pos = buscaBinaria([1, 2, 3, 4, 5], 3);\n\nretorno: 2 (índice do elemento 3)\n\nPercurso em árvore binária\ninterface No {\nvalor: number;\nesquerda?: No;\ndireita?: No;\n}\n\nfunction percorrerArvore(no: No | undefined): void {\nif (!no) return;\n\nconsole.log(no.valor);          Pré-ordem\npercorrerArvore(no.esquerda);   Esquerda\npercorrerArvore(no.direita);    Direita\n}\nconst arvore: No = {\nvalor: 1,\nesquerda: { valor: 2 },\ndireita: { valor: 3 }\n};\nretorno no console: 1, 2, 3\n\nDeep clone recursivo\nfunction deepClone<T>(obj: T): T {\nif (obj === null || typeof obj !== 'object') {\nreturn obj;\n}\n\nif (Array.isArray(obj)) {\nreturn obj.map(item => deepClone(item)) as unknown as T;\n}\n\nreturn Object.fromEntries(\nObject.entries(obj).map(\n([key, value]) => [key, deepClone(value)]\n)\n) as T;\n}\nconst original = { a: 1, b: { c: 2 } };\nconst clone = deepClone(original);\n\nretorno: { a: 1, b: { c: 2 } } (novo objeto)\n\nContagem regressiva recursiva\nfunction contagemRegressiva(n: number): void {\nif (n < 0) return;\nconsole.log(n);\ncontagemRegressiva(n - 1);\n}\nretorno para contagemRegressiva(3) no console: 3, 2, 1, 0\n\nReversão de string recursiva\nfunction reverterString(str: string): string {\nif (str === "") return "";\nreturn reverterString(str.substr(1)) + str.charAt(0);\n}\nconst revertida = reverterString("hello");\n\nretorno: "olleh"\n\nMáximo divisor comum (MDC) recursivo\nfunction mdc(a: number, b: number): number {\nif (b === 0) return a;\nreturn mdc(b, a % b);\n}\nconst resultado = mdc(48, 18);\n\nretorno: 6	Fatorial recursivo\n\nCaso base - n <= 1 retorna 1\n\nChamada recursiva - Multiplica n pelo fatorial de (n-1)\n\n\nFibonacci recursivo\n\nCasos base - F(0) = 0 e F(1) = 1\n\nChamada recursiva - Soma os dois números anteriores\n\n\nSoma de array recursiva\n\nCaso base - Array vazio retorna 0\n\nChamada recursiva - Soma primeiro elemento com resto do array\n\n\nBusca binária recursiva\n\nCaso base - Quando não encontra ou encontra o elemento\n\nChamadas recursivas - Divide o array pela metade\n\nEficiente para arrays ordenados\n\n\nPercurso em árvore binária\n\nCaso base - Nó nulo retorna void\n\nVisita em pré-ordem - Raiz, esquerda, direita\n\nType safety com interface No\n\n\nDeep clone recursivo\n\nCaso base - Valor primitivo ou null\n\nChamada recursiva para objetos e arrays\n\nMantém tipos com generics\n\n\nContagem regressiva recursiva\n\nCaso base - Número negativo\n\nChamada recursiva decrementando\n\n\nReversão de string recursiva\n\nCaso base - String vazia\n\nConcatena caracteres em ordem reversa\n\n\nMDC recursivo\n\nCaso base - Segundo número é zero\n\nChamada recursiva com resto da divisão	2025-01-29 20:23:12.867	31529545-d274-47e7-add7-d623b5165aa1	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.867
26075627-fe2e-4e2a-9fa6-a802c485697f	Funções Anônimas	Funções anônimas e suas aplicações em TypeScript	IIFE (Immediately Invoked Function Expression)\n(function() {\nconsole.log("Executado imediatamente");\n})();\nretorno no console: "Executado imediatamente"\n\nIIFE com parâmetros tipados\n(function(x: number): void {\nconsole.log(x * 2);\n})(21);\nretorno no console: 42\n\nFunção anônima em var iável\nconst saudacao = function(nome: string): string {\nreturn `Olá ${nome}`;\n};\nconst msg = saudacao("Maria");\n\nretorno: "Olá Maria"\n\nComo callback em array\n[1, 2, 3].forEach(function(item: number): void {\nconsole.log(item * 2);\n});\nretorno no console: 2, 4, 6\n\nEm event handlers\ninterface Evento {\ntipo: string;\ndados: unknown;\n}\n\nconst handler = function(evento: Evento): void {\nconsole.log(`Evento do tipo: ${evento.tipo}`);\n};\nconst meuEvento: Evento = { tipo: "click", dados: null };\nhandler(meuEvento);\nretorno no console: "Evento do tipo: click"\n\nClosure com tipo\nfunction criarContador(): () => number {\nlet count: number = 0;\nreturn function(): number {\nreturn ++count;\n};\n}\nconst contador = criarContador();\nconst valor1 = contador();\nconst valor2 = contador();\nretorno valor1: 1\nretorno valor2: 2\n\nHigher-order function com tipos\nfunction executarOperacao(\na: number,\nb: number,\noperacao: (x: number, y: number) => number\n): number {\nreturn operacao(a, b);\n}\n\nconst resultado = executarOperacao(5, 3, function(x, y) {\nreturn x * y;\n});\n\nretorno: 15\n\nCurrying com funções anônimas\nconst curry = function(fn: Function) {\nreturn function curried(...args: any[]): any {\nif (args.length >= fn.length) {\nreturn fn(...args);\n}\nreturn function(...moreArgs: any[]) {\nreturn curried(...args, ...moreArgs);\n};\n};\n};\n\nconst somarTres = function(a: number, b: number, c: number): number {\nreturn a + b + c;\n};\n\nconst somarCurried = curry(somarTres);\nconst resultado1 = somarCurried(1)(2)(3);\nconst resultado2 = somarCurried(1, 2)(3);\nretorno resultado1: 6\nretorno resultado2: 6\n\nFunção anônima assíncrona\nconst fetchData = async function<T>(url: string): Promise<T> {\nconst response = await fetch(url);\nreturn response.json();\n};\n\nretorno: Promise<T>\n\nFunção anônima com generics\nconst primeiro = function<T>(arr: T[]): T | undefined {\nreturn arr[0];\n};\nconst primeiroNumero = primeiro([1, 2, 3]);\nconst primeiraString = primeiro(["a", "b", "c"]);\nretorno primeiroNumero: 1\nretorno primeiraString: "a"	IIFE\n\nExecuta imediatamente após definição\n\nÚtil para criar escopo isolado\n\n\nIIFE com parâmetros\n\nAceita parâmetros tipados\n\nExecução imediata com argumentos\n\n\nFunção anônima em variável\n\nFunção sem nome atribuída a variável\n\nPode ser reutilizada através da variável\n\n\nComo callback\n\nComum em métodos de array\n\nExecuta para cada elemento com type safety\n\n\nEm event handlers\n\nFunções para tratar eventos tipados\n\nInterface define estrutura do evento\n\n\nClosure com tipo\n\nFunção interna acessa variáveis externas\n\nMantém estado entre chamadas com type safety\n\n\nHigher-order function\n\nFunção que recebe função como parâmetro\n\nTipos definidos para parâmetros e retorno\n\n\nCurrying com funções anônimas\n\nTransforma função com múltiplos argumentos\n\nPermite aplicação parcial de argumentos\n\n\nFunção anônima assíncrona\n\nasync/await em função anônima\n\nGeneric para tipo do resultado\n\n\nFunção anônima com generics\n\nTipos genéricos para reuso\n\nInferência de tipo automática	2025-01-29 20:23:12.87	4b6dbdfd-324d-4c01-8a5f-fd8e33b8e8cb	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.87
b0d702c0-5874-4248-895c-b954de8495eb	Callbacks e Promises	Trabalho com callbacks, promises e async/await em TypeScript	Callback simples\nfunction processarDados(\ndados: string[],\ncallback: (erro: Error | null, resultado?: string[]) => void\n): void {\ntry {\nconst processado = dados.map(d => d.toUpperCase());\ncallback(null, processado);\n} catch (erro) {\ncallback(erro as Error);\n}\n}\n\nprocessarDados(["a", "b", "c"], (erro, resultado) => {\nif (erro) console.error(erro);\nelse console.log(resultado);\n});\nretorno no console: ["A", "B", "C"]\n\nPromise básica\nfunction buscarDados(): Promise<string[]> {\nreturn new Promise((resolve, reject) => {\nsetTimeout(() => {\nresolve(["dado1", "dado2"]);\nou reject(new Error("Erro ao buscar"))\n}, 1000);\n});\n}\n\nbuscarDados()\n.then(dados => console.log(dados))\n.catch(erro => console.error(erro));\nretorno após 1s: ["dado1", "dado2"]\n\nAsync/Await com type safety\nasync function obterDados(): Promise<string[]> {\ntry {\nconst dados = await buscarDados();\nreturn dados.map(d => d.toUpperCase());\n} catch (erro) {\nthrow new Error(`Erro ao buscar dados: ${erro}`);\n}\n}\n\nconst dados = await obterDados();\n\nretorno: ["DADO1", "DADO2"]\n\nPromise.all com tipagem\ninterface Usuario {\nid: number;\nnome: string;\n}\n\ninterface Produto {\nid: number;\nnome: string;\npreco: number;\n}\n\nasync function buscarUsuarios(): Promise<Usuario[]> {\nreturn [{ id: 1, nome: "João" }];\n}\n\nasync function buscarProdutos(): Promise<Produto[]> {\nreturn [{ id: 1, nome: "Produto", preco: 100 }];\n}\n\nasync function buscarTudo(): Promise<{\nusuarios: Usuario[];\nprodutos: Produto[];\n}> {\nconst [usuarios, produtos] = await Promise.all([\nbuscarUsuarios(),\nbuscarProdutos()\n]);\nreturn { usuarios, produtos };\n}\n\nretorno: { usuarios: [...], produtos: [...] }\n\nPromise com generic\nfunction getData<T>(url: string): Promise<T> {\nreturn fetch(url).then(response => response.json());\n}\n\ninterface Post {\nid: number;\ntitle: string;\n}\n\nconst post = await getData<Post>('/api/post');\n\nretorno: { id: number, title: string }\n\nEvent Emitter tipado\ninterface EventMap {\ndata: (data: string) => void;\nerror: (error: Error) => void;\nend: () => void;\n}\n\nclass TypedEventEmitter {\nprivate listeners: Partial<Record<keyof EventMap, Function[]>> = {};\n\non<K extends keyof EventMap>(event: K, listener: EventMap[K]): void {\nif (!this.listeners[event]) {\nthis.listeners[event] = [];\n}\nthis.listeners[event]?.push(listener);\n}\n\nemit<K extends keyof EventMap>(\nevent: K,\n...args: Parameters<EventMap[K]>\n): void {\nthis.listeners[event]?.forEach(listener => {\nlistener(...args);\n});\n}\n}\n\nconst emitter = new TypedEventEmitter();\nemitter.on("data", (data) => console.log(data));\nemitter.emit("data", "teste");\nretorno no console: "teste"\n\nAsync Iterator\nasync function* gerarNumeros(): AsyncIterableIterator<number> {\nlet i = 0;\nwhile (i < 3) {\nawait new Promise(resolve => setTimeout(resolve, 1000));\nyield i++;\n}\n}\n\nfor await (const num of gerarNumeros()) {\nconsole.log(num);\n}\nretorno no console a cada 1s: 0, 1, 2	Callback simples\n\nCallback tipado com padrão erro-primeiro\n\nTry-catch para tratamento seguro de erros\n\n\nPromise básica\n\nPromise tipada com generics\n\nResolve/Reject com tipos específicos\n\n\nAsync/Await com type safety\n\nasync/await com tratamento de erros\n\nTipo de retorno Promise explícito\n\n\nPromise.all com tipagem\n\nPromise.all mantém tipos individuais\n\nDesestruturação tipada do resultado\n\n\nPromise com generic\n\nFetch tipado com generics\n\nInterface define estrutura da resposta\n\n\nEvent Emitter tipado\n\nInterface para eventos tipados\n\nTipo genérico para diferentes eventos\n\nParameters<T> para inferência de tipos\n\n\nAsync Iterator\n\nAsyncIterableIterator para iteração assíncrona\n\nYield com tipo específico\n\nFor await...of para consumir iterador	2025-01-29 20:23:12.873	e0369850-a1e5-43f0-b382-77bb479efd73	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.873
e6090861-d9a2-4cf4-b96d-5b9b27c99deb	Funções Genéricas	Como criar e utilizar funções genéricas em TypeScript	Função genérica simples\nfunction retornarElemento<T>(elemento: T): T {\nreturn elemento;\n}\nconsole.log(retornarElemento<string>("Olá")); saída: Olá\nconsole.log(retornarElemento<number>(10)); saída: 10\n\nFunção genérica com arrays\nfunction primeiroElemento<T>(array: T[]): T | undefined {\nreturn array[0];\n}\nconsole.log(primeiroElemento([1, 2, 3])); saída: 1\nconsole.log(primeiroElemento(["A", "B", "C"])); saída: A\n\nFunção genérica com múltiplos tipos\nfunction combinar<T, U>(valor1: T, valor2: U): [T, U] {\nreturn [valor1, valor2];\n}\nconsole.log(combinar<string, number>("Idade", 30)); saída: ["Idade", 30]\n\nRestrições em funções genéricas\ninterface TemNome {\nnome: string;\n}\n\nfunction exibirNome<T extends TemNome>(obj: T): string {\nreturn obj.nome;\n}\n\nconsole.log(exibirNome({ nome: "Carlos", idade: 25 })); saída: Carlos\n\nUso de generics com funções de array\nfunction mapearArray<T, U>(array: T[], callback: (item: T) => U): U[] {\nreturn array.map(callback);\n}\n\nconst numeros = [1, 2, 3, 4];\nconst dobrados = mapearArray(numeros, (num) => num * 2);\nconsole.log(dobrados); saída: [2, 4, 6, 8]	Funções genéricas permitem criar código reutilizável que pode trabalhar com diferentes tipos sem perder segurança de tipo.\n\n- A função retornarElemento<T> pode aceitar qualquer tipo de entrada e retornar o mesmo tipo.\n- A função primeiroElemento<T> trabalha com arrays genéricos e retorna o primeiro elemento.\n- A função combinar<T, U> demonstra o uso de múltiplos parâmetros genéricos.\n- Restrições (<T extends TemNome>) garantem que o tipo fornecido possua determinadas propriedades.\n- O uso de generics com funções de array, como map, permite transformar valores de maneira flexível e tipada.	2025-01-29 20:23:12.876	7694d8bd-7681-4968-90be-3a95234b0d23	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.876
3c23aca6-f77a-4548-b540-02bd7860c64d	Definição e Uso de Classes	Como criar e utilizar classes em TypeScript	Definição de uma classe básica\nclass Pessoa {\nnome: string;\nidade: number;\n\nconst ructor(nome: string, idade: number) {\nthis.nome = nome;\nthis.idade = idade;\n}\n\napresentar(): string {\nreturn `Olá, meu nome é ${this.nome} e tenho ${this.idade} anos.`;\n}\n}\n\nconst pessoa1 = new Pessoa("Carlos", 30);\nconsole.log(pessoa1.apresentar()); saída: Olá, meu nome é Carlos e tenho 30 anos.\n	Em TypeScript, classes permitem definir modelos para criar objetos com atributos e métodos.\n\n- A classe Pessoa possui dois atributos: nome e idade.\n- O construtor inicializa os atributos ao instanciar a classe.\n- O método apresentar retorna uma string com as informações da pessoa.\n- Criamos um objeto do tipo Pessoa e chamamos seu método.	2025-01-29 20:23:12.886	50489f4e-9dac-4265-ac2b-5c388e645788	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.886
fa4f41fe-38d5-46ec-aa7c-fa98b16e45ad	Herança e Sobrescrita	Como utilizar herança e sobrescrita de métodos em TypeScript	Classe base\nclass Animal {\nnome: string;\n\nconst ructor(nome: string) {\nthis.nome = nome;\n}\n\nemitirSom(): string {\nreturn "Som genérico de um animal";\n}\n}\n\nClasse derivada\nclass Cachorro extends Animal {\nconst ructor(nome: string) {\nsuper(nome);\n}\n\nemitirSom(): string {\nreturn "Au Au!";\n}\n}\n\nconst animal = new Animal("Criatura");\nconsole.log(animal.emitirSom()); saída: Som genérico de um animal\n\nconst dog = new Cachorro("Rex");\nconsole.log(dog.emitirSom()); saída: Au Au!\n	A herança permite que uma classe derive de outra, reutilizando seu comportamento.\n\n- A classe Animal possui um método emitirSom.\n- A classe Cachorro estende Animal e sobrescreve o método emitirSom.\n- Utilizamos super(nome) para chamar o construtor da classe base.\n- Criamos instâncias e chamamos os métodos, demonstrando a substituição do comportamento.	2025-01-29 20:23:12.889	8a8d606b-c2f7-4051-9811-e69566c93cf4	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.889
5ffb9303-3571-4be1-b8d5-1fd27ad29f80	Interfaces e Implementação	Uso de interfaces para definir contratos em TypeScript	Definição de uma interface\ninterface Veiculo {\nmarca: string;\nmodelo: string;\nacelerar(): void;\n}\n\nImplementação da interface\nclass Carro implements Veiculo {\nmarca: string;\nmodelo: string;\n\nconst ructor(marca: string, modelo: string) {\nthis.marca = marca;\nthis.modelo = modelo;\n}\n\nacelerar(): void {\nconsole.log(`${this.marca} ${this.modelo} está acelerando!`);\n}\n}\n\nconst carro = new Carro("Toyota", "Corolla");\ncarro.acelerar(); saída: Toyota Corolla está acelerando!\n	Interfaces definem contratos que classes devem seguir.\n\n- A interface Veiculo exige os atributos marca, modelo e o método acelerar.\n- A classe Carro implementa Veiculo e define os atributos e métodos exigidos.\n- Criamos uma instância da classe Carro e chamamos seu método acelerar.	2025-01-29 20:23:12.891	22807d73-72da-4f49-9e6e-f8667bce7966	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.891
b0932d5a-2d09-4314-ae93-2935e4a6b647	Classes e Métodos Abstratos	Como trabalhar com classes abstratas em TypeScript	Classe abstrata\nabstract class Forma {\nabstract calcularArea(): number;\n}\n\nClasse concreta\nclass Circulo extends Forma {\nraio: number;\n\nconst ructor(raio: number) {\nsuper();\nthis.raio = raio;\n}\n\ncalcularArea(): number {\nreturn Math.PI * this.raio * this.raio;\n}\n}\n\nconst circulo = new Circulo(5);\nconsole.log(circulo.calcularArea()); saída: 78.53981633974483\n	Classes abstratas servem como modelos para outras classes.\n\n- A classe Forma é abstrata e define um método abstrato calcularArea.\n- A classe Circulo estende Forma e implementa calcularArea.\n- Criamos uma instância de Circulo e calculamos sua área.	2025-01-29 20:23:12.893	011fbfa7-6121-4428-9c37-d7f37946bd70	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.893
a6f66c9d-c6c7-49fc-81da-81fa5a9476ab	Introdução ao Polimorfismo	Como aplicar polimorfismo em TypeScript	Classe base\nclass Funcionario {\nnome: string;\n\nconst ructor(nome: string) {\nthis.nome = nome;\n}\n\ncalcularSalario(): number {\nreturn 2000;\n}\n}\n\nSubclasses\nclass Desenvolvedor extends Funcionario {\ncalcularSalario(): number {\nreturn 5000;\n}\n}\n\nclass Designer extends Funcionario {\ncalcularSalario(): number {\nreturn 4000;\n}\n}\n\nUso do polimorfismo\nconst funcionarios: Funcionario[] = [\nnew Desenvolvedor("Alice"),\nnew Designer("Bob"),\nnew Funcionario("Carlos"),\n];\n\nfuncionarios.forEach(func => {\nconsole.log(`${func.nome}: R$${func.calcularSalario()}`);\n});\n\nsaída:\nAlice: R$5000\nBob: R$4000\nCarlos: R$2000\n	O polimorfismo permite tratar objetos de diferentes classes de forma unificada.\n\n- A classe Funcionario define um método calcularSalario.\n- As subclasses Desenvolvedor e Designer sobrescrevem calcularSalario.\n- Criamos um array de funcionários e chamamos calcularSalario para cada um.\n- Mesmo usando o tipo base Funcionario, cada objeto executa seu próprio método sobrescrito.	2025-01-29 20:23:12.896	174f09eb-aaec-4a88-ae24-e5c9bb39dd8e	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.896
56a22de2-81e6-459b-b8aa-c2b9c8614357	Uso de Decorators	Como utilizar decorators em TypeScript	Habilitando decorators no tsconfig.json:\n"experimentalDecorators": true\n\nCriando um decorator de classe\nfunction LogClass(const ructor: Function) {\nconsole.log("Classe criada:", const ructor.name);\n}\n\n@LogClass\nclass Usuario {\nconst ructor(public nome: string) {}\n}\n\nCriando um decorator de método\nfunction LogMethod(target: any, key: string, descriptor: PropertyDescriptor) {\nconst originalMethod = descriptor.value;\n\ndescriptor.value = function (...args: any[]) {\nconsole.log(`Chamando o método ${key} com argumentos:`, args);\nreturn originalMethod.apply(this, args);\n};\n}\n\nclass Produto {\nconst ructor(public nome: string, public preco: number) {}\n\n@LogMethod\ncalcularDesconto(porcentagem: number): number {\nreturn this.preco - (this.preco * porcentagem) / 100;\n}\n}\n\nconst produto = new Produto("Notebook", 3000);\nconsole.log(produto.calcularDesconto(10)); saída: Chamando o método calcularDesconto com argumentos: [10]\n	Decorators são uma funcionalidade avançada do TypeScript usada para modificar classes, métodos, propriedades e parâmetros.\n\n- Para usá-los, é necessário ativar `"experimentalDecorators": true` no `tsconfig.json`.\n- O decorator `@LogClass` exibe no console o nome da classe sempre que ela for criada.\n- O decorator `@LogMethod` intercepta chamadas de métodos, registrando os argumentos passados antes da execução real.\n- Essa abordagem é útil para logging, validações, injeção de dependências e outras funcionalidades avançadas.	2025-01-29 20:23:12.905	7dcacec9-a654-4dde-83a5-90dcd2f217ad	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.905
c571b80d-8e10-43ec-8c6c-45162a19dcdf	Módulos e Import/Export	Como dividir e organizar código usando módulos em TypeScript	Arquivo: mathUtils.ts\nexport function somar(a: number, b: number): number {\nreturn a + b;\n}\n\nexport function multiplicar(a: number, b: number): number {\nreturn a * b;\n}\n\nArquivo: app.ts\nimport { somar, multiplicar } from "./mathUtils";\n\nconsole.log(somar(5, 3)); saída: 8\nconsole.log(multiplicar(4, 2)); saída: 8\n	Os módulos no TypeScript permitem organizar e reutilizar código de forma eficiente.\n\n- O arquivo `mathUtils.ts` define e exporta funções usando `export`.\n- No arquivo `app.ts`, usamos `import { somar, multiplicar }` para trazer as funções para o escopo do arquivo.\n- Essa abordagem melhora a modularidade do código, reduz duplicação e facilita a manutenção.\n- Podemos usar `export default` para exportar um único valor por módulo.\n- Em aplicações maiores, o uso de módulos é essencial para manter o código organizado e escalável.	2025-01-29 20:23:12.907	38c394ba-9064-45c5-a41c-24dd74690135	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.907
8035b1ef-bf26-42d5-8da7-b2b9cad32375	Namespaces	Uso de Namespaces para organização de código em TypeScript	namespace Utils {\nexport function log(msg: string): void {\nconsole.log("[Log]:", msg);\n}\n\nexport function erro(msg: string): void {\nconsole.error("[Erro]:", msg);\n}\n}\n\nAcessando funções do namespace\nUtils.log("Iniciando aplicação...");\nUtils.erro("Ocorreu um problema!");\n	Namespaces são usados para organizar código dentro de um único arquivo ou em múltiplos arquivos.\n\n- O namespace `Utils` agrupa funções relacionadas à exibição de mensagens no console.\n- Para tornar funções acessíveis fora do namespace, usamos `export`.\n- A sintaxe `Utils.log("Mensagem")` permite acessar métodos dentro do namespace.\n- Namespaces eram amplamente utilizados antes da introdução dos módulos ES6, mas ainda podem ser úteis em projetos legados ou quando módulos não são uma opção viável.\n- Em projetos modernos, recomenda-se o uso de módulos para uma melhor organização do código.	2025-01-29 20:23:12.909	34f885d1-2ba5-46d8-9639-883e7645b190	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.909
1f1d8ccc-d657-4a59-9033-2055d3503562	Tipos Avançados	Exploração de tipos avançados em TypeScript	União de tipos (Union Types)\nfunction exibirId(id: string | number): void {\nconsole.log("ID:", id);\n}\nexibirId(123);\nexibirId("ABC");\n\nInterseção de tipos (Intersection Types)\ninterface Pessoa {\nnome: string;\n}\n\ninterface Empregado {\nsalario: number;\n}\n\ntype Trabalhador = Pessoa & Empregado;\n\nconst funcionario: Trabalhador = { nome: "Carlos", salario: 5000 };\nconsole.log(funcionario);\n\nTipagem condicional\ntype Resposta<T> = T extends string ? "Texto" : "Outro Tipo";\n\nconst resultado1: Resposta<string> = "Texto";\nconst resultado2: Resposta<number> = "Outro Tipo";\n\nTipos mapeados\ntype Usuario = {\nnome: string;\nidade: number;\n};\n\ntype UsuarioOpcional = {\n[K in keyof Usuario]?: Usuario[K];\n};\n\nconst usuarioParcial: UsuarioOpcional = { nome: "Ana" };\n	Os tipos avançados do TypeScript fornecem maior flexibilidade na definição de tipos.\n\n- Union Types (`string | number`) permitem que uma variável aceite múltiplos tipos.\n- Intersection Types (`Pessoa & Empregado`) combinam múltiplas interfaces, criando um novo tipo.\n- Tipos Condicionais (`T extends string ? "Texto" : "Outro Tipo"`) permitem definir tipos com base em regras.\n- Tipos Mapeados (`[K in keyof T]?`) transformam tipos existentes, criando versões mais flexíveis, como objetos opcionais.\n- Esses recursos são úteis para garantir segurança de tipos em cenários mais complexos, como API dinâmicas, bibliotecas e grandes aplicações empresariais.	2025-01-29 20:23:12.911	6744a758-a852-4dbd-bd79-c5f9242762e1	5d9f153f-110c-44de-a4c7-c7020debf158	2025-01-29 20:23:12.911
\.


--
-- TOC entry 4883 (class 0 OID 60332)
-- Dependencies: 221
-- Data for Name: Item; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."Item" (id, "itemId", title, "categoryId", "createdAt", "updatedAt") FROM stdin;
8c1a7056-20c4-4ca6-a234-c7499c604e17	ginintro	Introdução ao Gin	2b907748-004c-40ce-bdab-49311206e75a	2025-01-29 20:23:11.974	2025-01-29 20:23:11.974
ddaca54f-18ad-425b-926d-9c2aa00ab7b1	ginestrutura	Estrutura de Projeto	2b907748-004c-40ce-bdab-49311206e75a	2025-01-29 20:23:11.974	2025-01-29 20:23:11.974
d299dae0-b1b2-401d-ac8e-72dc9a9c76d3	ginrotas	Rotas e Parâmetros	2b907748-004c-40ce-bdab-49311206e75a	2025-01-29 20:23:11.974	2025-01-29 20:23:11.974
60ca2688-fcd3-455c-9960-48c7be93aeb9	ginmiddlewares	Middlewares no Gin	2b907748-004c-40ce-bdab-49311206e75a	2025-01-29 20:23:11.974	2025-01-29 20:23:11.974
83215e01-3e5f-4f48-92e3-4dee38caf05f	ginerro	Tratamento de Erros no Gin	2b907748-004c-40ce-bdab-49311206e75a	2025-01-29 20:23:11.974	2025-01-29 20:23:11.974
72af4c6b-d78f-4408-9254-dd1ecc3f41e9	gingruposrotas	Grupos de Rotas	2b907748-004c-40ce-bdab-49311206e75a	2025-01-29 20:23:11.974	2025-01-29 20:23:11.974
ee213bd2-0726-44c5-a4b7-569f7b7c2e4e	ginvaloresdinamicos	Valores Dinâmicos nas Rotas	2b907748-004c-40ce-bdab-49311206e75a	2025-01-29 20:23:11.974	2025-01-29 20:23:11.974
717a3e3a-ac6e-4c5e-9176-58c6daa37a63	ginvalidador	Validação de Requisição	2b907748-004c-40ce-bdab-49311206e75a	2025-01-29 20:23:11.974	2025-01-29 20:23:11.974
735f51dc-6d01-48e6-9a86-d1fe1ba28e03	ginresponse	Manipulação de Respostas	2b907748-004c-40ce-bdab-49311206e75a	2025-01-29 20:23:11.974	2025-01-29 20:23:11.974
24e471b8-52f7-4590-b953-6afb426239c2	ginpersistencia	Persistência de Dados	2b907748-004c-40ce-bdab-49311206e75a	2025-01-29 20:23:11.974	2025-01-29 20:23:11.974
3286c5d4-7e80-4426-a171-a7fd878f07bf	autenticacao	Autenticação e Autorização	2b907748-004c-40ce-bdab-49311206e75a	2025-01-29 20:23:11.974	2025-01-29 20:23:11.974
9e46d198-be36-49aa-b81e-3b668c06c353	logs	Logs e Monitoramento no Gin	2b907748-004c-40ce-bdab-49311206e75a	2025-01-29 20:23:11.974	2025-01-29 20:23:11.974
92fddc03-289e-4b0e-ba29-44e7bfdc4b22	pacotes	Tipos em Go	729d7d3e-dd05-4cce-9952-b4cd1690544e	2025-01-29 20:23:12.066	2025-01-29 20:23:12.066
e2b91939-f97e-4427-ab90-4e9d6ab74ac3	variaveis	Variáveis e Constantes	729d7d3e-dd05-4cce-9952-b4cd1690544e	2025-01-29 20:23:12.066	2025-01-29 20:23:12.066
4c17ccef-46aa-40a7-bb2c-eef9c8772232	tipos	Tipos de dados	729d7d3e-dd05-4cce-9952-b4cd1690544e	2025-01-29 20:23:12.066	2025-01-29 20:23:12.066
00d6d39c-d43e-44d2-92a5-63361d30f1fc	funcoes	Funções em Go	729d7d3e-dd05-4cce-9952-b4cd1690544e	2025-01-29 20:23:12.066	2025-01-29 20:23:12.066
d4eb34bf-0911-4326-8880-811fa3de9215	operadores	Operadores	729d7d3e-dd05-4cce-9952-b4cd1690544e	2025-01-29 20:23:12.066	2025-01-29 20:23:12.066
4a0b3f88-c0c8-44c0-a63f-9ac2b303be05	structs	Structs em Go	729d7d3e-dd05-4cce-9952-b4cd1690544e	2025-01-29 20:23:12.066	2025-01-29 20:23:12.066
1c917ce4-50e3-40f3-8773-93b946cebb47	arrays	Arrays e Slices	729d7d3e-dd05-4cce-9952-b4cd1690544e	2025-01-29 20:23:12.066	2025-01-29 20:23:12.066
78ea8104-bd70-4d0a-98db-26bd32f3f39e	ponteiros	Ponteiros	729d7d3e-dd05-4cce-9952-b4cd1690544e	2025-01-29 20:23:12.066	2025-01-29 20:23:12.066
c4c4bc5a-378c-4951-ab7d-ccfb88ea0f68	maps	Maps	729d7d3e-dd05-4cce-9952-b4cd1690544e	2025-01-29 20:23:12.066	2025-01-29 20:23:12.066
c222c3e7-63f2-4901-a0dd-ae6f330326b4	estruturascontrole	Condicionais e Loops	729d7d3e-dd05-4cce-9952-b4cd1690544e	2025-01-29 20:23:12.066	2025-01-29 20:23:12.066
efc5f103-162b-4d5e-9be3-f9164c9f2a4e	metodos	Métodos	729d7d3e-dd05-4cce-9952-b4cd1690544e	2025-01-29 20:23:12.066	2025-01-29 20:23:12.066
21260613-2c0f-461e-acad-e6e351452539	interfaces	Interfaces	729d7d3e-dd05-4cce-9952-b4cd1690544e	2025-01-29 20:23:12.066	2025-01-29 20:23:12.066
606baf70-7188-45d6-addd-9adb6a377e54	retornonomeado	Funções retorno nomeado	9d58d442-26f6-44f5-bea9-1b05309c44ca	2025-01-29 20:23:12.101	2025-01-29 20:23:12.101
d69c8f3c-136a-4127-89a9-d1780922ed98	funcoesvariaticas	Funções variáticas	9d58d442-26f6-44f5-bea9-1b05309c44ca	2025-01-29 20:23:12.101	2025-01-29 20:23:12.101
6addd68d-b4ca-4991-8b30-24f2d3c384bf	funcoesanonimas	Funções anônimas	9d58d442-26f6-44f5-bea9-1b05309c44ca	2025-01-29 20:23:12.101	2025-01-29 20:23:12.101
8b845cde-88ac-4b75-b622-7bcbafd40c54	funcoesrecursivas	Funções recursivas	9d58d442-26f6-44f5-bea9-1b05309c44ca	2025-01-29 20:23:12.101	2025-01-29 20:23:12.101
b8e3e068-f509-455a-9fa8-1117eb2eb06b	defer	Defer	9d58d442-26f6-44f5-bea9-1b05309c44ca	2025-01-29 20:23:12.101	2025-01-29 20:23:12.101
157b3390-e399-4270-bda8-29d9f22fc33b	panic-recover	Panic-Recover	9d58d442-26f6-44f5-bea9-1b05309c44ca	2025-01-29 20:23:12.101	2025-01-29 20:23:12.101
ea515541-8d30-42c3-87d1-f0292c895ffe	closure	Closure	9d58d442-26f6-44f5-bea9-1b05309c44ca	2025-01-29 20:23:12.101	2025-01-29 20:23:12.101
616d0d68-2195-4d91-a165-a76c033089a8	init	Init	9d58d442-26f6-44f5-bea9-1b05309c44ca	2025-01-29 20:23:12.101	2025-01-29 20:23:12.101
e9125c33-1109-4386-b301-f40118069650	formas	Formas	8a253f60-3123-4568-b595-1a472a6dddc6	2025-01-29 20:23:12.122	2025-01-29 20:23:12.122
501bc229-deb4-48bb-8710-b16348dd3f5d	tipogenerico	Tipo generico	8a253f60-3123-4568-b595-1a472a6dddc6	2025-01-29 20:23:12.122	2025-01-29 20:23:12.122
a8a424e4-9f7d-4663-8df6-409f3c624db5	goroutines	Go routines	cc317892-62e9-4dd2-bdce-72adb2b0c7ce	2025-01-29 20:23:12.13	2025-01-29 20:23:12.13
1d3e1a06-5fcc-4518-9969-9bd3ecd55b3e	waitgroup	Waitgroup	cc317892-62e9-4dd2-bdce-72adb2b0c7ce	2025-01-29 20:23:12.13	2025-01-29 20:23:12.13
e9550a71-7130-4965-a749-77ed489e996d	canais	Canais	cc317892-62e9-4dd2-bdce-72adb2b0c7ce	2025-01-29 20:23:12.13	2025-01-29 20:23:12.13
337d1402-20d3-4bed-b56a-26b4340880a9	canais-com-buffer	Canais com buffer	cc317892-62e9-4dd2-bdce-72adb2b0c7ce	2025-01-29 20:23:12.13	2025-01-29 20:23:12.13
aa53d87f-070c-48a7-a5e5-9103362ec1e0	select	Select	cc317892-62e9-4dd2-bdce-72adb2b0c7ce	2025-01-29 20:23:12.13	2025-01-29 20:23:12.13
1291ab5e-9e4a-4c66-983f-750a051194f0	worker-pools	Worker pools	0efcf7a7-ec70-48af-b19e-f8c2caa40d46	2025-01-29 20:23:12.141	2025-01-29 20:23:12.141
cc534a65-71d4-4fef-8104-abd9291b532e	generator	Generator	0efcf7a7-ec70-48af-b19e-f8c2caa40d46	2025-01-29 20:23:12.141	2025-01-29 20:23:12.141
0e946266-26da-45d9-a410-9656334e6658	multiplexador	Multiplexador	0efcf7a7-ec70-48af-b19e-f8c2caa40d46	2025-01-29 20:23:12.141	2025-01-29 20:23:12.141
464dd251-8e83-4477-bebb-f356c5801cc1	fmt	fmt	bc4d72c6-616e-493e-9b60-77aee24f0b9b	2025-01-29 20:23:12.147	2025-01-29 20:23:12.147
76b2b979-718e-4e9b-be27-6f5750c27ba9	string	string	bc4d72c6-616e-493e-9b60-77aee24f0b9b	2025-01-29 20:23:12.147	2025-01-29 20:23:12.147
8967d610-bbdd-4249-8a32-fd830af5f787	int	int	bc4d72c6-616e-493e-9b60-77aee24f0b9b	2025-01-29 20:23:12.147	2025-01-29 20:23:12.147
833aa709-3a1d-4cbc-95da-fa9dc70205ed	time	time	bc4d72c6-616e-493e-9b60-77aee24f0b9b	2025-01-29 20:23:12.147	2025-01-29 20:23:12.147
0b9e1fe6-d0a7-4fb3-b1bc-ca7bbc267109	os	os	bc4d72c6-616e-493e-9b60-77aee24f0b9b	2025-01-29 20:23:12.147	2025-01-29 20:23:12.147
e07035a2-bc51-4a64-b5f2-f1c2a26087f3	net-http	net/http	bc4d72c6-616e-493e-9b60-77aee24f0b9b	2025-01-29 20:23:12.147	2025-01-29 20:23:12.147
fe72b9b3-d9aa-404a-99e7-5dfa992ccb3b	verbos	Verbos de Formatação	ea81524d-59a5-4b17-90c5-b9486d604359	2025-01-29 20:23:12.218	2025-01-29 20:23:12.218
35ccfeba-2cb3-457a-bcdf-4ef79eed4607	testeunitario	Testes Unitários	69c271b4-c0ff-4322-ac9c-48e21473db2b	2025-01-29 20:23:12.228	2025-01-29 20:23:12.228
9110fb44-beeb-4c57-9f89-b0fffc4a5564	testebenchmark	Benchmarks	69c271b4-c0ff-4322-ac9c-48e21473db2b	2025-01-29 20:23:12.228	2025-01-29 20:23:12.228
bb8e3a18-92cc-4399-bade-458da0578976	testecobertura	Cobertura de Testes	69c271b4-c0ff-4322-ac9c-48e21473db2b	2025-01-29 20:23:12.228	2025-01-29 20:23:12.228
60976bed-39aa-424d-ac42-8aade2914484	testemock	Mocks e Stubs	69c271b4-c0ff-4322-ac9c-48e21473db2b	2025-01-29 20:23:12.228	2025-01-29 20:23:12.228
d90a3462-ded8-4aee-a033-8dfcc704ab8f	debugging	Debugging	69c271b4-c0ff-4322-ac9c-48e21473db2b	2025-01-29 20:23:12.228	2025-01-29 20:23:12.228
8c7d8063-3953-4c7f-bc9c-9322ac092fbd	jwt	JWT em Go	1bec2612-27b3-4cb7-85b7-99fe26a680fa	2025-01-29 20:23:12.248	2025-01-29 20:23:12.248
d34e66e7-4032-4f32-bb13-f4a29c09ebda	hash	Hash e Criptografia	1bec2612-27b3-4cb7-85b7-99fe26a680fa	2025-01-29 20:23:12.248	2025-01-29 20:23:12.248
33942eb6-204e-4306-ac22-af7ed7eacd68	middleware	Middleware de Autenticação	1bec2612-27b3-4cb7-85b7-99fe26a680fa	2025-01-29 20:23:12.248	2025-01-29 20:23:12.248
f348c48b-8307-4275-bf70-5ed520dccf94	oauth	OAuth2	1bec2612-27b3-4cb7-85b7-99fe26a680fa	2025-01-29 20:23:12.248	2025-01-29 20:23:12.248
df0c4d2e-5f28-4a31-ac2e-359c708345ab	cors	CORS em Go	1bec2612-27b3-4cb7-85b7-99fe26a680fa	2025-01-29 20:23:12.248	2025-01-29 20:23:12.248
290a7b0c-8cb3-417d-a500-1b3630752476	tipos	Tipos de Dados	985355c0-38e6-48cb-bf5d-352fbff3ed39	2025-01-29 20:23:12.282	2025-01-29 20:23:12.282
8118e5af-91a8-4e6a-9a02-1f9831254126	variaveis	Variáveis e Escopo	985355c0-38e6-48cb-bf5d-352fbff3ed39	2025-01-29 20:23:12.282	2025-01-29 20:23:12.282
1159ff9e-0164-4c62-8583-2cd1c8d23265	operadores	Operadores	985355c0-38e6-48cb-bf5d-352fbff3ed39	2025-01-29 20:23:12.282	2025-01-29 20:23:12.282
b1d6433e-3e6d-44b0-bf1f-cd8121124955	comentarios	Comentários e Boas Práticas	985355c0-38e6-48cb-bf5d-352fbff3ed39	2025-01-29 20:23:12.282	2025-01-29 20:23:12.282
a98180e1-fff9-4db6-b2b8-a433885f82fa	arrays	Arrays e Métodos	dde8a355-91f4-4c11-8c4b-4720f5089587	2025-01-29 20:23:12.299	2025-01-29 20:23:12.299
7f0b8502-0038-444b-9553-5e98387b9a25	objetos	Objetos e Propriedades	dde8a355-91f4-4c11-8c4b-4720f5089587	2025-01-29 20:23:12.299	2025-01-29 20:23:12.299
619ded41-bf96-4267-865e-f6951a65b343	strings	Strings e Métodos	dde8a355-91f4-4c11-8c4b-4720f5089587	2025-01-29 20:23:12.299	2025-01-29 20:23:12.299
a0c8cc3b-74ad-4cb7-9454-7b217c05f4fd	condicionais	Condicionais (if/else, switch)	b373f332-b748-4f4d-8c76-61a66b645109	2025-01-29 20:23:12.311	2025-01-29 20:23:12.311
dcba32fa-5076-4253-959d-3e5b9142844e	loops	Loops (for, while, forEach)	b373f332-b748-4f4d-8c76-61a66b645109	2025-01-29 20:23:12.311	2025-01-29 20:23:12.311
0b8987f6-171f-4caf-a3c3-1ecfc468ba48	exceptions	Tratamento de Erros 	b373f332-b748-4f4d-8c76-61a66b645109	2025-01-29 20:23:12.311	2025-01-29 20:23:12.311
1ec601a3-0a2a-42cc-883d-123d756f9266	asyncAwait	Async/Await	b373f332-b748-4f4d-8c76-61a66b645109	2025-01-29 20:23:12.311	2025-01-29 20:23:12.311
34b5fb0c-79f9-4ba3-b071-ac90483f5071	funcoesBasicas	Declaração de Funções	27f775bf-f7eb-41c7-884d-414df443e442	2025-01-29 20:23:12.323	2025-01-29 20:23:12.323
30f9f537-67dd-44bb-8b61-22102e45760f	funcoesArrow	Arrow Functions	27f775bf-f7eb-41c7-884d-414df443e442	2025-01-29 20:23:12.323	2025-01-29 20:23:12.323
7b3ecc68-8ea2-4d61-b746-727c2a2d13bc	funcoesRecursivas	Funções Recursivas	27f775bf-f7eb-41c7-884d-414df443e442	2025-01-29 20:23:12.323	2025-01-29 20:23:12.323
d649baef-be20-4cf9-94bf-dcdacd28cd7b	funcoesAnonimas	Funções Anônimas	27f775bf-f7eb-41c7-884d-414df443e442	2025-01-29 20:23:12.323	2025-01-29 20:23:12.323
15bece6a-b53c-4a72-82fc-13380075cc73	callbacks	Callbackse e Promises	27f775bf-f7eb-41c7-884d-414df443e442	2025-01-29 20:23:12.323	2025-01-29 20:23:12.323
18a60ad0-fd43-41fc-9ff2-f2a936e798b7	closures	Closures e Contexto Léxico	27f775bf-f7eb-41c7-884d-414df443e442	2025-01-29 20:23:12.323	2025-01-29 20:23:12.323
1f76ee87-60cf-42d5-829d-f77a410835ea	bindCallApply	Bind, Call e Apply	27f775bf-f7eb-41c7-884d-414df443e442	2025-01-29 20:23:12.323	2025-01-29 20:23:12.323
3709480f-fbc3-49ba-b1a0-d74cbc447687	hoisting	Hoisting	43d9977d-d96b-485f-9879-141616b915d6	2025-01-29 20:23:12.341	2025-01-29 20:23:12.341
a8a6f331-fd65-46e3-a679-fabc2620683c	eventLoop	Event Loop e Assíncrono	43d9977d-d96b-485f-9879-141616b915d6	2025-01-29 20:23:12.341	2025-01-29 20:23:12.341
974e4c3c-4056-4904-b51a-ef8fe6c5e801	prototypeHeranca	Prototype e Herança	43d9977d-d96b-485f-9879-141616b915d6	2025-01-29 20:23:12.341	2025-01-29 20:23:12.341
65791507-ff32-426c-902b-c7ddaeecf2d3	iteradoresGenerators	Iteradores e Generators	43d9977d-d96b-485f-9879-141616b915d6	2025-01-29 20:23:12.341	2025-01-29 20:23:12.341
c447188a-b75d-4c88-8a53-3b55287b5070	promisesAvancadas	Promises Avançadas	43d9977d-d96b-485f-9879-141616b915d6	2025-01-29 20:23:12.341	2025-01-29 20:23:12.341
c5bd59e1-4641-458a-b246-9d13dab5b815	domIntro	Introdução ao DOM	72a50319-ecff-481a-ad13-be053dc55ca0	2025-01-29 20:23:12.358	2025-01-29 20:23:12.358
e0b58ecc-fdc5-46a2-ab2d-b05cdb466983	domSelectors	Seletores DOM	72a50319-ecff-481a-ad13-be053dc55ca0	2025-01-29 20:23:12.358	2025-01-29 20:23:12.358
52cb2f82-790a-45bd-9816-fe7a81bf505d	eventListeners	Manipulação de Eventos	72a50319-ecff-481a-ad13-be053dc55ca0	2025-01-29 20:23:12.358	2025-01-29 20:23:12.358
8d975bc6-0ba6-47d4-86d7-d9fc95d11c77	criacaoElementos	Manipulação de Elementos	72a50319-ecff-481a-ad13-be053dc55ca0	2025-01-29 20:23:12.358	2025-01-29 20:23:12.358
9cafdf73-a105-4d48-83d5-28dfb2a037f5	classesDom	Classes e Estilização	72a50319-ecff-481a-ad13-be053dc55ca0	2025-01-29 20:23:12.358	2025-01-29 20:23:12.358
b13da36c-4f49-411d-ba10-bba1c2d315d1	nestjsintro	Introdução ao NestJS	7980a9dd-0fde-4c32-a43a-1aaa2521c299	2025-01-29 20:23:12.395	2025-01-29 20:23:12.395
b99de24a-65d0-4a1c-b35d-c5d33c768d13	nestjsestrutura	Estrutura de Projeto	7980a9dd-0fde-4c32-a43a-1aaa2521c299	2025-01-29 20:23:12.395	2025-01-29 20:23:12.395
53f968bb-c0e0-4656-8db1-c528a766f5a4	nestjsmodulos	Módulos no NestJS	7980a9dd-0fde-4c32-a43a-1aaa2521c299	2025-01-29 20:23:12.395	2025-01-29 20:23:12.395
b56831ce-a3dc-4be4-a219-6b1e8c941282	nestjsrotas	Rotas e Controladores	7980a9dd-0fde-4c32-a43a-1aaa2521c299	2025-01-29 20:23:12.395	2025-01-29 20:23:12.395
fcc9927a-773a-4241-ba77-b0bec12a40a3	nestjsparametros	Parâmetros de Rota	7980a9dd-0fde-4c32-a43a-1aaa2521c299	2025-01-29 20:23:12.395	2025-01-29 20:23:12.395
6fa25aa7-99ee-42a9-b254-2c37177adf55	nestjsrespostas	Resposta de Requisição	7980a9dd-0fde-4c32-a43a-1aaa2521c299	2025-01-29 20:23:12.395	2025-01-29 20:23:12.395
025ee422-3233-4f93-9281-1dedebd0c3fb	nestjsservicos	Serviços no NestJS	7980a9dd-0fde-4c32-a43a-1aaa2521c299	2025-01-29 20:23:12.395	2025-01-29 20:23:12.395
f27d68d5-960f-4d49-be81-9ed5f69df045	nestjsinjecao	Injeção de Dependências	7980a9dd-0fde-4c32-a43a-1aaa2521c299	2025-01-29 20:23:12.395	2025-01-29 20:23:12.395
158e6070-8b0b-470f-9781-24d1a969c4e8	nestjsmiddlewares	Middlewares no NestJS	7980a9dd-0fde-4c32-a43a-1aaa2521c299	2025-01-29 20:23:12.395	2025-01-29 20:23:12.395
9b894b00-ea43-4e4b-bbcd-284878fb5993	nestjspipes	Pipes e Validação	7980a9dd-0fde-4c32-a43a-1aaa2521c299	2025-01-29 20:23:12.395	2025-01-29 20:23:12.395
ff4b3c8f-e287-42dd-b372-d76d5da5ff41	nestjsguards	Guards e Segurança	7980a9dd-0fde-4c32-a43a-1aaa2521c299	2025-01-29 20:23:12.395	2025-01-29 20:23:12.395
f1caaa0d-ed64-460c-b4ed-ffba65a17742	nestjsinterceptors	Interceptors no NestJS	7980a9dd-0fde-4c32-a43a-1aaa2521c299	2025-01-29 20:23:12.395	2025-01-29 20:23:12.395
e800445e-326e-41ba-95c8-4286a03823e3	modulosNode	Módulos e require/import	473c968d-09ee-481b-9e74-feaa3ff50ab3	2025-01-29 20:23:12.446	2025-01-29 20:23:12.446
97ae8670-0a18-4068-82ee-b02adefd4acb	npm	NPM e Pacotes	473c968d-09ee-481b-9e74-feaa3ff50ab3	2025-01-29 20:23:12.446	2025-01-29 20:23:12.446
2db6ecc8-6150-477f-bf96-6e76dc323fb3	processEnv	Variáveis de Ambiente	473c968d-09ee-481b-9e74-feaa3ff50ab3	2025-01-29 20:23:12.446	2025-01-29 20:23:12.446
8d2be5d9-a295-460e-b3fa-a74009c45cb4	global	Objeto Global	473c968d-09ee-481b-9e74-feaa3ff50ab3	2025-01-29 20:23:12.446	2025-01-29 20:23:12.446
3c6590b5-981a-4493-835b-2fe611c64b1f	buffer	Buffer e Streams	473c968d-09ee-481b-9e74-feaa3ff50ab3	2025-01-29 20:23:12.446	2025-01-29 20:23:12.446
5f6bfa1d-f657-4468-9d38-327d1e60dc27	fsSync	Operações Síncronas	5a23f72e-d88f-46c0-a9a2-a642168fcebd	2025-01-29 20:23:12.461	2025-01-29 20:23:12.461
95043387-20e3-434e-bc1d-1e61f8138edb	fsAsync	Operações Assíncronas	5a23f72e-d88f-46c0-a9a2-a642168fcebd	2025-01-29 20:23:12.461	2025-01-29 20:23:12.461
57e4426c-4ad5-4dcd-b7bf-c83db3140d4a	path	Manipulação path	5a23f72e-d88f-46c0-a9a2-a642168fcebd	2025-01-29 20:23:12.461	2025-01-29 20:23:12.461
873f3409-8eb6-4311-9f8f-f3175ac8b46e	streams	Streams de Arquivos	5a23f72e-d88f-46c0-a9a2-a642168fcebd	2025-01-29 20:23:12.461	2025-01-29 20:23:12.461
6baa01f3-aae0-4967-b81c-9f0f4b5abcb0	watchFiles	Monitoramento de Arquivos	5a23f72e-d88f-46c0-a9a2-a642168fcebd	2025-01-29 20:23:12.461	2025-01-29 20:23:12.461
09c12438-d9bc-44cf-868d-c3b3101f095e	http	Servidor HTTP Básico	d6466515-66f2-40ed-8d4d-7caedbef4bfe	2025-01-29 20:23:12.474	2025-01-29 20:23:12.474
0c93f381-e420-4d7d-9927-f55e5d195254	express	Express.js Framework	d6466515-66f2-40ed-8d4d-7caedbef4bfe	2025-01-29 20:23:12.474	2025-01-29 20:23:12.474
a858f6d0-61bd-45fe-a7ed-84c21ad14c45	middleware	Middlewares	d6466515-66f2-40ed-8d4d-7caedbef4bfe	2025-01-29 20:23:12.474	2025-01-29 20:23:12.474
c6a9efb4-5fc7-40c7-9029-0268c9351f29	rotas	Roteamento	d6466515-66f2-40ed-8d4d-7caedbef4bfe	2025-01-29 20:23:12.474	2025-01-29 20:23:12.474
efbe96b8-eb02-4c80-ba23-51bfadb5df9e	staticFiles	Arquivos Estáticos	d6466515-66f2-40ed-8d4d-7caedbef4bfe	2025-01-29 20:23:12.474	2025-01-29 20:23:12.474
a47e2d50-a7e5-4155-adb4-737cab2928e9	templating	Template Engines	d6466515-66f2-40ed-8d4d-7caedbef4bfe	2025-01-29 20:23:12.474	2025-01-29 20:23:12.474
bc85963d-2dc6-437c-9601-61c1a9bb6881	postgre	PostgreSQL	cf5a26bc-3e69-4fe0-8bd7-d2d039a2f264	2025-01-29 20:23:12.491	2025-01-29 20:23:12.491
8b22af1b-9230-4ade-9aab-e776b13ff002	mongodb	MongoDB com Mongoose	cf5a26bc-3e69-4fe0-8bd7-d2d039a2f264	2025-01-29 20:23:12.491	2025-01-29 20:23:12.491
c0a13c8b-1c80-4405-a095-bb1de8dd28ad	sql	SQL com Sequelize	cf5a26bc-3e69-4fe0-8bd7-d2d039a2f264	2025-01-29 20:23:12.491	2025-01-29 20:23:12.491
a8563619-eda0-4ffb-bbec-4b6ae131eff6	redis	Cache com Redis	cf5a26bc-3e69-4fe0-8bd7-d2d039a2f264	2025-01-29 20:23:12.491	2025-01-29 20:23:12.491
1e338bae-2916-499c-ae63-ac07eb990b79	migrations	Migrations e Seeds	cf5a26bc-3e69-4fe0-8bd7-d2d039a2f264	2025-01-29 20:23:12.491	2025-01-29 20:23:12.491
be65eda0-268a-44eb-b81b-bb91268f5281	jwt	JWT (JSON Web Tokens)	a1207780-d3c1-47c9-815f-46535abeeb40	2025-01-29 20:23:12.508	2025-01-29 20:23:12.508
bdf95b4c-fadd-4831-bdb2-e584c074f095	bcrypt	Hashing de Senhas	a1207780-d3c1-47c9-815f-46535abeeb40	2025-01-29 20:23:12.508	2025-01-29 20:23:12.508
3ccd446a-692f-4391-9f41-e53921636a5e	cors	CORS	a1207780-d3c1-47c9-815f-46535abeeb40	2025-01-29 20:23:12.508	2025-01-29 20:23:12.508
99ecf636-8ae5-4f7b-95f1-f149599e4813	helmet	Helmet e Headers	a1207780-d3c1-47c9-815f-46535abeeb40	2025-01-29 20:23:12.508	2025-01-29 20:23:12.508
6f8d148f-8ce7-4788-a934-0b3291a408ab	validation	Validação de Dados	a1207780-d3c1-47c9-815f-46535abeeb40	2025-01-29 20:23:12.508	2025-01-29 20:23:12.508
f490822f-fce7-49ab-9270-776df5a905fe	jest	Testes com Jest	f539eb98-01e9-415c-9994-2607b837bcca	2025-01-29 20:23:12.529	2025-01-29 20:23:12.529
4ff4b639-5cf9-44af-9489-e9467b223a28	supertest	Testes de API	f539eb98-01e9-415c-9994-2607b837bcca	2025-01-29 20:23:12.529	2025-01-29 20:23:12.529
06d29db9-1137-4460-86a3-af9615458481	debug	Debugging	f539eb98-01e9-415c-9994-2607b837bcca	2025-01-29 20:23:12.529	2025-01-29 20:23:12.529
ab3df249-6150-4b72-88b6-cd5b771b62cc	logging	Logging com Winston	f539eb98-01e9-415c-9994-2607b837bcca	2025-01-29 20:23:12.529	2025-01-29 20:23:12.529
8a81f6cb-f1cb-4d97-b35a-04601381d8dc	cluster	Cluster e PM2	d6483356-26bf-4fb0-be73-037430941d88	2025-01-29 20:23:12.542	2025-01-29 20:23:12.542
dc91d3c3-264e-4ab8-bfc2-a90827d988fd	docker	Containerização com Docker	d6483356-26bf-4fb0-be73-037430941d88	2025-01-29 20:23:12.542	2025-01-29 20:23:12.542
ce3a14c6-f1e5-4441-a730-1d112d8ffca3	cache	Estratégias de Cache	d6483356-26bf-4fb0-be73-037430941d88	2025-01-29 20:23:12.542	2025-01-29 20:23:12.542
4243b64e-b6c1-469e-9313-50aa68ca0771	cicd	CI/CD	d6483356-26bf-4fb0-be73-037430941d88	2025-01-29 20:23:12.542	2025-01-29 20:23:12.542
a50c16ae-628a-4c77-beca-4002025e078d	monitoring	Monitoramento	d6483356-26bf-4fb0-be73-037430941d88	2025-01-29 20:23:12.542	2025-01-29 20:23:12.542
b7021958-084f-425f-bcf4-ba3a29304a1c	events	Event Emitter	02907da2-685c-419c-87f5-e3764ca13a93	2025-01-29 20:23:12.582	2025-01-29 20:23:12.582
d262a5e0-79c2-41f0-9556-7b2e51efcbfe	workers	Worker Threads	02907da2-685c-419c-87f5-e3764ca13a93	2025-01-29 20:23:12.582	2025-01-29 20:23:12.582
b2cde2dd-800b-4f38-8880-efebdb0055dc	websockets	WebSockets	02907da2-685c-419c-87f5-e3764ca13a93	2025-01-29 20:23:12.582	2025-01-29 20:23:12.582
3db3cd8a-0624-426a-b2a3-a58393e48910	graphql	GraphQL	02907da2-685c-419c-87f5-e3764ca13a93	2025-01-29 20:23:12.582	2025-01-29 20:23:12.582
2a18ceed-f849-4b6a-a43d-195eb502e6a0	microservices	Microserviços	02907da2-685c-419c-87f5-e3764ca13a93	2025-01-29 20:23:12.582	2025-01-29 20:23:12.582
9e3eff48-edfa-4048-b29d-9e1fb6ddc9dd	selectBasico	SELECT Básico	90ee8835-e4f8-4c08-9ecd-e1fb9d96014c	2025-01-29 20:23:12.62	2025-01-29 20:23:12.62
44cce5c1-62d9-494b-8b56-4e8768be553a	where	Filtros com WHERE	90ee8835-e4f8-4c08-9ecd-e1fb9d96014c	2025-01-29 20:23:12.62	2025-01-29 20:23:12.62
83d3f1fb-f3a9-4055-a68c-dfe52b89fc6c	orderBy	Ordenação (ORDER BY)	90ee8835-e4f8-4c08-9ecd-e1fb9d96014c	2025-01-29 20:23:12.62	2025-01-29 20:23:12.62
796cd0ee-5ddc-40d4-8f07-5c171dc7396b	groupBy	Agrupamento (GROUP BY)	90ee8835-e4f8-4c08-9ecd-e1fb9d96014c	2025-01-29 20:23:12.62	2025-01-29 20:23:12.62
f8e386d7-84fd-4774-91b5-f70af74c42c7	having	Filtros de Grupo (HAVING)	90ee8835-e4f8-4c08-9ecd-e1fb9d96014c	2025-01-29 20:23:12.62	2025-01-29 20:23:12.62
c326f5d1-db33-4d7f-b86a-ef4971375a15	distinct	Valores Únicos (DISTINCT)	90ee8835-e4f8-4c08-9ecd-e1fb9d96014c	2025-01-29 20:23:12.62	2025-01-29 20:23:12.62
08e662e7-0dac-4750-9b74-dbcbaa45f35b	insert	Inserção (INSERT)	3d78ca41-dd83-425f-82b2-0d6e00ce13e5	2025-01-29 20:23:12.641	2025-01-29 20:23:12.641
d7638852-44fb-47c2-a97a-d1c9ae13a38b	update	Atualização (UPDATE)	3d78ca41-dd83-425f-82b2-0d6e00ce13e5	2025-01-29 20:23:12.641	2025-01-29 20:23:12.641
dbd4aebc-45f4-4e07-a23c-934407e4f82e	delete	Exclusão (DELETE)	3d78ca41-dd83-425f-82b2-0d6e00ce13e5	2025-01-29 20:23:12.641	2025-01-29 20:23:12.641
7ba3f181-de06-4823-a84a-b2a54c0faa76	merge	Merge de Dados (MERGE)	3d78ca41-dd83-425f-82b2-0d6e00ce13e5	2025-01-29 20:23:12.641	2025-01-29 20:23:12.641
afe7acf3-6860-4f3b-b1cc-8f1da1cec362	truncate	Limpar Tabela (TRUNCATE)	3d78ca41-dd83-425f-82b2-0d6e00ce13e5	2025-01-29 20:23:12.641	2025-01-29 20:23:12.641
2ca7497e-66ec-48ce-a531-4432e7e388ec	innerJoin	INNER JOIN	9be82da1-db96-4e19-b796-cb938935c4c0	2025-01-29 20:23:12.658	2025-01-29 20:23:12.658
7d4044e5-a35b-4345-862d-08f25b615764	leftJoin	LEFT JOIN	9be82da1-db96-4e19-b796-cb938935c4c0	2025-01-29 20:23:12.658	2025-01-29 20:23:12.658
b95ed5aa-eec9-4a55-9920-4dcdd1dc2707	rightJoin	RIGHT JOIN	9be82da1-db96-4e19-b796-cb938935c4c0	2025-01-29 20:23:12.658	2025-01-29 20:23:12.658
8af89e92-9840-49d8-875a-500d91ebe26f	fullJoin	FULL JOIN	9be82da1-db96-4e19-b796-cb938935c4c0	2025-01-29 20:23:12.658	2025-01-29 20:23:12.658
a7d71c38-12e8-4347-b480-bde533723f6e	selfJoin	SELF JOIN	9be82da1-db96-4e19-b796-cb938935c4c0	2025-01-29 20:23:12.658	2025-01-29 20:23:12.658
28a5df67-c0dd-4441-8e28-f099d9c0526d	agregacao	Funções de Agregação	db0cfed1-1d89-47c3-83ae-6548ae49501e	2025-01-29 20:23:12.678	2025-01-29 20:23:12.678
9ff5af17-adcf-47b3-9baa-8d0d236fb9d1	string	Funções de String	db0cfed1-1d89-47c3-83ae-6548ae49501e	2025-01-29 20:23:12.678	2025-01-29 20:23:12.678
63263686-8b7c-4e87-b5c9-75605adbef3d	data	Funções de Data	db0cfed1-1d89-47c3-83ae-6548ae49501e	2025-01-29 20:23:12.678	2025-01-29 20:23:12.678
40371d54-bbfa-4910-8c3d-c40fca5efb42	numericas	Funções Numéricas	db0cfed1-1d89-47c3-83ae-6548ae49501e	2025-01-29 20:23:12.678	2025-01-29 20:23:12.678
d417f33c-7e02-4fed-bc2c-a4c2641b3acf	condicional	Funções Condicionais	db0cfed1-1d89-47c3-83ae-6548ae49501e	2025-01-29 20:23:12.678	2025-01-29 20:23:12.678
116dea62-456f-4bf3-9d02-c412eb19dcaa	subqueries	Subqueries	79f83f5c-2663-4cdd-9866-694e742ebbea	2025-01-29 20:23:12.699	2025-01-29 20:23:12.699
33b2bc3f-0007-44aa-bc00-cd212702e669	views	Views	79f83f5c-2663-4cdd-9866-694e742ebbea	2025-01-29 20:23:12.699	2025-01-29 20:23:12.699
41c6e9ec-e74f-46a3-bbfd-952ff912870a	cte	Common Table Expressions	79f83f5c-2663-4cdd-9866-694e742ebbea	2025-01-29 20:23:12.699	2025-01-29 20:23:12.699
b9b878a9-44cd-4196-ac0d-94513d7be599	tempTables	Tabelas Temporárias	79f83f5c-2663-4cdd-9866-694e742ebbea	2025-01-29 20:23:12.699	2025-01-29 20:23:12.699
a2dd8c92-95e1-49cc-bf95-9a7e4ff809c3	createTable	CREATE TABLE	b9ee5e18-6237-435e-911b-5e16df7290bb	2025-01-29 20:23:12.715	2025-01-29 20:23:12.715
9d92f2da-158b-4570-996e-995c4e2d812b	alterTable	ALTER TABLE	b9ee5e18-6237-435e-911b-5e16df7290bb	2025-01-29 20:23:12.715	2025-01-29 20:23:12.715
53f030d9-a3dd-4bd6-a59c-a7eed25f5708	constraints	Constraints	b9ee5e18-6237-435e-911b-5e16df7290bb	2025-01-29 20:23:12.715	2025-01-29 20:23:12.715
bff96aaa-907a-4409-9ae5-4e8e5bc6b7f9	indexes	Índices	b9ee5e18-6237-435e-911b-5e16df7290bb	2025-01-29 20:23:12.715	2025-01-29 20:23:12.715
e2378a42-f008-4495-a367-feb1616dc610	sequences	Sequences	b9ee5e18-6237-435e-911b-5e16df7290bb	2025-01-29 20:23:12.715	2025-01-29 20:23:12.715
e23b42fc-45d8-46c9-a525-16fb65ac6f9f	transaction	Transações	8355ea41-adf1-42af-8c44-c57f9c3eb497	2025-01-29 20:23:12.735	2025-01-29 20:23:12.735
55a90d18-3fa1-4e60-a99e-da37af4e5066	commit	COMMIT e ROLLBACK	8355ea41-adf1-42af-8c44-c57f9c3eb497	2025-01-29 20:23:12.735	2025-01-29 20:23:12.735
338d2899-a50d-4752-a6ed-97d3dec86ab2	savepoint	SAVEPOINT	8355ea41-adf1-42af-8c44-c57f9c3eb497	2025-01-29 20:23:12.735	2025-01-29 20:23:12.735
b2d16466-5636-43fb-8032-1e72fa5de9b4	isolation	Níveis de Isolamento	8355ea41-adf1-42af-8c44-c57f9c3eb497	2025-01-29 20:23:12.735	2025-01-29 20:23:12.735
ae94349a-7249-4f44-a2bb-dfdd2942ac95	explain	EXPLAIN PLAN	75692a9e-4ffb-48c5-a27e-7712140d2a5c	2025-01-29 20:23:12.75	2025-01-29 20:23:12.75
d95d937c-8e2c-4f7c-a736-35f371bbcb9f	indexing	Estratégias de Indexação	75692a9e-4ffb-48c5-a27e-7712140d2a5c	2025-01-29 20:23:12.75	2025-01-29 20:23:12.75
47c4e380-717d-464e-afad-1d881075c8a7	partition	Particionamento	75692a9e-4ffb-48c5-a27e-7712140d2a5c	2025-01-29 20:23:12.75	2025-01-29 20:23:12.75
67b7a55f-ec11-4401-9c3e-ca5e72e6e2f1	optimization	Otimização de Queries	75692a9e-4ffb-48c5-a27e-7712140d2a5c	2025-01-29 20:23:12.75	2025-01-29 20:23:12.75
58c81dec-bdb1-4c36-a2a3-150b259d3e68	variaveis	Variáveis e Escopo	05183b42-0f10-4d92-91dd-80436e82f1a7	2025-01-29 20:23:12.782	2025-01-29 20:23:12.782
0718109b-56e7-49e3-93e8-124d79b3abce	tiposPrimitivos	Tipos Primitivos	05183b42-0f10-4d92-91dd-80436e82f1a7	2025-01-29 20:23:12.782	2025-01-29 20:23:12.782
ddf307af-5274-4b2e-a4e7-b41de1fb3a07	operadores	Operadores	05183b42-0f10-4d92-91dd-80436e82f1a7	2025-01-29 20:23:12.782	2025-01-29 20:23:12.782
da015f85-1129-44e5-a924-67879be74f43	tiposCompostos	Tipos Compostos	05183b42-0f10-4d92-91dd-80436e82f1a7	2025-01-29 20:23:12.782	2025-01-29 20:23:12.782
30350a92-ca83-43d9-a790-68c477d661dc	tiposCustomizados	Tipos Customizados	05183b42-0f10-4d92-91dd-80436e82f1a7	2025-01-29 20:23:12.782	2025-01-29 20:23:12.782
8b95de9d-a682-4f9a-b862-43e46be4dac7	enums	Enums	05183b42-0f10-4d92-91dd-80436e82f1a7	2025-01-29 20:23:12.782	2025-01-29 20:23:12.782
2f984c20-bf08-44e3-a2d8-4afa82bb7a7c	typeAssertions	Type Assertions	05183b42-0f10-4d92-91dd-80436e82f1a7	2025-01-29 20:23:12.782	2025-01-29 20:23:12.782
07c2696d-2a82-4e2c-9c19-4d647f4bb2d5	tiposLiterais	Tipos Literais	05183b42-0f10-4d92-91dd-80436e82f1a7	2025-01-29 20:23:12.782	2025-01-29 20:23:12.782
c8f484c0-8842-46ed-b0a8-b71f9b5664d0	tiposObjeto	Tipos de Objeto	05183b42-0f10-4d92-91dd-80436e82f1a7	2025-01-29 20:23:12.782	2025-01-29 20:23:12.782
439ec8bd-991e-4e69-8031-fbff5396f5d8	Interseção	Interseção e União de Tipos	05183b42-0f10-4d92-91dd-80436e82f1a7	2025-01-29 20:23:12.782	2025-01-29 20:23:12.782
92d0ac64-1a35-496c-865c-8fb7b42495e9	modificadoresAcesso	Modificadores de Acesso	05183b42-0f10-4d92-91dd-80436e82f1a7	2025-01-29 20:23:12.782	2025-01-29 20:23:12.782
f4646f73-3e87-46c9-b136-795c32ada04c	arrays	Arrays e Métodos	90c52de6-3130-4abd-abd0-1c857e1919b1	2025-01-29 20:23:12.817	2025-01-29 20:23:12.817
10294186-6492-4324-b037-893cd62636b9	objetos	Objetos e Métodos	90c52de6-3130-4abd-abd0-1c857e1919b1	2025-01-29 20:23:12.817	2025-01-29 20:23:12.817
f63798d4-03f5-4fcf-9812-2e1742bb39ec	strings	Strings e Métodos	90c52de6-3130-4abd-abd0-1c857e1919b1	2025-01-29 20:23:12.817	2025-01-29 20:23:12.817
8cd766e2-caa5-4289-a92f-0b91e085e760	mapSset	Map e Set	90c52de6-3130-4abd-abd0-1c857e1919b1	2025-01-29 20:23:12.817	2025-01-29 20:23:12.817
bd2b5e27-8fca-4338-92ba-931fd73221f5	generics	Introdução a Generics	90c52de6-3130-4abd-abd0-1c857e1919b1	2025-01-29 20:23:12.817	2025-01-29 20:23:12.817
bb8e7085-a62b-4257-831e-b223e3bb350f	estruturas	Estruturas Condicionais	7ed66c5e-7bcb-479f-90c8-77ead8921471	2025-01-29 20:23:12.837	2025-01-29 20:23:12.837
d46131b6-3857-4572-9e8d-3ed132bce81d	loops	Loops e Iterações	7ed66c5e-7bcb-479f-90c8-77ead8921471	2025-01-29 20:23:12.837	2025-01-29 20:23:12.837
4a0ec35a-04b5-4353-8505-d8c630c89cac	condicionais	Condicionais Type Guards	7ed66c5e-7bcb-479f-90c8-77ead8921471	2025-01-29 20:23:12.837	2025-01-29 20:23:12.837
75b6094c-7b96-4b04-9534-9578dd486935	funcoes-basicas	Funções Básicas	51269c62-94b5-49bf-ab06-59d6cb193781	2025-01-29 20:23:12.852	2025-01-29 20:23:12.852
af1fb4d2-e190-4187-9860-f78fc7777a9a	funcoes-arrow	Arrow Functions	51269c62-94b5-49bf-ab06-59d6cb193781	2025-01-29 20:23:12.852	2025-01-29 20:23:12.852
31529545-d274-47e7-add7-d623b5165aa1	funcoes-recursivas	Funções Recursivas	51269c62-94b5-49bf-ab06-59d6cb193781	2025-01-29 20:23:12.852	2025-01-29 20:23:12.852
4b6dbdfd-324d-4c01-8a5f-fd8e33b8e8cb	funcoes-anonimas	Funções Anônimas	51269c62-94b5-49bf-ab06-59d6cb193781	2025-01-29 20:23:12.852	2025-01-29 20:23:12.852
e0369850-a1e5-43f0-b382-77bb479efd73	callbacks	Callbacks e Promises	51269c62-94b5-49bf-ab06-59d6cb193781	2025-01-29 20:23:12.852	2025-01-29 20:23:12.852
7694d8bd-7681-4968-90be-3a95234b0d23	funcoesGenericas	Funções Genéricas	51269c62-94b5-49bf-ab06-59d6cb193781	2025-01-29 20:23:12.852	2025-01-29 20:23:12.852
50489f4e-9dac-4265-ac2b-5c388e645788	classes	Definição e Uso de Classes	cb537b68-517d-4488-8913-d07d8ceba4c5	2025-01-29 20:23:12.878	2025-01-29 20:23:12.878
8a8d606b-c2f7-4051-9811-e69566c93cf4	heranca	Herança e Sobrescrita	cb537b68-517d-4488-8913-d07d8ceba4c5	2025-01-29 20:23:12.878	2025-01-29 20:23:12.878
22807d73-72da-4f49-9e6e-f8667bce7966	interfaces	Interfaces e Implementação	cb537b68-517d-4488-8913-d07d8ceba4c5	2025-01-29 20:23:12.878	2025-01-29 20:23:12.878
011fbfa7-6121-4428-9c37-d7f37946bd70	abstracao	Classes e Métodos Abstratos	cb537b68-517d-4488-8913-d07d8ceba4c5	2025-01-29 20:23:12.878	2025-01-29 20:23:12.878
174f09eb-aaec-4a88-ae24-e5c9bb39dd8e	polimorfismo	Introdução ao Polimorfismo	cb537b68-517d-4488-8913-d07d8ceba4c5	2025-01-29 20:23:12.878	2025-01-29 20:23:12.878
7dcacec9-a654-4dde-83a5-90dcd2f217ad	decorators	Uso de Decorators	c357b6cc-ac52-41b3-80cf-97826ba0bf6e	2025-01-29 20:23:12.898	2025-01-29 20:23:12.898
38c394ba-9064-45c5-a41c-24dd74690135	moduleSystems	Módulos e Import/Export	c357b6cc-ac52-41b3-80cf-97826ba0bf6e	2025-01-29 20:23:12.898	2025-01-29 20:23:12.898
34f885d1-2ba5-46d8-9639-883e7645b190	namespace	Namespaces	c357b6cc-ac52-41b3-80cf-97826ba0bf6e	2025-01-29 20:23:12.898	2025-01-29 20:23:12.898
6744a758-a852-4dbd-bd79-c5f9242762e1	advancedTypes	Tipos Avançados	c357b6cc-ac52-41b3-80cf-97826ba0bf6e	2025-01-29 20:23:12.898	2025-01-29 20:23:12.898
\.


--
-- TOC entry 4881 (class 0 OID 60316)
-- Dependencies: 219
-- Data for Name: Technology; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."Technology" (id, name, "createdAt", "updatedAt", alt, color, "hoverColor", logo, padding, title) FROM stdin;
44c57ad7-8550-41a2-a562-0c3919e41929	gin	2025-01-29 20:23:11.956	2025-01-29 20:23:11.956	gin Logo	bg-gradient-to-r from-gray-500 to-gray-700	hover:from-gray-600 hover:to-gray-800		px-8 py-3	Gin
dda9f985-8614-4e9c-8564-dcd7de1181f7	golang	2025-01-29 20:23:12.062	2025-01-29 20:23:12.062	go Logo	bg-gradient-to-r from-gray-500 to-gray-700	hover:from-gray-600 hover:to-gray-800		px-8 py-3	Go
1c889291-fc8c-48c8-8de2-d343294427e5	javascript	2025-01-29 20:23:12.277	2025-01-29 20:23:12.277	js Logo	bg-gradient-to-r from-gray-500 to-gray-700	hover:from-gray-600 hover:to-gray-800		px-8 py-3	Js
29682086-bbe4-46d1-8f91-35eb6c7c8b96	nestjs	2025-01-29 20:23:12.391	2025-01-29 20:23:12.391	nest Logo	bg-gradient-to-r from-gray-500 to-gray-700	hover:from-gray-600 hover:to-gray-800		px-8 py-3	Nest
6ae0814b-a033-483b-91f2-dc1996076c37	nodejs	2025-01-29 20:23:12.441	2025-01-29 20:23:12.441	node Logo	bg-gradient-to-r from-gray-500 to-gray-700	hover:from-gray-600 hover:to-gray-800		px-8 py-3	Node
71dd44bc-8b1c-44a9-976d-adcf257249e1	sql	2025-01-29 20:23:12.616	2025-01-29 20:23:12.616	sql Logo	bg-gradient-to-r from-gray-500 to-gray-700	hover:from-gray-600 hover:to-gray-800		px-8 py-3	Sql
5d9f153f-110c-44de-a4c7-c7020debf158	typescript	2025-01-29 20:23:12.778	2025-01-29 20:23:12.778	ts Logo	bg-gradient-to-r from-gray-500 to-gray-700	hover:from-gray-600 hover:to-gray-800		px-8 py-3	Ts
\.


--
-- TOC entry 4879 (class 0 OID 60224)
-- Dependencies: 217
-- Data for Name: _prisma_migrations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public._prisma_migrations (id, checksum, finished_at, migration_name, logs, rolled_back_at, started_at, applied_steps_count) FROM stdin;
7f7b6855-0d72-4473-89bd-9ec4f5e2a212	11c68751786317a0c2911807c6e7d003c7cb1c2e11df74f30824667cdf66e3bf	2025-01-29 16:27:15.895816-03	20250122153050_dados_iniciais	\N	\N	2025-01-29 16:27:15.848799-03	1
62f2a503-0405-40ea-bdd8-48ef6bc74f41	1d397d9d9db2c66f08f22c0c48ea573e2792111f32fadeaf0f2d3c114df5f68b	2025-01-29 16:27:15.931518-03	20250122222319_iiiii	\N	\N	2025-01-29 16:27:15.897643-03	1
1c040cb6-1cfc-4f34-af96-1bfb46290e86	90a7684dabb344c7e6c90ae128fcdfd114e4cc073e0755142309f0a240f040e9	2025-01-29 16:27:15.956089-03	20250122231046_tentativa_mil	\N	\N	2025-01-29 16:27:15.932569-03	1
596e95ec-c931-4536-b263-7d32173f9b16	8ed0ceacd25aea43e787160a6125a2281c69f1f1999fc3efaea7373ec99fbfd4	2025-01-29 16:27:51.475149-03	20250129192722_	\N	\N	2025-01-29 16:27:51.46549-03	1
\.


--
-- TOC entry 4726 (class 2606 OID 60331)
-- Name: Category Category_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Category"
    ADD CONSTRAINT "Category_pkey" PRIMARY KEY (id);


--
-- TOC entry 4720 (class 2606 OID 60296)
-- Name: Example Example_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Example"
    ADD CONSTRAINT "Example_pkey" PRIMARY KEY (id);


--
-- TOC entry 4729 (class 2606 OID 60339)
-- Name: Item Item_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Item"
    ADD CONSTRAINT "Item_pkey" PRIMARY KEY (id);


--
-- TOC entry 4723 (class 2606 OID 60323)
-- Name: Technology Technology_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Technology"
    ADD CONSTRAINT "Technology_pkey" PRIMARY KEY (id);


--
-- TOC entry 4717 (class 2606 OID 60232)
-- Name: _prisma_migrations _prisma_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public._prisma_migrations
    ADD CONSTRAINT _prisma_migrations_pkey PRIMARY KEY (id);


--
-- TOC entry 4724 (class 1259 OID 60341)
-- Name: Category_name_technologyId_key; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX "Category_name_technologyId_key" ON public."Category" USING btree (name, "technologyId");


--
-- TOC entry 4718 (class 1259 OID 60343)
-- Name: Example_itemId_key; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX "Example_itemId_key" ON public."Example" USING btree ("itemId");


--
-- TOC entry 4727 (class 1259 OID 60342)
-- Name: Item_itemId_categoryId_key; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX "Item_itemId_categoryId_key" ON public."Item" USING btree ("itemId", "categoryId");


--
-- TOC entry 4721 (class 1259 OID 60340)
-- Name: Technology_name_key; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX "Technology_name_key" ON public."Technology" USING btree (name);


--
-- TOC entry 4732 (class 2606 OID 60344)
-- Name: Category Category_technologyId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Category"
    ADD CONSTRAINT "Category_technologyId_fkey" FOREIGN KEY ("technologyId") REFERENCES public."Technology"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 4730 (class 2606 OID 60354)
-- Name: Example Example_itemId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Example"
    ADD CONSTRAINT "Example_itemId_fkey" FOREIGN KEY ("itemId") REFERENCES public."Item"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 4731 (class 2606 OID 60359)
-- Name: Example Example_technologyId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Example"
    ADD CONSTRAINT "Example_technologyId_fkey" FOREIGN KEY ("technologyId") REFERENCES public."Technology"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 4733 (class 2606 OID 60349)
-- Name: Item Item_categoryId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."Item"
    ADD CONSTRAINT "Item_categoryId_fkey" FOREIGN KEY ("categoryId") REFERENCES public."Category"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 4890 (class 0 OID 0)
-- Dependencies: 5
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE USAGE ON SCHEMA public FROM PUBLIC;


-- Completed on 2025-02-13 17:50:11

--
-- PostgreSQL database dump complete
--